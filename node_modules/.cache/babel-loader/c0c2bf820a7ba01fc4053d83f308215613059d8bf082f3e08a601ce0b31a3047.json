{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/HeaderCombinationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport MiningView from './MiningView';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationList = ({\n  channel,\n  selectedHeader,\n  onCombinationSelect,\n  selectedCombination,\n  onHeaderSearch,\n  onHeaderSimilarityRequest,\n  onMultipleCombinationsSelect\n}) => {\n  _s();\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  // 선택된 여러 조합들을 위한 state 추가\n  const [selectedCombinations, setSelectedCombinations] = useState([]);\n\n  // New state for filtering and sorting\n  const [uniqueItems, setUniqueItems] = useState([]);\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [excludedFilters, setExcludedFilters] = useState([]);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n\n  // 추가: 데이터 보기 탭 상태 (전체/미처리)\n  const [viewTab, setViewTab] = useState('all'); // 'all' or 'unprocessed'\n\n  // Initialize selectedCombinations when selectedCombination changes\n  useEffect(() => {\n    if (selectedCombination) {\n      if (!selectedCombinations.includes(selectedCombination)) {\n        setSelectedCombinations([selectedCombination]);\n      }\n    } else {\n      setSelectedCombinations([]);\n    }\n  }, [selectedCombination]);\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]);\n\n  // Extract unique items and count their frequency when combinationHeaders changes\n  useEffect(() => {\n    if (combinationHeaders.length === 0) {\n      setUniqueItems([]);\n      return;\n    }\n    const itemFrequency = {};\n\n    // Count frequency of each unique item\n    combinationHeaders.forEach(item => {\n      if (!item.header_group) return;\n      const headers = item.header_group.split('|');\n      headers.forEach(header => {\n        if (header) {\n          if (itemFrequency[header]) {\n            itemFrequency[header]++;\n          } else {\n            itemFrequency[header] = 1;\n          }\n        }\n      });\n    });\n\n    // Convert to array and sort by frequency (descending)\n    const sortedItems = Object.entries(itemFrequency).map(([name, count]) => ({\n      name,\n      count\n    })).sort((a, b) => b.count - a.count);\n    setUniqueItems(sortedItems);\n  }, [combinationHeaders]);\n\n  // 수정된 handleCombinationClick 함수 - 다중 선택 지원\n  const handleCombinationClick = combination => {\n    // Check if the combination is already selected\n    const isSelected = selectedCombinations.includes(combination);\n\n    // Update the selectedCombinations array\n    let newSelectedCombinations;\n    if (isSelected) {\n      // If already selected, remove it from selection\n      newSelectedCombinations = selectedCombinations.filter(comb => comb !== combination);\n    } else {\n      // If not selected, add it to selection\n      newSelectedCombinations = [...selectedCombinations, combination];\n    }\n\n    // Update state\n    setSelectedCombinations(newSelectedCombinations);\n\n    // Keep the original onCombinationSelect for backward compatibility\n    // But only send the first selected combination or null if empty\n    if (onCombinationSelect) {\n      onCombinationSelect(newSelectedCombinations.length > 0 ? newSelectedCombinations[0] : null);\n    }\n\n    // 부모 컴포넌트에 여러 선택 목록 전달\n    if (onMultipleCombinationsSelect) {\n      onMultipleCombinationsSelect(newSelectedCombinations);\n    }\n  };\n\n  // Handle right-click on tag to search and get similarity\n  const handleTagRightClick = (e, header) => {\n    e.preventDefault(); // Prevent default context menu\n    e.stopPropagation(); // Don't trigger parent's click\n\n    // Call parent handlers if they exist\n    if (onHeaderSearch) {\n      onHeaderSearch(header);\n    }\n\n    // 유사헤더 보기 요청 처리\n    if (onHeaderSimilarityRequest) {\n      onHeaderSimilarityRequest(header);\n    }\n  };\n\n  // Updated function to cycle through states: AND -> NOT -> REMOVE (for filter section)\n  const toggleFilter = item => {\n    // Check if item is in active filters\n    if (activeFilters.includes(item)) {\n      // If already in active, move to excluded\n      setActiveFilters(activeFilters.filter(filter => filter !== item));\n      setExcludedFilters([...excludedFilters, item]);\n    }\n    // Check if item is in excluded filters\n    else if (excludedFilters.includes(item)) {\n      // If already in excluded, remove from all filters\n      setExcludedFilters(excludedFilters.filter(filter => filter !== item));\n    }\n    // Item is not in any filter\n    else {\n      // Add to active filters\n      setActiveFilters([...activeFilters, item]);\n    }\n  };\n\n  // Simple toggle for combination list tags (only toggle active/inactive)\n  const toggleCombinationTagFilter = item => {\n    // If already in active filters, remove it\n    if (activeFilters.includes(item)) {\n      setActiveFilters(activeFilters.filter(filter => filter !== item));\n    }\n    // If not in active filters, add it (and remove from excluded if needed)\n    else {\n      // Remove from excluded if present\n      if (excludedFilters.includes(item)) {\n        setExcludedFilters(excludedFilters.filter(filter => filter !== item));\n      }\n      // Add to active filters\n      setActiveFilters([...activeFilters, item]);\n    }\n  };\n\n  // Reset all filters\n  const resetFilters = () => {\n    setActiveFilters([]);\n    setExcludedFilters([]);\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = headerGroup => {\n    if (!headerGroup) return null;\n    const headers = headerGroup.split('|');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-tags\",\n      style: {\n        textAlign: 'right',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        width: '100%'\n      },\n      children: headers.map((header, index) => {\n        const isActive = activeFilters.includes(header);\n        const isExcluded = excludedFilters.includes(header);\n        const className = `similarity-tag ${isActive ? 'active' : ''} ${isExcluded ? 'filtered-out' : ''}`;\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: className,\n          style: {\n            margin: '0 2px',\n            display: 'inline-block'\n          },\n          onClick: e => {\n            e.stopPropagation(); // Don't trigger parent's click\n            toggleCombinationTagFilter(header); // Use the simple toggle for combination list\n          },\n          onContextMenu: e => {\n            handleTagRightClick(e, header);\n          },\n          children: header\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n\n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n\n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n    }\n  };\n\n  // Filter and sort the combination headers\n  const filteredAndSortedCombinations = useMemo(() => {\n    if (!combinationHeaders.length) return [];\n\n    // Filter combinations based on activeFilters and excludedFilters\n    let filtered = [...combinationHeaders];\n\n    // 추가: \"미처리\" 탭일 경우 처리되지 않은 항목만 필터링\n    if (viewTab === 'unprocessed') {\n      filtered = filtered.filter(item => !item.processed); // processed 값이 없거나 false인 항목만 포함\n    }\n    if (activeFilters.length > 0 || excludedFilters.length > 0) {\n      filtered = filtered.filter(item => {\n        if (!item.header_group) return false;\n        const headers = item.header_group.split('|');\n\n        // Check if ALL active filters are included (AND logic)\n        const containsAllActive = activeFilters.length === 0 || activeFilters.every(filter => headers.includes(filter));\n\n        // Check if NONE of the excluded filters are included (NOT logic)\n        const containsNoExcluded = excludedFilters.length === 0 || !excludedFilters.some(filter => headers.includes(filter));\n        return containsAllActive && containsNoExcluded;\n      });\n    }\n\n    // Sort combinations: first by number of items (ascending), then alphabetically\n    return filtered.sort((a, b) => {\n      // Count items in each combination\n      const aCount = a.header_group ? a.header_group.split('|').length : 0;\n      const bCount = b.header_group ? b.header_group.split('|').length : 0;\n\n      // First sort by count (ascending)\n      if (aCount !== bCount) {\n        return aCount - bCount;\n      }\n\n      // Then sort alphabetically\n      return a.header_group.localeCompare(b.header_group);\n    });\n  }, [combinationHeaders, activeFilters, excludedFilters, viewTab]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-title\",\n        children: !testMode ? '헤더명 조합 목록' : '헤더명 조합 목록'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-mode-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Test Mode \", testMode ? 'ON' : 'OFF']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 305,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: testMode,\n            onChange: toggleTestMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"view-tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-tab ${viewTab === 'all' ? 'active' : ''}`,\n        onClick: () => setViewTab('all'),\n        children: \"\\uC804\\uCCB4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `view-tab ${viewTab === 'unprocessed' ? 'active' : ''}`,\n        onClick: () => setViewTab('unprocessed'),\n        children: \"\\uBBF8\\uCC98\\uB9AC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), viewTab === 'unprocessed' && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-count\",\n        children: [filteredAndSortedCombinations.length, \"\\uAC1C \\uB0A8\\uC74C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), activeTab === 'combination' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-header\",\n          onClick: () => setIsFilterOpen(!isFilterOpen),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"\\uD0DC\\uADF8 \\uD544\\uD130\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this), activeFilters.length > 0 || excludedFilters.length > 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"filter-results-count\",\n              children: [activeFilters.length + excludedFilters.length, \"\\uAC1C \\uC801\\uC6A9\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 19\n            }, this) : null]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: 'flex',\n              alignItems: 'center'\n            },\n            children: [filteredAndSortedCombinations.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"search-result-count\",\n              children: [filteredAndSortedCombinations.length, combinationHeaders.length !== filteredAndSortedCombinations.length ? `/${combinationHeaders.length}` : '']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"filter-toggle-btn\",\n              children: isFilterOpen ? '▲' : '▼'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), isFilterOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"\\uD074\\uB9AD: \\uD3EC\\uD568(AND) \\u2192 \\uC81C\\uC678(NOT) \\u2192 \\uD574\\uC81C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this), (activeFilters.length > 0 || excludedFilters.length > 0) && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"reset-filters-btn\",\n              onClick: resetFilters,\n              children: \"\\uCD08\\uAE30\\uD654\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-tags\",\n            children: uniqueItems.map((item, index) => {\n              const isActive = activeFilters.includes(item.name);\n              const isExcluded = excludedFilters.includes(item.name);\n              const className = `filter-tag ${isActive ? 'active' : ''} ${isExcluded ? 'excluded' : ''}`;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: className,\n                onClick: () => toggleFilter(item.name),\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"tag-text\",\n                  children: [item.name, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"tag-count\",\n                    children: [\"(\", item.count, \")\"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 389,\n                    columnNumber: 39\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 388,\n                  columnNumber: 25\n                }, this)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-content\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"\\uB85C\\uB529 \\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 401,\n          columnNumber: 15\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: [\"\\uC5D0\\uB7EC: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 15\n        }, this) : filteredAndSortedCombinations.length > 0 ? filteredAndSortedCombinations.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column-item ${selectedCombinations.includes(item.header_group) ? 'selected' : ''}`,\n          onClick: () => handleCombinationClick(item.header_group),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"item-count-badge\",\n            children: item.header_group ? item.header_group.split('|').length : 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 19\n          }, this), renderHeaderGroupAsTags(item.header_group), item.processed && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processed-indicator\",\n            title: \"\\uCC98\\uB9AC\\uB428\",\n            children: \"\\u2713\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 17\n        }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column-empty\",\n          children: viewTab === 'unprocessed' ? \"미처리 항목이 없습니다.\" : activeFilters.length > 0 || excludedFilters.length > 0 ? \"필터 조건에 맞는 결과가 없습니다.\" : testMode ? \"테스트 모드가 활성화되었습니다.\" : \"채널과 헤더를 선택해주세요.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 422,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content mining-view\",\n      children: /*#__PURE__*/_jsxDEV(MiningView, {\n        channel: channel,\n        selectedHeader: selectedHeader,\n        onCombinationSelect: onCombinationSelect,\n        selectedCombination: selectedCombination,\n        onHeaderSearch: onHeaderSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'combination' ? 'active' : ''}`,\n        onClick: () => setActiveTab('combination'),\n        children: \"\\uC870\\uD569\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'mining' ? 'active' : ''}`,\n        onClick: () => setActiveTab('mining'),\n        children: \"\\uB9C8\\uC774\\uB2DD\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 7\n    }, this), selectedCombinations.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-combinations-indicator\",\n      children: [\"\\uC120\\uD0DD\\uB41C \\uC870\\uD569: \", selectedCombinations.length, \"\\uAC1C\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 298,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationList, \"JXw6cz6DhwGMV4XlrQiGVAVSQbU=\");\n_c = HeaderCombinationList;\nexport default HeaderCombinationList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationList\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","fetchHeaderCombinationList","MiningView","jsxDEV","_jsxDEV","HeaderCombinationList","channel","selectedHeader","onCombinationSelect","selectedCombination","onHeaderSearch","onHeaderSimilarityRequest","onMultipleCombinationsSelect","_s","combinationHeaders","setCombinationHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","testMode","setTestMode","selectedCombinations","setSelectedCombinations","uniqueItems","setUniqueItems","activeFilters","setActiveFilters","excludedFilters","setExcludedFilters","isFilterOpen","setIsFilterOpen","viewTab","setViewTab","includes","getCombinationHeaders","response","console","log","list","headers","Array","isArray","err","message","length","itemFrequency","forEach","item","header_group","split","header","sortedItems","Object","entries","map","name","count","sort","a","b","handleCombinationClick","combination","isSelected","newSelectedCombinations","filter","comb","handleTagRightClick","e","preventDefault","stopPropagation","toggleFilter","toggleCombinationTagFilter","resetFilters","renderHeaderGroupAsTags","headerGroup","className","style","textAlign","display","flexWrap","justifyContent","width","children","index","isActive","isExcluded","margin","onClick","onContextMenu","fileName","_jsxFileName","lineNumber","columnNumber","toggleTestMode","newTestMode","filteredAndSortedCombinations","filtered","processed","containsAllActive","every","containsNoExcluded","some","aCount","bCount","localeCompare","type","checked","onChange","alignItems","title","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/HeaderCombinationList.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport MiningView from './MiningView';\nimport './Column.css';\n\nconst HeaderCombinationList = ({ \n  channel, \n  selectedHeader, \n  onCombinationSelect, \n  selectedCombination, \n  onHeaderSearch, \n  onHeaderSimilarityRequest,\n  onMultipleCombinationsSelect\n}) => {\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  // 선택된 여러 조합들을 위한 state 추가\n  const [selectedCombinations, setSelectedCombinations] = useState([]);\n  \n  // New state for filtering and sorting\n  const [uniqueItems, setUniqueItems] = useState([]);\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [excludedFilters, setExcludedFilters] = useState([]);\n  const [isFilterOpen, setIsFilterOpen] = useState(false);\n  \n  // 추가: 데이터 보기 탭 상태 (전체/미처리)\n  const [viewTab, setViewTab] = useState('all'); // 'all' or 'unprocessed'\n\n  // Initialize selectedCombinations when selectedCombination changes\n  useEffect(() => {\n    if (selectedCombination) {\n      if (!selectedCombinations.includes(selectedCombination)) {\n        setSelectedCombinations([selectedCombination]);\n      }\n    } else {\n      setSelectedCombinations([]);\n    }\n  }, [selectedCombination]);\n\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      \n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]);\n\n  // Extract unique items and count their frequency when combinationHeaders changes\n  useEffect(() => {\n    if (combinationHeaders.length === 0) {\n      setUniqueItems([]);\n      return;\n    }\n\n    const itemFrequency = {};\n    \n    // Count frequency of each unique item\n    combinationHeaders.forEach(item => {\n      if (!item.header_group) return;\n      \n      const headers = item.header_group.split('|');\n      headers.forEach(header => {\n        if (header) {\n          if (itemFrequency[header]) {\n            itemFrequency[header]++;\n          } else {\n            itemFrequency[header] = 1;\n          }\n        }\n      });\n    });\n    \n    // Convert to array and sort by frequency (descending)\n    const sortedItems = Object.entries(itemFrequency)\n      .map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n    \n    setUniqueItems(sortedItems);\n  }, [combinationHeaders]);\n\n  // 수정된 handleCombinationClick 함수 - 다중 선택 지원\n  const handleCombinationClick = (combination) => {\n    // Check if the combination is already selected\n    const isSelected = selectedCombinations.includes(combination);\n    \n    // Update the selectedCombinations array\n    let newSelectedCombinations;\n    if (isSelected) {\n      // If already selected, remove it from selection\n      newSelectedCombinations = selectedCombinations.filter(comb => comb !== combination);\n    } else {\n      // If not selected, add it to selection\n      newSelectedCombinations = [...selectedCombinations, combination];\n    }\n    \n    // Update state\n    setSelectedCombinations(newSelectedCombinations);\n    \n    // Keep the original onCombinationSelect for backward compatibility\n    // But only send the first selected combination or null if empty\n    if (onCombinationSelect) {\n      onCombinationSelect(newSelectedCombinations.length > 0 ? newSelectedCombinations[0] : null);\n    }\n    \n    // 부모 컴포넌트에 여러 선택 목록 전달\n    if (onMultipleCombinationsSelect) {\n      onMultipleCombinationsSelect(newSelectedCombinations);\n    }\n  };\n\n  // Handle right-click on tag to search and get similarity\n  const handleTagRightClick = (e, header) => {\n    e.preventDefault(); // Prevent default context menu\n    e.stopPropagation(); // Don't trigger parent's click\n    \n    // Call parent handlers if they exist\n    if (onHeaderSearch) {\n      onHeaderSearch(header);\n    }\n    \n    // 유사헤더 보기 요청 처리\n    if (onHeaderSimilarityRequest) {\n      onHeaderSimilarityRequest(header);\n    }\n  };\n\n  // Updated function to cycle through states: AND -> NOT -> REMOVE (for filter section)\n  const toggleFilter = (item) => {\n    // Check if item is in active filters\n    if (activeFilters.includes(item)) {\n      // If already in active, move to excluded\n      setActiveFilters(activeFilters.filter(filter => filter !== item));\n      setExcludedFilters([...excludedFilters, item]);\n    } \n    // Check if item is in excluded filters\n    else if (excludedFilters.includes(item)) {\n      // If already in excluded, remove from all filters\n      setExcludedFilters(excludedFilters.filter(filter => filter !== item));\n    } \n    // Item is not in any filter\n    else {\n      // Add to active filters\n      setActiveFilters([...activeFilters, item]);\n    }\n  };\n\n  // Simple toggle for combination list tags (only toggle active/inactive)\n  const toggleCombinationTagFilter = (item) => {\n    // If already in active filters, remove it\n    if (activeFilters.includes(item)) {\n      setActiveFilters(activeFilters.filter(filter => filter !== item));\n    } \n    // If not in active filters, add it (and remove from excluded if needed)\n    else {\n      // Remove from excluded if present\n      if (excludedFilters.includes(item)) {\n        setExcludedFilters(excludedFilters.filter(filter => filter !== item));\n      }\n      // Add to active filters\n      setActiveFilters([...activeFilters, item]);\n    }\n  };\n\n  // Reset all filters\n  const resetFilters = () => {\n    setActiveFilters([]);\n    setExcludedFilters([]);\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = (headerGroup) => {\n    if (!headerGroup) return null;\n    \n    const headers = headerGroup.split('|');\n    return (\n      <div className=\"header-tags\" style={{ \n        textAlign: 'right',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'flex-end',\n        width: '100%'\n      }}>\n        {headers.map((header, index) => {\n          const isActive = activeFilters.includes(header);\n          const isExcluded = excludedFilters.includes(header);\n          const className = `similarity-tag ${isActive ? 'active' : ''} ${isExcluded ? 'filtered-out' : ''}`;\n          \n          return (\n            <span \n              key={index} \n              className={className}\n              style={{ margin: '0 2px', display: 'inline-block' }}\n              onClick={(e) => {\n                e.stopPropagation(); // Don't trigger parent's click\n                toggleCombinationTagFilter(header); // Use the simple toggle for combination list\n              }}\n              onContextMenu={(e) => {\n                handleTagRightClick(e, header);\n              }}\n            >\n              {header}\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n    \n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n    \n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n    }\n  };\n\n  // Filter and sort the combination headers\n  const filteredAndSortedCombinations = useMemo(() => {\n    if (!combinationHeaders.length) return [];\n    \n    // Filter combinations based on activeFilters and excludedFilters\n    let filtered = [...combinationHeaders];\n    \n    // 추가: \"미처리\" 탭일 경우 처리되지 않은 항목만 필터링\n    if (viewTab === 'unprocessed') {\n      filtered = filtered.filter(item => !item.processed); // processed 값이 없거나 false인 항목만 포함\n    }\n    \n    if (activeFilters.length > 0 || excludedFilters.length > 0) {\n      filtered = filtered.filter(item => {\n        if (!item.header_group) return false;\n        \n        const headers = item.header_group.split('|');\n        \n        // Check if ALL active filters are included (AND logic)\n        const containsAllActive = activeFilters.length === 0 || \n          activeFilters.every(filter => headers.includes(filter));\n          \n        // Check if NONE of the excluded filters are included (NOT logic)\n        const containsNoExcluded = excludedFilters.length === 0 || \n          !excludedFilters.some(filter => headers.includes(filter));\n          \n        return containsAllActive && containsNoExcluded;\n      });\n    }\n    \n    // Sort combinations: first by number of items (ascending), then alphabetically\n    return filtered.sort((a, b) => {\n      // Count items in each combination\n      const aCount = a.header_group ? a.header_group.split('|').length : 0;\n      const bCount = b.header_group ? b.header_group.split('|').length : 0;\n      \n      // First sort by count (ascending)\n      if (aCount !== bCount) {\n        return aCount - bCount;\n      }\n      \n      // Then sort alphabetically\n      return a.header_group.localeCompare(b.header_group);\n    });\n  }, [combinationHeaders, activeFilters, excludedFilters, viewTab]);\n\n  return (\n    <div className=\"column-container\">\n      <div className=\"column-title-container\">\n        <h2 className=\"column-title\">\n          {!testMode ? '헤더명 조합 목록' : '헤더명 조합 목록'}\n        </h2>\n        <div className=\"test-mode-toggle\">\n          <label className=\"toggle-label\">\n            <span>Test Mode {testMode ? 'ON' : 'OFF'}</span>\n            <input \n              type=\"checkbox\" \n              checked={testMode}\n              onChange={toggleTestMode}\n            />\n            <span className=\"toggle-slider\"></span>\n          </label>\n        </div>\n      </div>\n      \n      {/* 추가: 전체/미처리 탭 선택 UI */}\n      <div className=\"view-tabs\">\n        <button \n          className={`view-tab ${viewTab === 'all' ? 'active' : ''}`}\n          onClick={() => setViewTab('all')}\n        >\n          전체\n        </button>\n        <button \n          className={`view-tab ${viewTab === 'unprocessed' ? 'active' : ''}`}\n          onClick={() => setViewTab('unprocessed')}\n        >\n          미처리\n        </button>\n        {viewTab === 'unprocessed' && (\n          <span className=\"unprocessed-count\">\n            {filteredAndSortedCombinations.length}개 남음\n          </span>\n        )}\n      </div>\n      \n      {activeTab === 'combination' ? (\n        <div className=\"tab-content\">\n          {/* Filter controls */}\n          <div className=\"filter-section\">\n            <div className=\"filter-header\" onClick={() => setIsFilterOpen(!isFilterOpen)}>\n              <div className=\"filter-title\">\n                <h3>태그 필터</h3>\n                {activeFilters.length > 0 || excludedFilters.length > 0 ? (\n                  <span className=\"filter-results-count\">\n                    {activeFilters.length + excludedFilters.length}개 적용\n                  </span>\n                ) : null}\n              </div>\n              \n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                {filteredAndSortedCombinations.length > 0 && (\n                  <span className=\"search-result-count\">\n                    {filteredAndSortedCombinations.length}\n                    {combinationHeaders.length !== filteredAndSortedCombinations.length ? \n                      `/${combinationHeaders.length}` : ''}\n                  </span>\n                )}\n                <button className=\"filter-toggle-btn\">\n                  {isFilterOpen ? '▲' : '▼'}\n                </button>\n              </div>\n            </div>\n            \n            {isFilterOpen && (\n              <div className=\"filter-content\">\n                <div className=\"filter-info\">\n                  <p>클릭: 포함(AND) → 제외(NOT) → 해제</p>\n                  {(activeFilters.length > 0 || excludedFilters.length > 0) && (\n                    <button className=\"reset-filters-btn\" onClick={resetFilters}>\n                      초기화\n                    </button>\n                  )}\n                </div>\n                \n                <div className=\"filter-tags\">\n                  {uniqueItems.map((item, index) => {\n                    const isActive = activeFilters.includes(item.name);\n                    const isExcluded = excludedFilters.includes(item.name);\n                    const className = `filter-tag ${isActive ? 'active' : ''} ${isExcluded ? 'excluded' : ''}`;\n                    \n                    return (\n                      <div \n                        key={index} \n                        className={className}\n                        onClick={() => toggleFilter(item.name)}\n                      >\n                        <span className=\"tag-text\">\n                          {item.name} <span className=\"tag-count\">({item.count})</span>\n                        </span>\n                      </div>\n                    );\n                  })}\n                </div>\n              </div>\n            )}\n          </div>\n          \n          <div className=\"column-content\">\n            {loading ? (\n              <div className=\"loading\">로딩 중...</div>\n            ) : error ? (\n              <div className=\"error\">에러: {error}</div>\n            ) : filteredAndSortedCombinations.length > 0 ? (\n              filteredAndSortedCombinations.map((item, index) => (\n                <div \n                  key={index} \n                  className={`column-item ${selectedCombinations.includes(item.header_group) ? 'selected' : ''}`}\n                  onClick={() => handleCombinationClick(item.header_group)}\n                >\n                  <div className=\"item-count-badge\">\n                    {item.header_group ? item.header_group.split('|').length : 0}\n                  </div>\n                  {renderHeaderGroupAsTags(item.header_group)}\n                  {/* 처리 상태 표시 아이콘 */}\n                  {item.processed && (\n                    <div className=\"processed-indicator\" title=\"처리됨\">✓</div>\n                  )}\n                </div>\n              ))\n            ) : (\n              <div className=\"column-empty\">\n                {viewTab === 'unprocessed' ? \n                  \"미처리 항목이 없습니다.\" :\n                  activeFilters.length > 0 || excludedFilters.length > 0 ? \n                    \"필터 조건에 맞는 결과가 없습니다.\" : \n                    testMode ? \n                      \"테스트 모드가 활성화되었습니다.\" : \n                      \"채널과 헤더를 선택해주세요.\"\n                }\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className=\"tab-content mining-view\">\n          <MiningView \n            channel={channel}\n            selectedHeader={selectedHeader}\n            onCombinationSelect={onCombinationSelect}\n            selectedCombination={selectedCombination}\n            onHeaderSearch={onHeaderSearch}\n          />\n        </div>\n      )}\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'combination' ? 'active' : ''}`}\n          onClick={() => setActiveTab('combination')}\n        >\n          조합뷰\n        </button>\n        <button \n          className={`tab ${activeTab === 'mining' ? 'active' : ''}`}\n          onClick={() => setActiveTab('mining')}\n        >\n          마이닝뷰\n        </button>\n      </div>\n      {/* 선택된 조합 수 표시 */}\n      {selectedCombinations.length > 0 && (\n        <div className=\"selected-combinations-indicator\">\n          선택된 조합: {selectedCombinations.length}개\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HeaderCombinationList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}