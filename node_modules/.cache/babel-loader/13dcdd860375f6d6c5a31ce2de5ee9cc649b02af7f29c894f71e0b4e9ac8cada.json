{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MiningView = ({\n  combinationHeaders,\n  loading,\n  error,\n  testMode,\n  onPatternSelect\n}) => {\n  _s();\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('fpgrowth'); // Only use FP-Growth\n  const [minSupport, setMinSupport] = useState(0.01); // Changed to 1% default\n  const [minConfidence, setMinConfidence] = useState(0.01); // Changed to 1% default\n  const [maxDepth, setMaxDepth] = useState(100); // No practical limit\n  const [currentPath, setCurrentPath] = useState([]);\n  const [showSettings, setShowSettings] = useState(false);\n  const [ignoredNodes, setIgnoredNodes] = useState([]); // 배열로 변경\n  const svgRef = useRef(null);\n\n  // 콘솔에 prop 확인 로그\n  useEffect(() => {\n    console.log('onPatternSelect prop:', onPatternSelect);\n    console.log('combinationHeaders:', combinationHeaders);\n  }, [onPatternSelect, combinationHeaders]);\n\n  // 메모이즈된 무시 노드 확인 함수\n  const isNodeIgnored = useCallback(nodeId => {\n    return ignoredNodes.includes(nodeId);\n  }, [ignoredNodes]);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (miningData && svgRef.current) {\n      console.log('Rendering tree, ignored nodes:', ignoredNodes);\n      renderMiningTree();\n    }\n  }, [miningData, expandedNodes, highlightedPattern, ignoredNodes]);\n\n  // Function to render a unified hierarchical tree visualization\n  const renderMiningTree = () => {\n    if (!svgRef.current || !miningData) return;\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    const CONTAINER_WIDTH = svg.clientWidth || 300;\n    const NODE_HEIGHT = 32; // Reduced height\n    const NODE_SPACING = 10; // Reduced spacing\n    const LEVEL_INDENT = 35; // Increased indent for better hierarchy visualization\n\n    // Calculate tree structure based on expanded nodes\n    const treeNodes = [];\n    let yOffset = 20; // Initial top padding\n\n    // Recursive function to add nodes\n    const addNodesRecursively = (nodes, parentId, level, isVisible) => {\n      if (!nodes || nodes.length === 0) return;\n\n      // Sort nodes by support for better visualization\n      const sortedNodes = [...nodes].sort((a, b) => b.support - a.support);\n      sortedNodes.forEach(node => {\n        // Skip if parent is collapsed or node is ignored\n        if (!isVisible || isNodeIgnored(node.id)) return;\n        const isExpanded = expandedNodes[node.id] || false;\n\n        // Add current node\n        treeNodes.push({\n          ...node,\n          level,\n          x: 10 + level * LEVEL_INDENT,\n          y: yOffset,\n          isExpanded,\n          parent: parentId\n        });\n\n        // Increment y-position for next node\n        yOffset += NODE_HEIGHT + NODE_SPACING;\n\n        // Process children if any\n        if (node.children && node.children.length > 0) {\n          addNodesRecursively(node.children, node.id, level + 1, isVisible && isExpanded);\n        }\n      });\n    };\n\n    // Add all nodes from mining data\n    const sortedTopNodes = [...miningData].sort((a, b) => b.support - a.support);\n    addNodesRecursively(sortedTopNodes, null, 0, true);\n\n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`);\n\n    // Create a container for the SVG elements\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(container);\n\n    // Draw connections between nodes\n    treeNodes.forEach(node => {\n      if (node.parent) {\n        const parent = treeNodes.find(n => n.id === node.parent);\n        if (parent) {\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          const startX = parent.x + 8;\n          const startY = parent.y + NODE_HEIGHT / 2;\n          const endX = node.x;\n          const endY = node.y + NODE_HEIGHT / 2;\n\n          // Create an elbow connector\n          const d = `M ${startX} ${startY} L ${startX + 5} ${startY} L ${startX + 5} ${endY} L ${endX} ${endY}`;\n          path.setAttribute('d', d);\n          path.setAttribute('fill', 'none');\n\n          // Highlight path if node is part of highlighted pattern\n          const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id) && highlightedPattern.includes(parent.id);\n\n          // Improved highlight styling\n          if (isHighlighted) {\n            path.setAttribute('stroke', '#3498db'); // More vibrant highlight color\n            path.setAttribute('stroke-width', '2');\n            path.setAttribute('stroke-dasharray', '0'); // Solid line\n          } else {\n            path.setAttribute('stroke', '#eee');\n            path.setAttribute('stroke-width', '1');\n          }\n          container.appendChild(path);\n        }\n      }\n    });\n\n    // Draw nodes\n    treeNodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n      nodeGroup.setAttribute('data-node-id', node.id);\n\n      // Node background (rectangle)\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n\n      // Calculate width based on content and level\n      const baseWidth = CONTAINER_WIDTH - node.x - 30;\n      const width = Math.min(baseWidth, 240);\n      rect.setAttribute('width', width);\n      rect.setAttribute('height', NODE_HEIGHT);\n      rect.setAttribute('rx', 4); // Smaller corner radius\n\n      // Determine fill color based on level and highlight state\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n\n      // Use a more monotone color scheme\n      let fillColor = node.level === 0 ? '#f8f9fa' : '#ffffff';\n      if (isHighlighted) {\n        fillColor = '#e6f2fa'; // Lighter blue tint for highlighted nodes\n      }\n      rect.setAttribute('fill', fillColor);\n      rect.setAttribute('stroke', isHighlighted ? '#3498db' : '#ddd'); // Blue for highlight\n      rect.setAttribute('stroke-width', isHighlighted ? '1.5' : '1');\n\n      // Make nodes interactive\n      nodeGroup.style.cursor = 'pointer';\n\n      // 노드 클릭 핸들러 - 직접 패턴 전송 (ignore/expand 버튼 제외)\n      nodeGroup.addEventListener('click', e => {\n        // 이벤트 타겟 확인\n        const target = e.target;\n        const isIgnoreButton = target.getAttribute('data-action') === 'ignore';\n        const isExpandButton = target.getAttribute('data-action') === 'expand';\n        if (!isIgnoreButton && !isExpandButton) {\n          console.log('Node clicked:', node.id);\n          sendPatternToAPI(node);\n        }\n      });\n\n      // Toggle expansion only for nodes with children\n      if (node.children && node.children.length > 0) {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', width - 15);\n        indicator.setAttribute('y', NODE_HEIGHT / 2 + 4);\n        indicator.setAttribute('font-size', '13px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#888');\n        indicator.setAttribute('data-action', 'expand');\n\n        // Toggle expansion on click\n        indicator.addEventListener('click', e => {\n          e.stopPropagation(); // Prevent triggering the node click\n          console.log('Expand clicked:', node.id);\n          toggleNode(node.id);\n        });\n        nodeGroup.appendChild(indicator);\n      }\n\n      // Add X button for ignoring nodes\n      // background circle\n      const ignoreButtonBg = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      ignoreButtonBg.setAttribute('cx', width - 35);\n      ignoreButtonBg.setAttribute('cy', NODE_HEIGHT / 2);\n      ignoreButtonBg.setAttribute('r', 8);\n      ignoreButtonBg.setAttribute('fill', '#f5f5f5');\n      ignoreButtonBg.setAttribute('stroke', '#ddd');\n      ignoreButtonBg.setAttribute('stroke-width', '1');\n      ignoreButtonBg.setAttribute('data-action', 'ignore');\n      ignoreButtonBg.style.cursor = 'pointer';\n\n      // X mark\n      const ignoreButton = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      ignoreButton.textContent = '✕';\n      ignoreButton.setAttribute('x', width - 35);\n      ignoreButton.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      ignoreButton.setAttribute('font-size', '11px');\n      ignoreButton.setAttribute('text-anchor', 'middle');\n      ignoreButton.setAttribute('fill', '#999');\n      ignoreButton.setAttribute('data-action', 'ignore');\n      ignoreButton.style.cursor = 'pointer';\n\n      // Handle ignore click with simpler approach\n      const handleIgnoreClick = e => {\n        e.stopPropagation(); // Prevent triggering the node click\n        console.log('Ignore button clicked for node:', node.id);\n        ignoreNode(node.id);\n      };\n      ignoreButtonBg.addEventListener('click', handleIgnoreClick);\n      ignoreButton.addEventListener('click', handleIgnoreClick);\n\n      // Hover effect for highlighting patterns\n      nodeGroup.addEventListener('mouseenter', () => {\n        // Find all ancestors and highlight the path\n        const pattern = [node.id];\n        let currentNode = node;\n        while (currentNode.parent) {\n          pattern.push(currentNode.parent);\n          currentNode = treeNodes.find(n => n.id === currentNode.parent);\n          if (!currentNode) break;\n        }\n        setHighlightedPattern(pattern);\n\n        // Extract only the item names (not the full IDs) for the path display\n        const simplifiedPath = [];\n        pattern.forEach(id => {\n          const parts = id.split('-');\n          const lastPart = parts[parts.length - 1];\n          simplifiedPath.unshift(lastPart);\n        });\n        setCurrentPath(simplifiedPath);\n      });\n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n        // Don't clear current path - keep it visible\n      });\n\n      // Node label\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 8);\n      text.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      text.setAttribute('font-size', node.level === 0 ? '13px' : '12px');\n      text.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      text.setAttribute('fill', '#333');\n\n      // Make sure text fits\n      const maxTextWidth = width - 60;\n      let displayText = node.name;\n      if (displayText.length > 25) {\n        displayText = displayText.substring(0, 23) + '...';\n      }\n      text.textContent = displayText;\n\n      // Support count\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', width - 55);\n      supportText.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      supportText.setAttribute('font-size', '12px');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.setAttribute('fill', '#555');\n      supportText.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      supportText.textContent = node.support;\n      nodeGroup.appendChild(rect);\n      nodeGroup.appendChild(ignoreButtonBg);\n      nodeGroup.appendChild(ignoreButton);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      container.appendChild(nodeGroup);\n    });\n  };\n\n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n\n    // Build a single hierarchical tree structure instead of multiple independent trees\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n\n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n\n      // Create a single root node representing the most frequent item\n      const rootItem = frequentItems[0];\n      const rootSupport = tidLists[rootItem].size;\n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: rootSupport,\n        confidence: rootSupport / totalTransactions,\n        children: []\n      };\n\n      // Build a tree structure following the frequency order of items\n      const buildOrderedTree = (currentNode, currentPrefix, currentTids, level) => {\n        if (level >= maxDepth) return;\n\n        // Find index of the current node's item in the frequentItems list\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n\n        // Check for next items in the frequency order\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          const nextItemTids = tidLists[nextItem];\n\n          // Calculate intersection\n          const intersection = new Set([...currentTids].filter(tid => nextItemTids.has(tid)));\n          const support = intersection.size;\n\n          // Add to tree if support is sufficient\n          if (support >= Math.max(2, minSupportCount)) {\n            const newPrefix = [...currentPrefix, nextItem];\n            const confidence = support / currentTids.size;\n\n            // Add only if confidence is sufficient (reduced for deeper patterns)\n            if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              currentNode.children.push(childNode);\n\n              // Recursively build tree with this child as new parent\n              buildOrderedTree(childNode, newPrefix, intersection, level + 1);\n            }\n          }\n        }\n      };\n\n      // Start building the tree from the root\n      buildOrderedTree(singleTreeRoot, [rootItem], tidLists[rootItem], 1);\n\n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n\n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n\n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n\n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    } else {\n      // FP-GROWTH for a single hierarchical tree\n\n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n\n      // Create a single root node for the most frequent item\n      const rootItem = frequentItems[0];\n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: itemCounts[rootItem],\n        confidence: itemCounts[rootItem] / totalTransactions,\n        children: []\n      };\n\n      // Create a mapping of patterns to their support count\n      const patternSupports = {};\n\n      // First pass - gather all pattern supports\n      orderedTransactions.forEach(transaction => {\n        if (transaction.length < 2) return;\n        for (let i = 0; i < transaction.length; i++) {\n          for (let j = i + 1; j < transaction.length; j++) {\n            const pattern = [transaction[i], transaction[j]];\n            const key = pattern.join('-');\n            patternSupports[key] = (patternSupports[key] || 0) + 1;\n          }\n        }\n      });\n\n      // Then build tree with those precomputed pattern supports\n      const buildOrderedFPTree = (currentNode, level) => {\n        if (level >= maxDepth) return;\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n\n          // Check if the pair meets minimum support\n          const patternKey = [currentNode.name, nextItem].join('-');\n          const support = patternSupports[patternKey] || 0;\n          if (support >= Math.max(2, minSupportCount)) {\n            const confidence = support / itemCounts[currentNode.name];\n            if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              currentNode.children.push(childNode);\n              buildOrderedFPTree(childNode, level + 1);\n            }\n          }\n        }\n      };\n\n      // Start building the tree from the root\n      buildOrderedFPTree(singleTreeRoot, 1);\n\n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n\n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n\n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n\n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = algo => {\n    setAlgorithm(algo);\n  };\n\n  // Change minimum support threshold\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  // Change minimum confidence threshold\n  const handleConfidenceChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n\n  // Change maximum depth\n  const handleDepthChange = e => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Toggle settings panel\n  const toggleSettings = () => {\n    setShowSettings(prev => !prev);\n  };\n\n  // Setup initial path on first render\n  useEffect(() => {\n    if (miningData && miningData.length > 0) {\n      // Set initial path to root node\n      const rootItem = miningData[0].name;\n      setCurrentPath([rootItem]);\n    }\n  }, [miningData]);\n\n  // Function to ignore a node\n  const ignoreNode = nodeId => {\n    if (!nodeId) {\n      console.warn('ignoreNode: nodeId is undefined');\n      return;\n    }\n    console.log('Ignoring node:', nodeId);\n\n    // 배열로 상태 업데이트 - React가 확실히 변경을 감지\n    setIgnoredNodes(prev => {\n      if (prev.includes(nodeId)) {\n        return prev; // 이미 무시 중이면 변경하지 않음\n      }\n      return [...prev, nodeId]; // 새 배열 생성하여 상태 업데이트\n    });\n\n    // 피드백 표시\n    const parts = nodeId.split('-');\n    const nodeName = parts[parts.length - 1];\n    showNotification(`'${nodeName}' 노드가 무시됨`, 'ignore');\n  };\n\n  // 알림 표시 함수\n  const showNotification = (message, type = 'normal') => {\n    // 이전 알림 제거\n    const existingNotifications = document.querySelectorAll('.pattern-notification');\n    existingNotifications.forEach(n => {\n      if (n.parentNode) {\n        n.parentNode.removeChild(n);\n      }\n    });\n\n    // 새 알림 생성\n    const notification = document.createElement('div');\n    notification.className = `pattern-notification ${type === 'ignore' ? 'ignore-notification' : ''}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    setTimeout(() => {\n      notification.style.opacity = '0';\n      setTimeout(() => {\n        if (notification.parentNode) {\n          document.body.removeChild(notification);\n        }\n      }, 300);\n    }, 2000);\n  };\n\n  // Function to send pattern to API\n  const sendPatternToAPI = node => {\n    console.log('sendPatternToAPI called with node:', node);\n\n    // 콜백 함수 확인\n    if (typeof onPatternSelect !== 'function') {\n      console.warn('onPatternSelect is not a function:', onPatternSelect);\n      showNotification('패턴 선택 핸들러가 없습니다', 'ignore');\n      return;\n    }\n\n    // Get full pattern from node to root\n    const getFullPattern = nodeId => {\n      const parts = nodeId.split('-');\n      return parts.filter(part => !ignoredNodes.includes(part));\n    };\n\n    // Get full pattern without ignored nodes\n    const pattern = getFullPattern(node.id);\n\n    // Join with delimiter\n    const patternString = pattern.join('|');\n    console.log('Pattern to send:', patternString);\n\n    // 패턴이 비어있는지 확인\n    if (!patternString) {\n      console.warn('Pattern is empty after filtering ignored nodes');\n      showNotification('선택한 패턴이 비어 있습니다', 'ignore');\n      return;\n    }\n\n    // 패턴 전송\n    try {\n      onPatternSelect(patternString);\n      console.log('Pattern sent successfully:', patternString);\n      showNotification(`패턴 선택됨: ${patternString}`);\n    } catch (error) {\n      console.error('Error sending pattern:', error);\n      showNotification('패턴 전송 중 오류 발생', 'ignore');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"\\uC5D0\\uB7EC: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 9\n    }, this) : combinationHeaders && combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-path\",\n          children: currentPath.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [index > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"path-separator\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 692,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index === 0 ? \"path-root\" : \"\",\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 19\n            }, this)]\n          }, item + index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-actions\",\n          children: [ignoredNodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: () => {\n              console.log('Reset ignored nodes');\n              setIgnoredNodes([]);\n              showNotification('무시된 노드를 모두 초기화했습니다');\n            },\n            children: [\"\\uBB34\\uC2DC \\uCD08\\uAE30\\uD654 (\", ignoredNodes.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"settings-button\",\n            onClick: toggleSettings,\n            children: \"\\u2699\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-tree-container\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"mining-tree-svg\",\n          ref: svgRef,\n          width: \"100%\",\n          height: \"500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 11\n      }, this), showSettings && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD328\\uD134 \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-button\",\n            onClick: toggleSettings,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-label\",\n              children: [(minSupport * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.01\",\n              max: \"0.5\",\n              step: \"0.01\",\n              value: minSupport,\n              onChange: handleSupportChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-name\",\n              children: \"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-label\",\n              children: [(minConfidence * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 745,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.01\",\n              max: \"0.9\",\n              step: \"0.01\",\n              value: minConfidence,\n              onChange: handleConfidenceChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 746,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-name\",\n              children: \"\\uCD5C\\uC18C \\uC2E0\\uB8B0\\uB3C4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 754,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-label\",\n              children: maxDepth\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 757,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"3\",\n              max: \"100\",\n              step: \"1\",\n              value: maxDepth,\n              onChange: handleDepthChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 758,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-name\",\n              children: \"\\uCD5C\\uB300 \\uD328\\uD134 \\uAE4A\\uC774\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 766,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 756,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 687,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-empty\",\n      children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 773,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          position: relative;\n        }\n        \n        .mining-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 10px;\n          background-color: #ffffff;\n          border-bottom: 1px solid #eee;\n          z-index: 2;\n          position: sticky;\n          top: 0;\n        }\n        \n        .current-path {\n          font-size: 13px;\n          color: #555;\n          flex-grow: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        \n        .path-separator {\n          margin: 0 6px;\n          color: #999;\n        }\n        \n        .path-root {\n          font-weight: bold;\n        }\n        \n        .header-actions {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        \n        .reset-button {\n          background: #f5f5f5;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 3px 8px;\n          font-size: 11px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .reset-button:hover {\n          background: #eee;\n        }\n        \n        .settings-button {\n          background: none;\n          border: none;\n          font-size: 16px;\n          cursor: pointer;\n          padding: 4px 8px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        }\n        \n        .settings-button:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .mining-tree-container {\n          flex-grow: 1;\n          overflow: auto;\n          background-color: #ffffff;\n          padding: 0;\n          border: 1px solid #e0e0e0;\n          border-top: none;\n        }\n        \n        .settings-panel {\n          position: absolute;\n          top: 45px;\n          right: 10px;\n          width: 280px;\n          background: white;\n          border-radius: 6px;\n          box-shadow: 0 3px 10px rgba(0,0,0,0.15);\n          z-index: 10;\n          overflow: hidden;\n        }\n        \n        .settings-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 10px 15px;\n          background: #f8f9fa;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .settings-header h3 {\n          margin: 0;\n          font-size: 14px;\n          color: #333;\n        }\n        \n        .close-button {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .settings-content {\n          padding: 15px;\n        }\n        \n        .threshold-item {\n          margin-bottom: 15px;\n        }\n        \n        .threshold-label {\n          font-size: 13px;\n          font-weight: bold;\n          color: #333;\n          margin-bottom: 4px;\n          text-align: right;\n        }\n        \n        .threshold-name {\n          font-size: 12px;\n          color: #666;\n          margin-top: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .pattern-notification {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          background: rgba(52, 152, 219, 0.9);\n          color: white;\n          padding: 10px 15px;\n          border-radius: 4px;\n          font-size: 12px;\n          z-index: 1000;\n          transition: opacity 0.3s;\n          opacity: 1;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n        }\n        \n        .ignore-notification {\n          background: rgba(231, 76, 60, 0.9);\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 780,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 681,\n    columnNumber: 5\n  }, this);\n};\n_s(MiningView, \"GxC//ox93c+R2PyJU5BjdB0FVtg=\");\n_c = MiningView;\nexport default MiningView;\nvar _c;\n$RefreshReg$(_c, \"MiningView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MiningView","combinationHeaders","loading","error","testMode","onPatternSelect","_s","miningData","setMiningData","expandedNodes","setExpandedNodes","highlightedPattern","setHighlightedPattern","algorithm","setAlgorithm","minSupport","setMinSupport","minConfidence","setMinConfidence","maxDepth","setMaxDepth","currentPath","setCurrentPath","showSettings","setShowSettings","ignoredNodes","setIgnoredNodes","svgRef","console","log","isNodeIgnored","nodeId","includes","length","generateMiningData","current","renderMiningTree","svg","firstChild","removeChild","CONTAINER_WIDTH","clientWidth","NODE_HEIGHT","NODE_SPACING","LEVEL_INDENT","treeNodes","yOffset","addNodesRecursively","nodes","parentId","level","isVisible","sortedNodes","sort","a","b","support","forEach","node","id","isExpanded","push","x","y","parent","children","sortedTopNodes","setAttribute","container","document","createElementNS","appendChild","find","n","path","startX","startY","endX","endY","d","isHighlighted","nodeGroup","rect","baseWidth","width","Math","min","fillColor","style","cursor","addEventListener","e","target","isIgnoreButton","getAttribute","isExpandButton","sendPatternToAPI","indicator","textContent","stopPropagation","toggleNode","ignoreButtonBg","ignoreButton","handleIgnoreClick","ignoreNode","pattern","currentNode","simplifiedPath","parts","split","lastPart","unshift","text","maxTextWidth","displayText","name","substring","supportText","combinationData","algo","transactions","filter","item","header_group","map","itemCounts","totalTransactions","transaction","minSupportCount","max","floor","frequentItems","Object","keys","tidLists","Set","tid","add","rootItem","rootSupport","size","singleTreeRoot","confidence","buildOrderedTree","currentPrefix","currentTids","currentItemIndex","indexOf","i","nextItem","nextItemTids","intersection","has","newPrefix","childNode","initialExpanded","slice","child","orderedTransactions","patternSupports","j","key","join","buildOrderedFPTree","patternKey","switchAlgorithm","handleSupportChange","value","parseFloat","isNaN","handleConfidenceChange","handleDepthChange","parseInt","prev","toggleSettings","warn","nodeName","showNotification","message","type","existingNotifications","querySelectorAll","parentNode","notification","createElement","className","body","setTimeout","opacity","getFullPattern","part","patternString","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","ref","height","toFixed","step","onChange","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nconst MiningView = ({ combinationHeaders, loading, error, testMode, onPatternSelect }) => {\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('fpgrowth'); // Only use FP-Growth\n  const [minSupport, setMinSupport] = useState(0.01); // Changed to 1% default\n  const [minConfidence, setMinConfidence] = useState(0.01); // Changed to 1% default\n  const [maxDepth, setMaxDepth] = useState(100); // No practical limit\n  const [currentPath, setCurrentPath] = useState([]);\n  const [showSettings, setShowSettings] = useState(false);\n  const [ignoredNodes, setIgnoredNodes] = useState([]); // 배열로 변경\n  const svgRef = useRef(null);\n  \n  // 콘솔에 prop 확인 로그\n  useEffect(() => {\n    console.log('onPatternSelect prop:', onPatternSelect);\n    console.log('combinationHeaders:', combinationHeaders);\n  }, [onPatternSelect, combinationHeaders]);\n\n  // 메모이즈된 무시 노드 확인 함수\n  const isNodeIgnored = useCallback((nodeId) => {\n    return ignoredNodes.includes(nodeId);\n  }, [ignoredNodes]);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (miningData && svgRef.current) {\n      console.log('Rendering tree, ignored nodes:', ignoredNodes);\n      renderMiningTree();\n    }\n  }, [miningData, expandedNodes, highlightedPattern, ignoredNodes]);\n\n  // Function to render a unified hierarchical tree visualization\n  const renderMiningTree = () => {\n    if (!svgRef.current || !miningData) return;\n\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n\n    const CONTAINER_WIDTH = svg.clientWidth || 300;\n    const NODE_HEIGHT = 32; // Reduced height\n    const NODE_SPACING = 10; // Reduced spacing\n    const LEVEL_INDENT = 35; // Increased indent for better hierarchy visualization\n    \n    // Calculate tree structure based on expanded nodes\n    const treeNodes = [];\n    let yOffset = 20;  // Initial top padding\n    \n    // Recursive function to add nodes\n    const addNodesRecursively = (nodes, parentId, level, isVisible) => {\n      if (!nodes || nodes.length === 0) return;\n      \n      // Sort nodes by support for better visualization\n      const sortedNodes = [...nodes].sort((a, b) => b.support - a.support);\n      \n      sortedNodes.forEach(node => {\n        // Skip if parent is collapsed or node is ignored\n        if (!isVisible || isNodeIgnored(node.id)) return;\n        \n        const isExpanded = expandedNodes[node.id] || false;\n        \n        // Add current node\n        treeNodes.push({\n          ...node,\n          level,\n          x: 10 + (level * LEVEL_INDENT),\n          y: yOffset,\n          isExpanded,\n          parent: parentId\n        });\n        \n        // Increment y-position for next node\n        yOffset += NODE_HEIGHT + NODE_SPACING;\n        \n        // Process children if any\n        if (node.children && node.children.length > 0) {\n          addNodesRecursively(node.children, node.id, level + 1, isVisible && isExpanded);\n        }\n      });\n    };\n    \n    // Add all nodes from mining data\n    const sortedTopNodes = [...miningData].sort((a, b) => b.support - a.support);\n    addNodesRecursively(sortedTopNodes, null, 0, true);\n    \n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`);\n    \n    // Create a container for the SVG elements\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(container);\n    \n    // Draw connections between nodes\n    treeNodes.forEach(node => {\n      if (node.parent) {\n        const parent = treeNodes.find(n => n.id === node.parent);\n        if (parent) {\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          \n          const startX = parent.x + 8;\n          const startY = parent.y + (NODE_HEIGHT / 2);\n          const endX = node.x;\n          const endY = node.y + (NODE_HEIGHT / 2);\n          \n          // Create an elbow connector\n          const d = `M ${startX} ${startY} L ${startX + 5} ${startY} L ${startX + 5} ${endY} L ${endX} ${endY}`;\n          \n          path.setAttribute('d', d);\n          path.setAttribute('fill', 'none');\n          \n          // Highlight path if node is part of highlighted pattern\n          const isHighlighted = highlightedPattern && (\n            highlightedPattern.includes(node.id) && highlightedPattern.includes(parent.id)\n          );\n          \n          // Improved highlight styling\n          if (isHighlighted) {\n            path.setAttribute('stroke', '#3498db'); // More vibrant highlight color\n            path.setAttribute('stroke-width', '2');\n            path.setAttribute('stroke-dasharray', '0'); // Solid line\n          } else {\n            path.setAttribute('stroke', '#eee');\n            path.setAttribute('stroke-width', '1');\n          }\n          \n          container.appendChild(path);\n        }\n      }\n    });\n    \n    // Draw nodes\n    treeNodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n      nodeGroup.setAttribute('data-node-id', node.id);\n      \n      // Node background (rectangle)\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      \n      // Calculate width based on content and level\n      const baseWidth = CONTAINER_WIDTH - node.x - 30;\n      const width = Math.min(baseWidth, 240);\n      \n      rect.setAttribute('width', width);\n      rect.setAttribute('height', NODE_HEIGHT);\n      rect.setAttribute('rx', 4);  // Smaller corner radius\n      \n      // Determine fill color based on level and highlight state\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n      \n      // Use a more monotone color scheme\n      let fillColor = node.level === 0 ? '#f8f9fa' : '#ffffff'; \n      \n      if (isHighlighted) {\n        fillColor = '#e6f2fa'; // Lighter blue tint for highlighted nodes\n      }\n      \n      rect.setAttribute('fill', fillColor);\n      rect.setAttribute('stroke', isHighlighted ? '#3498db' : '#ddd'); // Blue for highlight\n      rect.setAttribute('stroke-width', isHighlighted ? '1.5' : '1');\n      \n      // Make nodes interactive\n      nodeGroup.style.cursor = 'pointer';\n      \n      // 노드 클릭 핸들러 - 직접 패턴 전송 (ignore/expand 버튼 제외)\n      nodeGroup.addEventListener('click', (e) => {\n        // 이벤트 타겟 확인\n        const target = e.target;\n        const isIgnoreButton = target.getAttribute('data-action') === 'ignore';\n        const isExpandButton = target.getAttribute('data-action') === 'expand';\n        \n        if (!isIgnoreButton && !isExpandButton) {\n          console.log('Node clicked:', node.id);\n          sendPatternToAPI(node);\n        }\n      });\n      \n      // Toggle expansion only for nodes with children\n      if (node.children && node.children.length > 0) {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', width - 15);\n        indicator.setAttribute('y', NODE_HEIGHT / 2 + 4);\n        indicator.setAttribute('font-size', '13px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#888');\n        indicator.setAttribute('data-action', 'expand');\n        \n        // Toggle expansion on click\n        indicator.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent triggering the node click\n          console.log('Expand clicked:', node.id);\n          toggleNode(node.id);\n        });\n        \n        nodeGroup.appendChild(indicator);\n      }\n      \n      // Add X button for ignoring nodes\n      // background circle\n      const ignoreButtonBg = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      ignoreButtonBg.setAttribute('cx', width - 35);\n      ignoreButtonBg.setAttribute('cy', NODE_HEIGHT / 2);\n      ignoreButtonBg.setAttribute('r', 8);\n      ignoreButtonBg.setAttribute('fill', '#f5f5f5');\n      ignoreButtonBg.setAttribute('stroke', '#ddd');\n      ignoreButtonBg.setAttribute('stroke-width', '1');\n      ignoreButtonBg.setAttribute('data-action', 'ignore');\n      ignoreButtonBg.style.cursor = 'pointer';\n      \n      // X mark\n      const ignoreButton = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      ignoreButton.textContent = '✕';\n      ignoreButton.setAttribute('x', width - 35);\n      ignoreButton.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      ignoreButton.setAttribute('font-size', '11px');\n      ignoreButton.setAttribute('text-anchor', 'middle');\n      ignoreButton.setAttribute('fill', '#999');\n      ignoreButton.setAttribute('data-action', 'ignore');\n      ignoreButton.style.cursor = 'pointer';\n      \n      // Handle ignore click with simpler approach\n      const handleIgnoreClick = (e) => {\n        e.stopPropagation(); // Prevent triggering the node click\n        console.log('Ignore button clicked for node:', node.id);\n        ignoreNode(node.id);\n      };\n      \n      ignoreButtonBg.addEventListener('click', handleIgnoreClick);\n      ignoreButton.addEventListener('click', handleIgnoreClick);\n      \n      // Hover effect for highlighting patterns\n      nodeGroup.addEventListener('mouseenter', () => {\n        // Find all ancestors and highlight the path\n        const pattern = [node.id];\n        let currentNode = node;\n        \n        while (currentNode.parent) {\n          pattern.push(currentNode.parent);\n          currentNode = treeNodes.find(n => n.id === currentNode.parent);\n          if (!currentNode) break;\n        }\n        \n        setHighlightedPattern(pattern);\n        \n        // Extract only the item names (not the full IDs) for the path display\n        const simplifiedPath = [];\n        pattern.forEach(id => {\n          const parts = id.split('-');\n          const lastPart = parts[parts.length - 1];\n          simplifiedPath.unshift(lastPart);\n        });\n        \n        setCurrentPath(simplifiedPath);\n      });\n      \n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n        // Don't clear current path - keep it visible\n      });\n      \n      // Node label\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 8);\n      text.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      text.setAttribute('font-size', node.level === 0 ? '13px' : '12px');\n      text.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      text.setAttribute('fill', '#333');\n      \n      // Make sure text fits\n      const maxTextWidth = width - 60;\n      let displayText = node.name;\n      \n      if (displayText.length > 25) {\n        displayText = displayText.substring(0, 23) + '...';\n      }\n      \n      text.textContent = displayText;\n      \n      // Support count\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', width - 55);\n      supportText.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      supportText.setAttribute('font-size', '12px');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.setAttribute('fill', '#555');\n      supportText.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      supportText.textContent = node.support;\n      \n      nodeGroup.appendChild(rect);\n      nodeGroup.appendChild(ignoreButtonBg);\n      nodeGroup.appendChild(ignoreButton);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      container.appendChild(nodeGroup);\n    });\n  };\n  \n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    \n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n    \n    // Build a single hierarchical tree structure instead of multiple independent trees\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n      \n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      \n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n      \n      // Create a single root node representing the most frequent item\n      const rootItem = frequentItems[0];\n      const rootSupport = tidLists[rootItem].size;\n      \n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: rootSupport,\n        confidence: rootSupport / totalTransactions,\n        children: []\n      };\n      \n      // Build a tree structure following the frequency order of items\n      const buildOrderedTree = (currentNode, currentPrefix, currentTids, level) => {\n        if (level >= maxDepth) return;\n        \n        // Find index of the current node's item in the frequentItems list\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        \n        // Check for next items in the frequency order\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          const nextItemTids = tidLists[nextItem];\n          \n          // Calculate intersection\n          const intersection = new Set([...currentTids].filter(tid => nextItemTids.has(tid)));\n          const support = intersection.size;\n          \n          // Add to tree if support is sufficient\n          if (support >= Math.max(2, minSupportCount)) {\n            const newPrefix = [...currentPrefix, nextItem];\n            const confidence = support / currentTids.size;\n            \n            // Add only if confidence is sufficient (reduced for deeper patterns)\n            if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              \n              currentNode.children.push(childNode);\n              \n              // Recursively build tree with this child as new parent\n              buildOrderedTree(childNode, newPrefix, intersection, level + 1);\n            }\n          }\n        }\n      };\n      \n      // Start building the tree from the root\n      buildOrderedTree(singleTreeRoot, [rootItem], tidLists[rootItem], 1);\n      \n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n      \n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n          \n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n      \n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n      \n    } else {\n      // FP-GROWTH for a single hierarchical tree\n      \n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction\n          .filter(item => frequentItems.includes(item))\n          .sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n      \n      // Create a single root node for the most frequent item\n      const rootItem = frequentItems[0];\n      \n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: itemCounts[rootItem],\n        confidence: itemCounts[rootItem] / totalTransactions,\n        children: []\n      };\n      \n      // Create a mapping of patterns to their support count\n      const patternSupports = {};\n      \n      // First pass - gather all pattern supports\n      orderedTransactions.forEach(transaction => {\n        if (transaction.length < 2) return;\n        \n        for (let i = 0; i < transaction.length; i++) {\n          for (let j = i + 1; j < transaction.length; j++) {\n            const pattern = [transaction[i], transaction[j]];\n            const key = pattern.join('-');\n            patternSupports[key] = (patternSupports[key] || 0) + 1;\n          }\n        }\n      });\n      \n      // Then build tree with those precomputed pattern supports\n      const buildOrderedFPTree = (currentNode, level) => {\n        if (level >= maxDepth) return;\n        \n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        \n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          \n          // Check if the pair meets minimum support\n          const patternKey = [currentNode.name, nextItem].join('-');\n          const support = patternSupports[patternKey] || 0;\n          \n          if (support >= Math.max(2, minSupportCount)) {\n            const confidence = support / itemCounts[currentNode.name];\n            \n            if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              \n              currentNode.children.push(childNode);\n              buildOrderedFPTree(childNode, level + 1);\n            }\n          }\n        }\n      };\n      \n      // Start building the tree from the root\n      buildOrderedFPTree(singleTreeRoot, 1);\n      \n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n      \n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n          \n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n      \n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = (algo) => {\n    setAlgorithm(algo);\n  };\n  \n  // Change minimum support threshold\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  \n  // Change minimum confidence threshold\n  const handleConfidenceChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n  \n  // Change maximum depth\n  const handleDepthChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Toggle settings panel\n  const toggleSettings = () => {\n    setShowSettings(prev => !prev);\n  };\n\n  // Setup initial path on first render\n  useEffect(() => {\n    if (miningData && miningData.length > 0) {\n      // Set initial path to root node\n      const rootItem = miningData[0].name;\n      setCurrentPath([rootItem]);\n    }\n  }, [miningData]);\n\n  // Function to ignore a node\n  const ignoreNode = (nodeId) => {\n    if (!nodeId) {\n      console.warn('ignoreNode: nodeId is undefined');\n      return;\n    }\n    \n    console.log('Ignoring node:', nodeId);\n    \n    // 배열로 상태 업데이트 - React가 확실히 변경을 감지\n    setIgnoredNodes(prev => {\n      if (prev.includes(nodeId)) {\n        return prev; // 이미 무시 중이면 변경하지 않음\n      }\n      return [...prev, nodeId]; // 새 배열 생성하여 상태 업데이트\n    });\n    \n    // 피드백 표시\n    const parts = nodeId.split('-');\n    const nodeName = parts[parts.length - 1];\n    \n    showNotification(`'${nodeName}' 노드가 무시됨`, 'ignore');\n  };\n  \n  // 알림 표시 함수\n  const showNotification = (message, type = 'normal') => {\n    // 이전 알림 제거\n    const existingNotifications = document.querySelectorAll('.pattern-notification');\n    existingNotifications.forEach(n => {\n      if (n.parentNode) {\n        n.parentNode.removeChild(n);\n      }\n    });\n    \n    // 새 알림 생성\n    const notification = document.createElement('div');\n    notification.className = `pattern-notification ${type === 'ignore' ? 'ignore-notification' : ''}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.style.opacity = '0';\n      setTimeout(() => {\n        if (notification.parentNode) {\n          document.body.removeChild(notification);\n        }\n      }, 300);\n    }, 2000);\n  };\n  \n  // Function to send pattern to API\n  const sendPatternToAPI = (node) => {\n    console.log('sendPatternToAPI called with node:', node);\n    \n    // 콜백 함수 확인\n    if (typeof onPatternSelect !== 'function') {\n      console.warn('onPatternSelect is not a function:', onPatternSelect);\n      showNotification('패턴 선택 핸들러가 없습니다', 'ignore');\n      return;\n    }\n    \n    // Get full pattern from node to root\n    const getFullPattern = (nodeId) => {\n      const parts = nodeId.split('-');\n      return parts.filter(part => !ignoredNodes.includes(part));\n    };\n    \n    // Get full pattern without ignored nodes\n    const pattern = getFullPattern(node.id);\n    \n    // Join with delimiter\n    const patternString = pattern.join('|');\n    \n    console.log('Pattern to send:', patternString);\n    \n    // 패턴이 비어있는지 확인\n    if (!patternString) {\n      console.warn('Pattern is empty after filtering ignored nodes');\n      showNotification('선택한 패턴이 비어 있습니다', 'ignore');\n      return;\n    }\n    \n    // 패턴 전송\n    try {\n      onPatternSelect(patternString);\n      console.log('Pattern sent successfully:', patternString);\n      showNotification(`패턴 선택됨: ${patternString}`);\n    } catch (error) {\n      console.error('Error sending pattern:', error);\n      showNotification('패턴 전송 중 오류 발생', 'ignore');\n    }\n  };\n\n  return (\n    <div className=\"tab-content\">\n      {loading ? (\n        <div className=\"loading\">로딩 중...</div>\n      ) : error ? (\n        <div className=\"error\">에러: {error}</div>\n      ) : combinationHeaders && combinationHeaders.length > 0 ? (\n        <div className=\"mining-view\">\n          <div className=\"mining-header\">\n            <div className=\"current-path\">\n              {currentPath.map((item, index) => (\n                <span key={item + index}>\n                  {index > 0 && <span className=\"path-separator\">→</span>}\n                  <span className={index === 0 ? \"path-root\" : \"\"}>{item}</span>\n                </span>\n              ))}\n            </div>\n            <div className=\"header-actions\">\n              {ignoredNodes.length > 0 && (\n                <button \n                  className=\"reset-button\" \n                  onClick={() => {\n                    console.log('Reset ignored nodes');\n                    setIgnoredNodes([]);\n                    showNotification('무시된 노드를 모두 초기화했습니다');\n                  }}\n                >\n                  무시 초기화 ({ignoredNodes.length})\n                </button>\n              )}\n              <button className=\"settings-button\" onClick={toggleSettings}>\n                ⚙️\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"mining-tree-container\">\n            <svg \n              className=\"mining-tree-svg\" \n              ref={svgRef} \n              width=\"100%\" \n              height=\"500\"\n            ></svg>\n          </div>\n          \n          {showSettings && (\n            <div className=\"settings-panel\">\n              <div className=\"settings-header\">\n                <h3>패턴 설정</h3>\n                <button className=\"close-button\" onClick={toggleSettings}>×</button>\n              </div>\n              <div className=\"settings-content\">\n                <div className=\"threshold-item\">\n                  <div className=\"threshold-label\">{(minSupport * 100).toFixed(0)}%</div>\n                  <input \n                    type=\"range\" \n                    min=\"0.01\" \n                    max=\"0.5\" \n                    step=\"0.01\" \n                    value={minSupport}\n                    onChange={handleSupportChange}\n                  />\n                  <div className=\"threshold-name\">최소 지지도</div>\n                </div>\n                <div className=\"threshold-item\">\n                  <div className=\"threshold-label\">{(minConfidence * 100).toFixed(0)}%</div>\n                  <input \n                    type=\"range\" \n                    min=\"0.01\" \n                    max=\"0.9\" \n                    step=\"0.01\" \n                    value={minConfidence}\n                    onChange={handleConfidenceChange}\n                  />\n                  <div className=\"threshold-name\">최소 신뢰도</div>\n                </div>\n                <div className=\"threshold-item\">\n                  <div className=\"threshold-label\">{maxDepth}</div>\n                  <input \n                    type=\"range\" \n                    min=\"3\" \n                    max=\"100\" \n                    step=\"1\" \n                    value={maxDepth}\n                    onChange={handleDepthChange}\n                  />\n                  <div className=\"threshold-name\">최대 패턴 깊이</div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"column-empty\">\n          {testMode \n            ? \"마이닝 데이터를 로딩 중입니다...\" \n            : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          position: relative;\n        }\n        \n        .mining-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 10px;\n          background-color: #ffffff;\n          border-bottom: 1px solid #eee;\n          z-index: 2;\n          position: sticky;\n          top: 0;\n        }\n        \n        .current-path {\n          font-size: 13px;\n          color: #555;\n          flex-grow: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        \n        .path-separator {\n          margin: 0 6px;\n          color: #999;\n        }\n        \n        .path-root {\n          font-weight: bold;\n        }\n        \n        .header-actions {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        \n        .reset-button {\n          background: #f5f5f5;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 3px 8px;\n          font-size: 11px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .reset-button:hover {\n          background: #eee;\n        }\n        \n        .settings-button {\n          background: none;\n          border: none;\n          font-size: 16px;\n          cursor: pointer;\n          padding: 4px 8px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        }\n        \n        .settings-button:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .mining-tree-container {\n          flex-grow: 1;\n          overflow: auto;\n          background-color: #ffffff;\n          padding: 0;\n          border: 1px solid #e0e0e0;\n          border-top: none;\n        }\n        \n        .settings-panel {\n          position: absolute;\n          top: 45px;\n          right: 10px;\n          width: 280px;\n          background: white;\n          border-radius: 6px;\n          box-shadow: 0 3px 10px rgba(0,0,0,0.15);\n          z-index: 10;\n          overflow: hidden;\n        }\n        \n        .settings-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 10px 15px;\n          background: #f8f9fa;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .settings-header h3 {\n          margin: 0;\n          font-size: 14px;\n          color: #333;\n        }\n        \n        .close-button {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .settings-content {\n          padding: 15px;\n        }\n        \n        .threshold-item {\n          margin-bottom: 15px;\n        }\n        \n        .threshold-label {\n          font-size: 13px;\n          font-weight: bold;\n          color: #333;\n          margin-bottom: 4px;\n          text-align: right;\n        }\n        \n        .threshold-name {\n          font-size: 12px;\n          color: #666;\n          margin-top: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .pattern-notification {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          background: rgba(52, 152, 219, 0.9);\n          color: white;\n          padding: 10px 15px;\n          border-radius: 4px;\n          font-size: 12px;\n          z-index: 1000;\n          transition: opacity 0.3s;\n          opacity: 1;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n        }\n        \n        .ignore-notification {\n          background: rgba(231, 76, 60, 0.9);\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default MiningView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}