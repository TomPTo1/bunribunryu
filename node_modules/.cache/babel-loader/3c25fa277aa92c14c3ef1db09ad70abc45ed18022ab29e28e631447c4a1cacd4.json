{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\";\nimport React from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData\n}) => {\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // New function to render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-tag bracket-source\",\n          children: match.value\n        }, `proc-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    } else if (row.type === 'delimiter-separation') {\n      // For delimiter separation, we should preserve bracket positions from previous step\n      const elements = [];\n\n      // First, separate out the bracket parts (they have position info)\n      const bracketParts = row.separated.filter(part => part.source === 'bracket' && part.bracketInfo).sort((a, b) => a.bracketInfo.startIndex - b.bracketInfo.startIndex);\n\n      // Non-bracket parts go in between or around bracket parts\n      const otherParts = row.separated.filter(part => part.source !== 'bracket');\n\n      // Use a simple approach: put brackets in their exact positions, other parts elsewhere\n      let lastEnd = 0;\n      let otherIndex = 0;\n\n      // First, place any non-bracket parts that come before the first bracket\n      if (bracketParts.length > 0) {\n        const firstBracketStart = bracketParts[0].bracketInfo.startIndex;\n\n        // Add some non-bracket parts at the beginning if there's space\n        const beforeBracketText = original.substring(0, firstBracketStart).trim();\n        if (beforeBracketText.length > 0) {\n          // Look for matching non-bracket parts to put here\n          let foundMatchingPart = false;\n\n          // Try to find a matching part\n          for (let i = 0; i < otherParts.length; i++) {\n            const part = otherParts[i];\n            if (beforeBracketText.includes(part.value)) {\n              elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                children: part.value\n              }, `other-${otherIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 108,\n                columnNumber: 17\n              }, this));\n              otherIndex++;\n              otherParts.splice(i, 1); // Remove this part\n              foundMatchingPart = true;\n              i--; // Adjust index for removed item\n            }\n          }\n\n          // If no matching part found, show as unprocessed\n          if (!foundMatchingPart) {\n            elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unprocessed-tag\",\n              children: beforeBracketText\n            }, `unproc-start`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      }\n\n      // Place bracket parts in their exact positions\n      bracketParts.forEach((bracketPart, idx) => {\n        const bracketInfo = bracketPart.bracketInfo;\n\n        // Add the bracket content\n        elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-tag bracket-source\",\n          children: [bracketPart.value, bracketPart.isSplitPart && bracketPart.totalParts > 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"split-indicator\",\n            children: [bracketPart.partIndex + 1, \"/\", bracketPart.totalParts]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 15\n          }, this)]\n        }, `bracket-${idx}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this));\n\n        // Update the last position\n        lastEnd = bracketInfo.endIndex;\n\n        // If there's another bracket coming, check if we can fit other parts in between\n        if (idx < bracketParts.length - 1) {\n          const nextBracketStart = bracketParts[idx + 1].bracketInfo.startIndex;\n\n          // If there's space between brackets, add some non-bracket parts\n          if (nextBracketStart > lastEnd) {\n            const betweenText = original.substring(lastEnd, nextBracketStart).trim();\n            if (betweenText.length > 0) {\n              // Try to find matching parts for this space\n              let foundMatchingPart = false;\n\n              // Look for parts that might fit here\n              for (let i = 0; i < otherParts.length && i < 2; i++) {\n                // Limit to 2 parts\n                const part = otherParts[i];\n                if (betweenText.includes(part.value)) {\n                  elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                    children: part.value\n                  }, `between-${idx}-${i}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 21\n                  }, this));\n                  otherParts.splice(i, 1); // Remove this part\n                  foundMatchingPart = true;\n                  i--; // Adjust index for removed item\n                }\n              }\n\n              // If no matching part found, show as unprocessed\n              if (!foundMatchingPart) {\n                elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"unprocessed-tag\",\n                  children: betweenText\n                }, `unproc-${idx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 19\n                }, this));\n              }\n            }\n          }\n        }\n      });\n\n      // Add any text after the last bracket\n      if (lastEnd < original.length) {\n        const afterText = original.substring(lastEnd).trim();\n        if (afterText.length > 0) {\n          // Try to place remaining non-bracket parts\n          if (otherParts.length > 0) {\n            // Add remaining other parts\n            otherParts.forEach((part, idx) => {\n              elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                children: part.value\n              }, `remaining-${idx}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this));\n            });\n          } else {\n            // No parts left, show as unprocessed\n            elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unprocessed-tag\",\n              children: afterText\n            }, \"unproc-end\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      }\n      return elements.length > 0 ? elements : renderSeparatedValues(row);\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row);\n  };\n  const renderSeparatedValues = row => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"value-tag\",\n        children: val\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `value-tag ${item.source === 'bracket' ? 'bracket-source' : item.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n      children: typeof item === 'string' ? item : item.value\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"data-table\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {\n          className: \"enhanced-view\",\n          children: renderEnhancedView(row)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","renderEnhancedView","row","original","renderSeparatedValues","separated","type","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","value","endIndex","elements","bracketParts","filter","part","source","bracketInfo","otherParts","lastEnd","otherIndex","firstBracketStart","beforeBracketText","trim","foundMatchingPart","i","splice","bracketPart","isSplitPart","totalParts","partIndex","nextBracketStart","betweenText","afterText","Array","isArray","every","v","map","val","item","index","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData }) => {\n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // New function to render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          <span key={`proc-${idx}`} className=\"value-tag bracket-source\">{match.value}</span>\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    } else if (row.type === 'delimiter-separation') {\n      // For delimiter separation, we should preserve bracket positions from previous step\n      const elements = [];\n      \n      // First, separate out the bracket parts (they have position info)\n      const bracketParts = row.separated\n        .filter(part => part.source === 'bracket' && part.bracketInfo)\n        .sort((a, b) => a.bracketInfo.startIndex - b.bracketInfo.startIndex);\n      \n      // Non-bracket parts go in between or around bracket parts\n      const otherParts = row.separated.filter(part => part.source !== 'bracket');\n      \n      // Use a simple approach: put brackets in their exact positions, other parts elsewhere\n      let lastEnd = 0;\n      let otherIndex = 0;\n      \n      // First, place any non-bracket parts that come before the first bracket\n      if (bracketParts.length > 0) {\n        const firstBracketStart = bracketParts[0].bracketInfo.startIndex;\n        \n        // Add some non-bracket parts at the beginning if there's space\n        const beforeBracketText = original.substring(0, firstBracketStart).trim();\n        if (beforeBracketText.length > 0) {\n          // Look for matching non-bracket parts to put here\n          let foundMatchingPart = false;\n          \n          // Try to find a matching part\n          for (let i = 0; i < otherParts.length; i++) {\n            const part = otherParts[i];\n            if (beforeBracketText.includes(part.value)) {\n              elements.push(\n                <span key={`other-${otherIndex}`} className={`value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}>\n                  {part.value}\n                </span>\n              );\n              otherIndex++;\n              otherParts.splice(i, 1); // Remove this part\n              foundMatchingPart = true;\n              i--; // Adjust index for removed item\n            }\n          }\n          \n          // If no matching part found, show as unprocessed\n          if (!foundMatchingPart) {\n            elements.push(\n              <span key={`unproc-start`} className=\"unprocessed-tag\">{beforeBracketText}</span>\n            );\n          }\n        }\n      }\n      \n      // Place bracket parts in their exact positions\n      bracketParts.forEach((bracketPart, idx) => {\n        const bracketInfo = bracketPart.bracketInfo;\n        \n        // Add the bracket content\n        elements.push(\n          <span key={`bracket-${idx}`} className=\"value-tag bracket-source\">\n            {bracketPart.value}\n            {bracketPart.isSplitPart && bracketPart.totalParts > 1 && \n              <span className=\"split-indicator\">{bracketPart.partIndex + 1}/{bracketPart.totalParts}</span>\n            }\n          </span>\n        );\n        \n        // Update the last position\n        lastEnd = bracketInfo.endIndex;\n        \n        // If there's another bracket coming, check if we can fit other parts in between\n        if (idx < bracketParts.length - 1) {\n          const nextBracketStart = bracketParts[idx + 1].bracketInfo.startIndex;\n          \n          // If there's space between brackets, add some non-bracket parts\n          if (nextBracketStart > lastEnd) {\n            const betweenText = original.substring(lastEnd, nextBracketStart).trim();\n            \n            if (betweenText.length > 0) {\n              // Try to find matching parts for this space\n              let foundMatchingPart = false;\n              \n              // Look for parts that might fit here\n              for (let i = 0; i < otherParts.length && i < 2; i++) {  // Limit to 2 parts\n                const part = otherParts[i];\n                if (betweenText.includes(part.value)) {\n                  elements.push(\n                    <span key={`between-${idx}-${i}`} className={`value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}>\n                      {part.value}\n                    </span>\n                  );\n                  otherParts.splice(i, 1); // Remove this part\n                  foundMatchingPart = true;\n                  i--; // Adjust index for removed item\n                }\n              }\n              \n              // If no matching part found, show as unprocessed\n              if (!foundMatchingPart) {\n                elements.push(\n                  <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{betweenText}</span>\n                );\n              }\n            }\n          }\n        }\n      });\n      \n      // Add any text after the last bracket\n      if (lastEnd < original.length) {\n        const afterText = original.substring(lastEnd).trim();\n        \n        if (afterText.length > 0) {\n          // Try to place remaining non-bracket parts\n          if (otherParts.length > 0) {\n            // Add remaining other parts\n            otherParts.forEach((part, idx) => {\n              elements.push(\n                <span key={`remaining-${idx}`} className={`value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}>\n                  {part.value}\n                </span>\n              );\n            });\n          } else {\n            // No parts left, show as unprocessed\n            elements.push(\n              <span key=\"unproc-end\" className=\"unprocessed-tag\">{afterText}</span>\n            );\n          }\n        }\n      }\n      \n      return elements.length > 0 ? elements : renderSeparatedValues(row);\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row);\n  };\n\n  const renderSeparatedValues = (row) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => (\n        <span key={idx} className=\"value-tag\">{val}</span>\n      ));\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => (\n      <span \n        key={idx} \n        className={`value-tag ${item.source === 'bracket' ? 'bracket-source' : \n                              item.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n      >\n        {typeof item === 'string' ? item : item.value}\n      </span>\n    ));\n  };\n\n  return (\n    <table className=\"data-table\">\n      <tbody>\n        {flattenData(processedData).map((row, index) => (\n          <tr key={index}>\n            <td className=\"enhanced-view\">\n              {renderEnhancedView(row)}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}