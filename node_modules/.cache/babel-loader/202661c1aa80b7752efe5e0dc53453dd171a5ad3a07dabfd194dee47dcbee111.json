{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/PathNavigation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fetchChannels, fetchHeaders, fetchCombinations } from '../services/api';\nimport './PathNavigation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PathNavigation = ({\n  selectedChannel,\n  selectedHeader,\n  selectedCombination,\n  onChannelSelect,\n  onHeaderSelect,\n  onCombinationSelect,\n  viewMode,\n  onViewModeChange\n}) => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [headers, setHeaders] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [combinations, setCombinations] = useState([]);\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  const navigationRef = useRef(null);\n\n  // Parse channel into hierarchical levels\n  const parseChannelLevels = channelList => {\n    const levelMap = {};\n    channelList.forEach(channel => {\n      const channelKey = channel.채널키;\n      if (!channelKey) return;\n      const levels = channelKey.split('_');\n\n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n\n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => item.name === level && item.parentPath === parentPath);\n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    return levelMap;\n  };\n\n  // Fetch channels on component mount\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        const response = await fetchChannels();\n        const channelList = response.list || [];\n        setChannels(channelList);\n\n        // Parse channel levels\n        const levels = parseChannelLevels(channelList);\n        setChannelLevels(levels);\n      } catch (error) {\n        console.error('Error fetching channels:', error);\n      }\n    };\n    getChannels();\n  }, []);\n\n  // Fetch headers when a channel is selected\n  useEffect(() => {\n    if (selectedChannel) {\n      const getHeaders = async () => {\n        try {\n          const response = await fetchHeaders(selectedChannel);\n          setHeaders(response.list || []);\n        } catch (error) {\n          console.error('Error fetching headers:', error);\n        }\n      };\n      getHeaders();\n\n      // Update selected levels based on selected channel\n      const levels = selectedChannel.split('_');\n      setSelectedLevels(levels);\n    } else {\n      setHeaders([]);\n      setSelectedLevels([]);\n    }\n  }, [selectedChannel]);\n\n  // Fetch combinations when a header is selected\n  useEffect(() => {\n    if (selectedChannel && selectedHeader) {\n      const getCombinations = async () => {\n        try {\n          const response = await fetchCombinations(selectedChannel, selectedHeader);\n          setCombinations(response.list || []);\n        } catch (error) {\n          console.error('Error fetching combinations:', error);\n        }\n      };\n      getCombinations();\n    } else {\n      setCombinations([]);\n    }\n  }, [selectedChannel, selectedHeader]);\n\n  // Close navigation panel when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (navigationRef.current && !navigationRef.current.contains(event.target)) {\n        setShowNavigationPanel(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const toggleNavigationPanel = () => {\n    setShowNavigationPanel(!showNavigationPanel);\n  };\n  const handleLevelSelect = (level, index) => {\n    // Create a full channel path up to the selected level\n    const newSelectedLevels = [...selectedLevels];\n    newSelectedLevels[index] = level.name;\n\n    // Trim any levels after the selected index\n    const trimmedLevels = newSelectedLevels.slice(0, index + 1);\n    const newPath = trimmedLevels.join('_');\n\n    // Update selected levels first\n    setSelectedLevels(trimmedLevels);\n\n    // Find the full channel that matches this path\n    const channel = channels.find(c => c.채널키 === newPath);\n    if (channel) {\n      onChannelSelect(channel.채널키);\n      setShowNavigationPanel(false);\n    } else {\n      // If it's a partial path, we keep the navigation panel open\n      // to show lower levels without navigating away\n      const matchingChannel = channels.find(c => c.채널키.startsWith(newPath + '_'));\n      if (matchingChannel) {\n        // Don't call onChannelSelect yet, just update the local selectedLevels\n        // This allows users to see the next level before committing to a navigation\n      } else {\n        // If no matching channels at all, close the panel\n        setShowNavigationPanel(false);\n      }\n    }\n  };\n  const getFilteredLevelItems = levelIndex => {\n    if (!channelLevels[levelIndex]) return [];\n\n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return channelLevels[0];\n    }\n\n    // For deeper levels, filter based on parent path\n    const parentPath = selectedLevels.slice(0, levelIndex).join('_');\n    return channelLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n  const renderChannelPath = () => {\n    if (!selectedChannel) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-button\",\n        onClick: toggleNavigationPanel,\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section-label\",\n          children: \"\\uCC44\\uB110:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section-value\",\n          children: \"\\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dropdown-arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-section-button\",\n      onClick: toggleNavigationPanel,\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-label\",\n        children: \"\\uCC44\\uB110:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-path\",\n        style: {\n          flex: '1 1 auto'\n        },\n        children: selectedLevels.map((level, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [index > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"path-separator\",\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"path-level\",\n            children: level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dropdown-arrow\",\n        children: \"\\u25BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this);\n  };\n  const renderHeaderPath = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-section-button\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-label\",\n        children: \"\\uD5E4\\uB354:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-value\",\n        children: selectedHeader || '선택해주세요'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this);\n  };\n  const renderCombinationPath = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-section-button\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-label\",\n        children: \"\\uC870\\uD569:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-value\",\n        children: selectedCombination || '선택해주세요'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleViewMode = () => {\n    const newMode = viewMode === 'edit' ? 'browse' : 'edit';\n    onViewModeChange(newMode);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"path-navigation\",\n    ref: navigationRef,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section\",\n          style: {\n            flex: '1 1 auto'\n          },\n          children: renderChannelPath()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section\",\n          children: renderHeaderPath()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section\",\n          children: renderCombinationPath()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section mode-toggle\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav-section-button\",\n            onClick: toggleViewMode,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nav-section-value\",\n              children: viewMode === 'edit' ? 'Edit' : 'Browse'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mode-icon\",\n              children: viewMode === 'edit' ? '✏️' : '👁️'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), showNavigationPanel && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"level-columns\",\n          children: [Object.keys(channelLevels).map(levelIndex => {\n            const index = parseInt(levelIndex);\n\n            // Get items for this level based on parent selections\n            let items = [];\n            if (index === 0) {\n              items = channelLevels[0] || [];\n            } else if (index <= selectedLevels.length) {\n              const parentPath = selectedLevels.slice(0, index).join('_');\n              items = channelLevels[index] ? channelLevels[index].filter(item => item.parentPath === parentPath) : [];\n            }\n\n            // Only render the column if there are items\n            if (items.length === 0) return null;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-column\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column-header\",\n                children: [\"\\uCC44\\uB110\\uB808\\uBCA8 \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column-items\",\n                children: items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `level-item ${selectedLevels[index] === item.name ? 'selected' : ''}`,\n                  onClick: () => handleLevelSelect(item, index),\n                  children: item.name\n                }, itemIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 21\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 290,\n              columnNumber: 19\n            }, this);\n          }), selectedLevels.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"level-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-column-header\",\n              children: \"\\uC791\\uC5C5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 312,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-item action-button\",\n              onClick: () => {\n                const path = selectedLevels.join('_');\n                onChannelSelect(path);\n                setShowNavigationPanel(false);\n              },\n              children: \"\\uC774 \\uACBD\\uB85C\\uB85C \\uC774\\uB3D9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this), viewMode === 'browse' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"browse-mode-container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 9\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(PathNavigation, \"QLt9nfChfxehZTWRxh9Ux/XaydQ=\");\n_c = PathNavigation;\nexport default PathNavigation;\nvar _c;\n$RefreshReg$(_c, \"PathNavigation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchChannels","fetchHeaders","fetchCombinations","jsxDEV","_jsxDEV","PathNavigation","selectedChannel","selectedHeader","selectedCombination","onChannelSelect","onHeaderSelect","onCombinationSelect","viewMode","onViewModeChange","_s","channels","setChannels","headers","setHeaders","combinations","setCombinations","showNavigationPanel","setShowNavigationPanel","channelLevels","setChannelLevels","selectedLevels","setSelectedLevels","navigationRef","parseChannelLevels","channelList","levelMap","forEach","channel","channelKey","채널키","levels","split","level","index","parentPath","slice","join","currentPath","existingItem","find","item","name","push","fullPath","getChannels","response","list","error","console","getHeaders","getCombinations","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","toggleNavigationPanel","handleLevelSelect","newSelectedLevels","trimmedLevels","newPath","c","matchingChannel","startsWith","getFilteredLevelItems","levelIndex","filter","renderChannelPath","className","onClick","style","width","children","fileName","_jsxFileName","lineNumber","columnNumber","flex","map","Fragment","renderHeaderPath","renderCombinationPath","toggleViewMode","newMode","ref","Object","keys","parseInt","items","length","itemIndex","path","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/PathNavigation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fetchChannels, fetchHeaders, fetchCombinations } from '../services/api';\nimport './PathNavigation.css';\n\nconst PathNavigation = ({ \n  selectedChannel, \n  selectedHeader, \n  selectedCombination,\n  onChannelSelect,\n  onHeaderSelect,\n  onCombinationSelect,\n  viewMode,\n  onViewModeChange\n}) => {\n  const [channels, setChannels] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [headers, setHeaders] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [combinations, setCombinations] = useState([]);\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  \n  const navigationRef = useRef(null);\n\n  // Parse channel into hierarchical levels\n  const parseChannelLevels = (channelList) => {\n    const levelMap = {};\n    \n    channelList.forEach(channel => {\n      const channelKey = channel.채널키;\n      if (!channelKey) return;\n      \n      const levels = channelKey.split('_');\n      \n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        \n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n        \n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => \n          item.name === level && item.parentPath === parentPath\n        );\n        \n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    \n    return levelMap;\n  };\n\n  // Fetch channels on component mount\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        const response = await fetchChannels();\n        const channelList = response.list || [];\n        setChannels(channelList);\n        \n        // Parse channel levels\n        const levels = parseChannelLevels(channelList);\n        setChannelLevels(levels);\n      } catch (error) {\n        console.error('Error fetching channels:', error);\n      }\n    };\n\n    getChannels();\n  }, []);\n\n  // Fetch headers when a channel is selected\n  useEffect(() => {\n    if (selectedChannel) {\n      const getHeaders = async () => {\n        try {\n          const response = await fetchHeaders(selectedChannel);\n          setHeaders(response.list || []);\n        } catch (error) {\n          console.error('Error fetching headers:', error);\n        }\n      };\n\n      getHeaders();\n      \n      // Update selected levels based on selected channel\n      const levels = selectedChannel.split('_');\n      setSelectedLevels(levels);\n    } else {\n      setHeaders([]);\n      setSelectedLevels([]);\n    }\n  }, [selectedChannel]);\n\n  // Fetch combinations when a header is selected\n  useEffect(() => {\n    if (selectedChannel && selectedHeader) {\n      const getCombinations = async () => {\n        try {\n          const response = await fetchCombinations(selectedChannel, selectedHeader);\n          setCombinations(response.list || []);\n        } catch (error) {\n          console.error('Error fetching combinations:', error);\n        }\n      };\n\n      getCombinations();\n    } else {\n      setCombinations([]);\n    }\n  }, [selectedChannel, selectedHeader]);\n\n  // Close navigation panel when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (navigationRef.current && !navigationRef.current.contains(event.target)) {\n        setShowNavigationPanel(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const toggleNavigationPanel = () => {\n    setShowNavigationPanel(!showNavigationPanel);\n  };\n\n  const handleLevelSelect = (level, index) => {\n    // Create a full channel path up to the selected level\n    const newSelectedLevels = [...selectedLevels];\n    newSelectedLevels[index] = level.name;\n    \n    // Trim any levels after the selected index\n    const trimmedLevels = newSelectedLevels.slice(0, index + 1);\n    const newPath = trimmedLevels.join('_');\n    \n    // Update selected levels first\n    setSelectedLevels(trimmedLevels);\n    \n    // Find the full channel that matches this path\n    const channel = channels.find(c => c.채널키 === newPath);\n    \n    if (channel) {\n      onChannelSelect(channel.채널키);\n      setShowNavigationPanel(false);\n    } else {\n      // If it's a partial path, we keep the navigation panel open\n      // to show lower levels without navigating away\n      const matchingChannel = channels.find(c => c.채널키.startsWith(newPath + '_'));\n      if (matchingChannel) {\n        // Don't call onChannelSelect yet, just update the local selectedLevels\n        // This allows users to see the next level before committing to a navigation\n      } else {\n        // If no matching channels at all, close the panel\n        setShowNavigationPanel(false);\n      }\n    }\n  };\n\n  const getFilteredLevelItems = (levelIndex) => {\n    if (!channelLevels[levelIndex]) return [];\n    \n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return channelLevels[0];\n    }\n    \n    // For deeper levels, filter based on parent path\n    const parentPath = selectedLevels.slice(0, levelIndex).join('_');\n    return channelLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n\n  const renderChannelPath = () => {\n    if (!selectedChannel) {\n      return (\n        <div className=\"nav-section-button\" onClick={toggleNavigationPanel} style={{ width: '100%' }}>\n          <div className=\"nav-section-label\">채널:</div>\n          <div className=\"nav-section-value\">선택해주세요</div>\n          <span className=\"dropdown-arrow\">▼</span>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"nav-section-button\" onClick={toggleNavigationPanel} style={{ width: '100%' }}>\n        <div className=\"nav-section-label\">채널:</div>\n        <div className=\"nav-section-path\" style={{ flex: '1 1 auto' }}>\n          {selectedLevels.map((level, index) => (\n            <React.Fragment key={index}>\n              {index > 0 && <span className=\"path-separator\">&gt;</span>}\n              <div className=\"path-level\">\n                {level}\n              </div>\n            </React.Fragment>\n          ))}\n        </div>\n        <span className=\"dropdown-arrow\">▼</span>\n      </div>\n    );\n  };\n\n  const renderHeaderPath = () => {\n    return (\n      <div className=\"nav-section-button\">\n        <div className=\"nav-section-label\">헤더:</div>\n        <div className=\"nav-section-value\">\n          {selectedHeader || '선택해주세요'}\n        </div>\n      </div>\n    );\n  };\n\n  const renderCombinationPath = () => {\n    return (\n      <div className=\"nav-section-button\">\n        <div className=\"nav-section-label\">조합:</div>\n        <div className=\"nav-section-value\">\n          {selectedCombination || '선택해주세요'}\n        </div>\n      </div>\n    );\n  };\n\n  const toggleViewMode = () => {\n    const newMode = viewMode === 'edit' ? 'browse' : 'edit';\n    onViewModeChange(newMode);\n  };\n\n  return (\n    <div className=\"path-navigation\" ref={navigationRef}>\n      <div className=\"navigation-container\">\n        <div className=\"navigation-sections\">\n          <div className=\"nav-section\" style={{ flex: '1 1 auto' }}>\n            {renderChannelPath()}\n          </div>\n          \n          <div className=\"nav-section\">\n            {renderHeaderPath()}\n          </div>\n          \n          <div className=\"nav-section\">\n            {renderCombinationPath()}\n          </div>\n\n          <div className=\"nav-section mode-toggle\">\n            <div className=\"nav-section-button\" onClick={toggleViewMode}>\n              <div className=\"nav-section-value\">\n                {viewMode === 'edit' ? 'Edit' : 'Browse'}\n              </div>\n              <span className=\"mode-icon\">{viewMode === 'edit' ? '✏️' : '👁️'}</span>\n            </div>\n          </div>\n        </div>\n        \n        {showNavigationPanel && (\n          <div className=\"navigation-panel\">\n            <div className=\"level-columns\">\n              {/* Render columns for each level */}\n              {Object.keys(channelLevels).map((levelIndex) => {\n                const index = parseInt(levelIndex);\n                \n                // Get items for this level based on parent selections\n                let items = [];\n                if (index === 0) {\n                  items = channelLevels[0] || [];\n                } else if (index <= selectedLevels.length) {\n                  const parentPath = selectedLevels.slice(0, index).join('_');\n                  items = channelLevels[index] ? \n                    channelLevels[index].filter(item => item.parentPath === parentPath) : \n                    [];\n                }\n                \n                // Only render the column if there are items\n                if (items.length === 0) return null;\n                \n                return (\n                  <div className=\"level-column\" key={index}>\n                    <div className=\"level-column-header\">\n                      채널레벨 {index + 1}\n                    </div>\n                    <div className=\"level-column-items\">\n                      {items.map((item, itemIndex) => (\n                        <div \n                          key={itemIndex}\n                          className={`level-item ${selectedLevels[index] === item.name ? 'selected' : ''}`}\n                          onClick={() => handleLevelSelect(item, index)}\n                        >\n                          {item.name}\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                );\n              })}\n              \n              {/* Add a button to complete navigation when ready */}\n              {selectedLevels.length > 0 && (\n                <div className=\"level-column\">\n                  <div className=\"level-column-header\">\n                    작업\n                  </div>\n                  <div \n                    className=\"level-item action-button\"\n                    onClick={() => {\n                      const path = selectedLevels.join('_');\n                      onChannelSelect(path);\n                      setShowNavigationPanel(false);\n                    }}\n                  >\n                    이 경로로 이동\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Content area - display empty screen in browse mode */}\n      {viewMode === 'browse' ? (\n        <div className=\"browse-mode-container\">\n          {/* Empty screen for browse mode */}\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default PathNavigation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}