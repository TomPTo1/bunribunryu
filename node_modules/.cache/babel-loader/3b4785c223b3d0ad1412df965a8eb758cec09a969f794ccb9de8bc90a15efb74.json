{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PipelineStep from './PipelineStep';\nimport DataDisplay from './DataDisplay';\nimport { processBracketSeparation, processDelimiterSeparation, processSubstringSegmentation, processSegmentationGrouping, flattenData } from './dataProcessors';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeparationClassifier = ({\n  data,\n  onReset\n}) => {\n  _s();\n  var _pipeline$find;\n  const [processedData, setProcessedData] = useState(null);\n  const [segmentationData, setSegmentationData] = useState(null);\n  const [groupingData, setGroupingData] = useState(null);\n  const [pipeline, setPipeline] = useState([{\n    id: 'bracket-separation',\n    name: '괄호값 분리',\n    active: true\n  }, {\n    id: 'delimiter-separation',\n    name: '구분자 분리',\n    active: true,\n    config: {\n      delimiters: [{\n        value: ',',\n        enabled: true,\n        order: 1\n      }, {\n        value: ' ',\n        enabled: true,\n        order: 2\n      }]\n    }\n  }, {\n    id: 'substring-segmentation',\n    name: '상호부분문자열 분절',\n    active: true,\n    config: {\n      minSubstringLength: 2,\n      minOccurrence: 2\n    }\n  }, {\n    id: 'segmentation-grouping',\n    name: '분절값 그룹핑',\n    active: true,\n    config: {\n      groups: [],\n      replaceNumbers: false\n    }\n  }]);\n  const [selectedStep, setSelectedStep] = useState('delimiter-separation');\n\n  // Check if substring segmentation is active\n  const isSubstringSegmentationActive = ((_pipeline$find = pipeline.find(step => step.id === 'substring-segmentation')) === null || _pipeline$find === void 0 ? void 0 : _pipeline$find.active) || false;\n\n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Clean up duplicated data before processing\n      let cleanedData = {\n        ...data\n      };\n\n      // Check if data is already a processed result with duplicate content\n      const isDuplicated = input => {\n        if (typeof input === 'string') {\n          const halfLength = Math.floor(input.length / 2);\n          for (let i = 1; i <= halfLength; i++) {\n            if (input.substring(0, i) === input.substring(i, i * 2)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n\n      // Clean up data if it's duplicated\n      const cleanData = input => {\n        if (typeof input === 'string' && isDuplicated(input)) {\n          // Try to find a reasonable split point\n          const halfLength = Math.floor(input.length / 2);\n          return input.substring(0, halfLength);\n        } else if (Array.isArray(input)) {\n          return input.map(cleanData);\n        } else if (typeof input === 'object' && input !== null) {\n          const result = {};\n          for (const key in input) {\n            result[key] = cleanData(input[key]);\n          }\n          return result;\n        }\n        return input;\n      };\n\n      // Only clean if it appears to be duplicated\n      if (Object.values(cleanedData).some(val => typeof val === 'string' && isDuplicated(val))) {\n        cleanedData = cleanData(cleanedData);\n      }\n\n      // Process data through pipeline steps\n      let result = {\n        ...cleanedData\n      };\n\n      // Process bracket and delimiter steps\n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n        }\n      });\n\n      // Process substring segmentation separately if active\n      const segmentationStep = pipeline.find(step => step.id === 'substring-segmentation');\n      if (segmentationStep && segmentationStep.active) {\n        const segmentResult = processSubstringSegmentation(result, segmentationStep.config);\n        setSegmentationData(segmentResult);\n\n        // Process segmentation grouping if active\n        const groupingStep = pipeline.find(step => step.id === 'segmentation-grouping');\n        if (groupingStep && groupingStep.active) {\n          const groupingResult = processSegmentationGrouping(segmentResult, groupingStep.config);\n          setGroupingData(groupingResult);\n        } else {\n          setGroupingData(null);\n        }\n      } else {\n        setSegmentationData(null);\n        setGroupingData(null);\n      }\n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n      setSegmentationData(null);\n      setGroupingData(null);\n    }\n  }, [data, pipeline]);\n  const toggleStepActive = stepId => {\n    setPipeline(pipeline.map(step => step.id === stepId ? {\n      ...step,\n      active: !step.active\n    } : step));\n  };\n  const selectStep = stepId => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = delimitersInput => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'delimiter-separation') {\n        // If input is a string, convert to delimiter objects\n        if (typeof delimitersInput === 'string') {\n          const delimiters = delimitersInput.split('').map((char, idx) => ({\n            value: char,\n            enabled: true,\n            order: idx + 1\n          }));\n          return {\n            ...step,\n            config: {\n              ...step.config,\n              delimiters\n            }\n          };\n        }\n\n        // Input is already an array of delimiter objects\n        return {\n          ...step,\n          config: {\n            ...step.config,\n            delimiters: delimitersInput\n          }\n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update substring segmentation configuration\n  const updateSegmentationConfig = configUpdate => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'substring-segmentation') {\n        return {\n          ...step,\n          config: {\n            ...step.config,\n            ...configUpdate\n          }\n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update segmentation grouping configuration\n  const updateGroupingConfig = configUpdate => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'segmentation-grouping') {\n        return {\n          ...step,\n          config: {\n            ...step.config,\n            ...configUpdate\n          }\n        };\n      }\n      return step;\n    }));\n  };\n\n  // Toggle number replacement feature\n  const toggleNumberReplacement = () => {\n    const groupStep = pipeline.find(step => step.id === 'segmentation-grouping');\n    if (groupStep) {\n      updateGroupingConfig({\n        replaceNumbers: !groupStep.config.replaceNumbers\n      });\n    }\n  };\n\n  // Add a new empty group to the grouping step\n  const addEmptyGroup = () => {\n    const groupStep = pipeline.find(step => step.id === 'segmentation-grouping');\n    if (groupStep) {\n      const newGroup = {\n        id: `group-${Date.now()}`,\n        name: `Group ${groupStep.config.groups.length + 1}`,\n        items: []\n      };\n      updateGroupingConfig({\n        groups: [...groupStep.config.groups, newGroup]\n      });\n    }\n  };\n\n  // Update a group's name\n  const updateGroupName = (groupId, newName) => {\n    const groupStep = pipeline.find(step => step.id === 'segmentation-grouping');\n    if (groupStep) {\n      const updatedGroups = groupStep.config.groups.map(group => group.id === groupId ? {\n        ...group,\n        name: newName\n      } : group);\n      updateGroupingConfig({\n        groups: updatedGroups\n      });\n    }\n  };\n\n  // Prepare pipeline steps with callbacks\n  const preparedPipeline = pipeline.map(step => {\n    if (step.id === 'delimiter-separation') {\n      return {\n        ...step,\n        onUpdateDelimiters: updateDelimiters\n      };\n    } else if (step.id === 'substring-segmentation') {\n      return {\n        ...step,\n        onUpdateConfig: updateSegmentationConfig\n      };\n    } else if (step.id === 'segmentation-grouping') {\n      return {\n        ...step,\n        onUpdateConfig: updateGroupingConfig,\n        onAddGroup: addEmptyGroup,\n        onUpdateGroupName: updateGroupName,\n        onToggleNumberReplacement: toggleNumberReplacement\n      };\n    }\n    return step;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"separation-classifier\",\n    style: {\n      height: '100vh',\n      overflow: 'hidden',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"classifier-layout\",\n      style: {\n        display: 'flex',\n        flex: 1,\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-view\",\n        style: {\n          flex: 1,\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n          minHeight: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            flexShrink: 0\n          },\n          children: \"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130 (\\uD68C\\uC0C9: \\uBBF8\\uCC98\\uB9AC \\uC601\\uC5ED)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-content\",\n          style: {\n            flex: 1,\n            overflow: 'auto',\n            minHeight: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(DataDisplay, {\n            processedData: processedData,\n            flattenData: flattenData,\n            segmentationData: segmentationData,\n            groupingData: groupingData ? {\n              ...groupingData,\n              onAddGroup: addEmptyGroup,\n              onUpdateGroupName: updateGroupName\n            } : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pipeline-panel\",\n        style: {\n          width: '300px',\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column',\n          minHeight: 0\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          style: {\n            flexShrink: 0\n          },\n          children: \"\\uD30C\\uC774\\uD504\\uB77C\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-list\",\n          style: {\n            flex: 1,\n            overflow: 'auto',\n            minHeight: 0\n          },\n          children: [preparedPipeline.map((step, index) => /*#__PURE__*/_jsxDEV(PipelineStep, {\n            step: step,\n            index: index,\n            isSelected: selectedStep === step.id,\n            onSelect: selectStep,\n            onToggle: toggleStepActive\n          }, step.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-step\",\n            children: \"+ \\uCC98\\uB9AC \\uB2E8\\uACC4 \\uCD94\\uAC00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-actions\",\n          style: {\n            flexShrink: 0\n          },\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: onReset,\n            children: \"\\uCD08\\uAE30\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n_s(SeparationClassifier, \"ErwVXuHbIpR0HGKJlygmAK6mz28=\");\n_c = SeparationClassifier;\nexport default SeparationClassifier;\nvar _c;\n$RefreshReg$(_c, \"SeparationClassifier\");","map":{"version":3,"names":["React","useState","useEffect","PipelineStep","DataDisplay","processBracketSeparation","processDelimiterSeparation","processSubstringSegmentation","processSegmentationGrouping","flattenData","jsxDEV","_jsxDEV","SeparationClassifier","data","onReset","_s","_pipeline$find","processedData","setProcessedData","segmentationData","setSegmentationData","groupingData","setGroupingData","pipeline","setPipeline","id","name","active","config","delimiters","value","enabled","order","minSubstringLength","minOccurrence","groups","replaceNumbers","selectedStep","setSelectedStep","isSubstringSegmentationActive","find","step","cleanedData","isDuplicated","input","halfLength","Math","floor","length","i","substring","cleanData","Array","isArray","map","result","key","Object","values","some","val","forEach","segmentationStep","segmentResult","groupingStep","groupingResult","toggleStepActive","stepId","selectStep","updateDelimiters","delimitersInput","split","char","idx","updateSegmentationConfig","configUpdate","updateGroupingConfig","toggleNumberReplacement","groupStep","addEmptyGroup","newGroup","Date","now","items","updateGroupName","groupId","newName","updatedGroups","group","preparedPipeline","onUpdateDelimiters","onUpdateConfig","onAddGroup","onUpdateGroupName","onToggleNumberReplacement","className","style","height","overflow","display","flexDirection","children","flex","minHeight","flexShrink","fileName","_jsxFileName","lineNumber","columnNumber","width","index","isSelected","onSelect","onToggle","onClick","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PipelineStep from './PipelineStep';\nimport DataDisplay from './DataDisplay';\nimport { processBracketSeparation, processDelimiterSeparation, processSubstringSegmentation, processSegmentationGrouping, flattenData } from './dataProcessors';\nimport './SeparationClassifier.css';\n\nconst SeparationClassifier = ({ data, onReset }) => {\n  const [processedData, setProcessedData] = useState(null);\n  const [segmentationData, setSegmentationData] = useState(null);\n  const [groupingData, setGroupingData] = useState(null);\n  const [pipeline, setPipeline] = useState([\n    { id: 'bracket-separation', name: '괄호값 분리', active: true },\n    { \n      id: 'delimiter-separation', \n      name: '구분자 분리', \n      active: true,\n      config: {\n        delimiters: [\n          { value: ',', enabled: true, order: 1 },\n          { value: ' ', enabled: true, order: 2 }\n        ]\n      }\n    },\n    {\n      id: 'substring-segmentation',\n      name: '상호부분문자열 분절',\n      active: true,\n      config: {\n        minSubstringLength: 2,\n        minOccurrence: 2\n      }\n    },\n    {\n      id: 'segmentation-grouping',\n      name: '분절값 그룹핑',\n      active: true,\n      config: {\n        groups: [],\n        replaceNumbers: false\n      }\n    }\n  ]);\n  const [selectedStep, setSelectedStep] = useState('delimiter-separation');\n  \n  // Check if substring segmentation is active\n  const isSubstringSegmentationActive = pipeline.find(step => step.id === 'substring-segmentation')?.active || false;\n  \n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Clean up duplicated data before processing\n      let cleanedData = { ...data };\n      \n      // Check if data is already a processed result with duplicate content\n      const isDuplicated = (input) => {\n        if (typeof input === 'string') {\n          const halfLength = Math.floor(input.length / 2);\n          for (let i = 1; i <= halfLength; i++) {\n            if (input.substring(0, i) === input.substring(i, i * 2)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n\n      // Clean up data if it's duplicated\n      const cleanData = (input) => {\n        if (typeof input === 'string' && isDuplicated(input)) {\n          // Try to find a reasonable split point\n          const halfLength = Math.floor(input.length / 2);\n          return input.substring(0, halfLength);\n        } else if (Array.isArray(input)) {\n          return input.map(cleanData);\n        } else if (typeof input === 'object' && input !== null) {\n          const result = {};\n          for (const key in input) {\n            result[key] = cleanData(input[key]);\n          }\n          return result;\n        }\n        return input;\n      };\n      \n      // Only clean if it appears to be duplicated\n      if (Object.values(cleanedData).some(val => \n        typeof val === 'string' && isDuplicated(val)\n      )) {\n        cleanedData = cleanData(cleanedData);\n      }\n      \n      // Process data through pipeline steps\n      let result = { ...cleanedData };\n      \n      // Process bracket and delimiter steps\n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n        }\n      });\n      \n      // Process substring segmentation separately if active\n      const segmentationStep = pipeline.find(step => step.id === 'substring-segmentation');\n      if (segmentationStep && segmentationStep.active) {\n        const segmentResult = processSubstringSegmentation(result, segmentationStep.config);\n        setSegmentationData(segmentResult);\n        \n        // Process segmentation grouping if active\n        const groupingStep = pipeline.find(step => step.id === 'segmentation-grouping');\n        if (groupingStep && groupingStep.active) {\n          const groupingResult = processSegmentationGrouping(segmentResult, groupingStep.config);\n          setGroupingData(groupingResult);\n        } else {\n          setGroupingData(null);\n        }\n      } else {\n        setSegmentationData(null);\n        setGroupingData(null);\n      }\n      \n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n      setSegmentationData(null);\n      setGroupingData(null);\n    }\n  }, [data, pipeline]);\n\n  const toggleStepActive = (stepId) => {\n    setPipeline(pipeline.map(step => \n      step.id === stepId ? { ...step, active: !step.active } : step\n    ));\n  };\n\n  const selectStep = (stepId) => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = (delimitersInput) => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'delimiter-separation') {\n        // If input is a string, convert to delimiter objects\n        if (typeof delimitersInput === 'string') {\n          const delimiters = delimitersInput.split('').map((char, idx) => ({\n            value: char,\n            enabled: true,\n            order: idx + 1\n          }));\n          \n          return { \n            ...step, \n            config: { \n              ...step.config, \n              delimiters\n            } \n          };\n        }\n        \n        // Input is already an array of delimiter objects\n        return { \n          ...step, \n          config: { \n            ...step.config, \n            delimiters: delimitersInput\n          } \n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update substring segmentation configuration\n  const updateSegmentationConfig = (configUpdate) => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'substring-segmentation') {\n        return { \n          ...step, \n          config: { \n            ...step.config, \n            ...configUpdate \n          } \n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update segmentation grouping configuration\n  const updateGroupingConfig = (configUpdate) => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'segmentation-grouping') {\n        return { \n          ...step, \n          config: { \n            ...step.config, \n            ...configUpdate \n          } \n        };\n      }\n      return step;\n    }));\n  };\n\n  // Toggle number replacement feature\n  const toggleNumberReplacement = () => {\n    const groupStep = pipeline.find(step => step.id === 'segmentation-grouping');\n    if (groupStep) {\n      updateGroupingConfig({\n        replaceNumbers: !groupStep.config.replaceNumbers\n      });\n    }\n  };\n\n  // Add a new empty group to the grouping step\n  const addEmptyGroup = () => {\n    const groupStep = pipeline.find(step => step.id === 'segmentation-grouping');\n    if (groupStep) {\n      const newGroup = {\n        id: `group-${Date.now()}`,\n        name: `Group ${groupStep.config.groups.length + 1}`,\n        items: []\n      };\n      \n      updateGroupingConfig({\n        groups: [...groupStep.config.groups, newGroup]\n      });\n    }\n  };\n\n  // Update a group's name\n  const updateGroupName = (groupId, newName) => {\n    const groupStep = pipeline.find(step => step.id === 'segmentation-grouping');\n    if (groupStep) {\n      const updatedGroups = groupStep.config.groups.map(group => \n        group.id === groupId ? { ...group, name: newName } : group\n      );\n      \n      updateGroupingConfig({ groups: updatedGroups });\n    }\n  };\n\n  // Prepare pipeline steps with callbacks\n  const preparedPipeline = pipeline.map(step => {\n    if (step.id === 'delimiter-separation') {\n      return {\n        ...step,\n        onUpdateDelimiters: updateDelimiters\n      };\n    } else if (step.id === 'substring-segmentation') {\n      return {\n        ...step,\n        onUpdateConfig: updateSegmentationConfig\n      };\n    } else if (step.id === 'segmentation-grouping') {\n      return {\n        ...step,\n        onUpdateConfig: updateGroupingConfig,\n        onAddGroup: addEmptyGroup,\n        onUpdateGroupName: updateGroupName,\n        onToggleNumberReplacement: toggleNumberReplacement\n      };\n    }\n    return step;\n  });\n\n  return (\n    <div className=\"separation-classifier\" style={{ height: '100vh', overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n      <div className=\"classifier-layout\" style={{ display: 'flex', flex: 1, overflow: 'hidden' }}>\n        {/* Data View */}\n        <div className=\"data-view\" style={{ flex: 1, overflow: 'hidden', display: 'flex', flexDirection: 'column', minHeight: 0 }}>\n          <h3 style={{ flexShrink: 0 }}>처리된 데이터 (회색: 미처리 영역)</h3>\n          <div className=\"data-content\" style={{ flex: 1, overflow: 'auto', minHeight: 0 }}>\n            <DataDisplay \n              processedData={processedData} \n              flattenData={flattenData}\n              segmentationData={segmentationData}\n              groupingData={groupingData ? {\n                ...groupingData,\n                onAddGroup: addEmptyGroup,\n                onUpdateGroupName: updateGroupName\n              } : null}\n            />\n          </div>\n        </div>\n        \n        {/* Right side - Pipeline */}\n        <div className=\"pipeline-panel\" style={{ width: '300px', overflow: 'hidden', display: 'flex', flexDirection: 'column', minHeight: 0 }}>\n          <h3 style={{ flexShrink: 0 }}>파이프라인</h3>\n          <div className=\"pipeline-list\" style={{ flex: 1, overflow: 'auto', minHeight: 0 }}>\n            {preparedPipeline.map((step, index) => (\n              <PipelineStep \n                key={step.id}\n                step={step}\n                index={index}\n                isSelected={selectedStep === step.id}\n                onSelect={selectStep}\n                onToggle={toggleStepActive}\n              />\n            ))}\n            \n            <button className=\"add-step\">\n              + 처리 단계 추가\n            </button>\n          </div>\n          \n          <div className=\"pipeline-actions\" style={{ flexShrink: 0 }}>\n            <button className=\"reset-button\" onClick={onReset}>\n              초기화\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SeparationClassifier; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}