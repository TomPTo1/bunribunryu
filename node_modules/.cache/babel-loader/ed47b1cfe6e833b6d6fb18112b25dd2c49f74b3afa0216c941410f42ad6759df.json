{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/WorkspaceColumn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './WorkspaceColumn.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WorkspaceColumn = ({\n  selectedFile,\n  fileContent\n}) => {\n  _s();\n  const [selectedTab, setSelectedTab] = useState('view');\n  const [content, setContent] = useState('');\n  const [tableData, setTableData] = useState({\n    headers: [],\n    rows: []\n  });\n  const [originalTableData, setOriginalTableData] = useState(null);\n  useEffect(() => {\n    // Reset content when file changes\n    if (selectedFile) {\n      if (selectedFile.type === 'xlsx_header') {\n        // Handle XLSX header selection\n        const {\n          sheetData,\n          headerIndex\n        } = selectedFile;\n\n        // Extract the column data for this header\n        const headerName = sheetData.headers[headerIndex];\n        const columnData = sheetData.rows.map(row => row[headerIndex]);\n\n        // Set the table data for display\n        const newTableData = {\n          headers: [headerName],\n          rows: columnData.map(value => [value])\n        };\n        setTableData(newTableData);\n        setOriginalTableData({\n          ...newTableData\n        });\n\n        // Switch to view tab\n        setSelectedTab('view');\n\n        // Set content to empty to use table view instead\n        setContent('');\n      } else if (selectedFile.type === 'file') {\n        // Regular file selected, show file info\n        setContent(JSON.stringify({\n          fileName: selectedFile.name,\n          path: selectedFile.path,\n          type: selectedFile.type\n        }, null, 2));\n\n        // Clear table data\n        setTableData({\n          headers: [],\n          rows: []\n        });\n        setOriginalTableData(null);\n      } else if (selectedFile.type === 'xlsx_sheet') {\n        // Sheet selected, show all data from the sheet\n        const {\n          sheetData\n        } = selectedFile;\n        const newTableData = {\n          headers: sheetData.headers,\n          rows: sheetData.rows\n        };\n        setTableData(newTableData);\n        setOriginalTableData({\n          ...newTableData\n        });\n\n        // Switch to view tab\n        setSelectedTab('view');\n\n        // Set content to empty to use table view instead\n        setContent('');\n      }\n    } else {\n      // No file selected\n      setContent(JSON.stringify({\n        message: \"No file selected\",\n        instruction: \"Select a file or header from the file explorer\"\n      }, null, 2));\n\n      // Clear table data\n      setTableData({\n        headers: [],\n        rows: []\n      });\n      setOriginalTableData(null);\n    }\n  }, [selectedFile]);\n  const handleTabChange = tab => {\n    setSelectedTab(tab);\n  };\n\n  // 분리분류 기능 처리 함수\n  const handleSeparationMagic = () => {\n    if (!tableData.headers.length || !tableData.rows.length) return;\n\n    // 원본 데이터가 있는 경우 활용 (리셋 가능하도록)\n    const dataToProcess = originalTableData ? [...originalTableData.rows] : [...tableData.rows];\n\n    // 중복 제거를 위한 Set 객체들\n    const bracketSet = new Set();\n    const valueSet = new Set();\n\n    // 각 행 처리\n    dataToProcess.forEach(row => {\n      const cellValue = row[0];\n\n      // null, undefined, 빈 문자열 등 건너뛰기\n      if (cellValue === null || cellValue === undefined || String(cellValue).trim() === '') {\n        return;\n      }\n      const cellValueStr = String(cellValue);\n\n      // 1. 괄호 내용 처리 - 다양한 괄호 유형 처리 (소괄호, 대괄호, 중괄호)\n      const bracketContentRegex = /\\(([^)]*)\\)|\\[([^\\]]*)\\]|\\{([^}]*)\\}/g;\n      let textWithoutBrackets = cellValueStr.replace(bracketContentRegex, (match, p1, p2, p3) => {\n        const content = p1 || p2 || p3; // 괄호 종류에 따라 p1, p2, p3 중 하나에 값이 있음\n        if (content && content.trim()) {\n          // 중복 제거를 위해 Set에 추가\n          bracketSet.add(content.trim());\n        }\n        return ' '; // 괄호와 내용을 공백으로 대체\n      });\n\n      // 2. 공백과 쉼표로 분리\n      const separatedValues = textWithoutBrackets.split(/[\\s,]+/) // 공백과 쉼표로 분리\n      .map(value => value.trim()).filter(value => value.length > 0); // 빈 문자열 제거\n\n      // 중복 제거를 위해 Set에 추가\n      separatedValues.forEach(value => {\n        if (value && value.trim()) {\n          valueSet.add(value.trim());\n        }\n      });\n    });\n\n    // 결과 값 배열 생성 (중복 제거된 값들)\n    let bracketValues = Array.from(bracketSet).map(val => `[괄호] ${val}`);\n    let normalValues = Array.from(valueSet);\n\n    // 결과가 없으면 \"분리된 값이 없습니다\" 표시\n    if (bracketValues.length === 0 && normalValues.length === 0) {\n      setTableData({\n        headers: [\"Group\", \"Token\"],\n        rows: [[\"\", \"분리된 값이 없습니다\"]]\n      });\n      return;\n    }\n\n    // 문자열 뒤집기 함수\n    const reverseString = str => str.split('').reverse().join('');\n\n    // 모든 최소 토큰 배열\n    const allMinTokens = [...bracketValues, ...normalValues];\n\n    // 3. 부분문자열 기반 아이템셋 마이닝 (공통 부분 문자열 추출)\n    // 자주 등장하는 부분 문자열 찾기\n    const findCommonSubstrings = (tokens, minLength = 2, minCount = 2) => {\n      // 부분 문자열 빈도 카운트\n      const substringFreq = {};\n\n      // 모든 가능한 부분 문자열 추출 및 카운트\n      tokens.forEach(token => {\n        // 괄호 태그 제거\n        const cleanToken = token.replace('[괄호] ', '');\n        for (let len = minLength; len <= cleanToken.length; len++) {\n          for (let i = 0; i <= cleanToken.length - len; i++) {\n            const substr = cleanToken.substring(i, i + len);\n            if (!substringFreq[substr]) {\n              substringFreq[substr] = {\n                count: 1,\n                tokens: [token]\n              };\n            } else if (!substringFreq[substr].tokens.includes(token)) {\n              substringFreq[substr].count++;\n              substringFreq[substr].tokens.push(token);\n            }\n          }\n        }\n      });\n\n      // 빈도에 따라 필터링 및 정렬\n      const commonSubstrings = Object.entries(substringFreq).filter(([substr, data]) => data.count >= minCount).sort((a, b) => {\n        // 1. 토큰 수 내림차순\n        const countDiff = b[1].count - a[1].count;\n        if (countDiff !== 0) return countDiff;\n\n        // 2. 길이 내림차순\n        const lengthDiff = b[0].length - a[0].length;\n        if (lengthDiff !== 0) return lengthDiff;\n\n        // 3. 알파벳 순서\n        return a[0].localeCompare(b[0]);\n      }).map(([substr, data]) => ({\n        substring: substr,\n        count: data.count,\n        tokens: data.tokens,\n        percentCoverage: data.tokens.length / tokens.length * 100\n      }));\n      return commonSubstrings;\n    };\n\n    // 최소 토큰에서 공통 부분 문자열 추출\n    const commonSubstrings = findCommonSubstrings(allMinTokens, 2, 2);\n\n    // 중복 제거와 커버리지 최적화를 위한 그리디 알고리즘\n    const selectOptimalSubstrings = (substrings, tokens) => {\n      // 커버리지가 좋은 순서로 정렬\n      const sortedSubstrings = [...substrings].sort((a, b) => {\n        // 토큰수 * 길이로 점수 계산 (더 많은 토큰을 커버하고 더 긴 부분문자열 우선)\n        const scoreA = a.count * a.substring.length;\n        const scoreB = b.count * b.substring.length;\n        return scoreB - scoreA;\n      });\n      const selectedSubstrings = [];\n      const coveredTokens = new Set();\n\n      // 그리디 선택\n      for (const substr of sortedSubstrings) {\n        // 새로운 토큰을 커버하는지 확인\n        const newCoverage = substr.tokens.some(token => !coveredTokens.has(token));\n\n        // 새 토큰을 커버하거나 중요 서브스트링인 경우만 선택\n        if (newCoverage || substr.count >= 3 && substr.substring.length >= 3) {\n          selectedSubstrings.push(substr);\n\n          // 커버된 토큰 업데이트\n          substr.tokens.forEach(token => coveredTokens.add(token));\n        }\n\n        // 최대 15개 그룹으로 제한\n        if (selectedSubstrings.length >= 15) break;\n      }\n      return selectedSubstrings;\n    };\n\n    // 최적의 부분 문자열 선택\n    const optimalSubstrings = selectOptimalSubstrings(commonSubstrings, allMinTokens);\n\n    // 4. 덴드로그램 스타일의 데이터 구조 구성\n    // 각 토큰이 어떤 그룹에 속하는지 매핑\n    const tokenToGroupMap = {};\n    allMinTokens.forEach(token => {\n      const cleanToken = token.replace('[괄호] ', '');\n      tokenToGroupMap[token] = optimalSubstrings.filter(group => {\n        const isBracketContent = token.startsWith('[괄호]');\n        // 괄호 콘텐츠에 대해 정확히 일치하는 그룹만 허용\n        if (isBracketContent) {\n          return group.tokens.includes(token);\n        }\n        // 일반 토큰에 대해 부분 문자열 포함 여부 확인\n        return cleanToken.includes(group.substring);\n      }).map(group => group.substring);\n    });\n\n    // 테이블 행 구성\n    const finalRows = [];\n\n    // 그룹 헤더 행 추가 (부분 문자열 그룹)\n    optimalSubstrings.forEach(group => {\n      finalRows.push([`📊 Group (${group.count}): ${group.substring}`, \"\"]);\n\n      // 이 그룹에 속한 모든 토큰 추가\n      const groupTokens = group.tokens.sort((a, b) => {\n        // 괄호 콘텐츠 먼저, 그 다음 알파벳 순\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        return a.localeCompare(b);\n      });\n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n\n      // 그룹 간 구분을 위한 빈 행\n      finalRows.push([\"\", \"\"]);\n    });\n\n    // 그룹에 속하지 않은 토큰 처리\n    const ungroupedTokens = allMinTokens.filter(token => {\n      return !optimalSubstrings.some(group => group.tokens.includes(token));\n    }).sort();\n    if (ungroupedTokens.length > 0) {\n      finalRows.push([\"📌 Ungrouped Tokens\", \"\"]);\n      ungroupedTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n    }\n\n    // 테이블 데이터 업데이트\n    setTableData({\n      headers: [\"Group\", \"Token\"],\n      rows: finalRows\n    });\n  };\n\n  // 원본 데이터로 복원하는 함수\n  const resetToOriginal = () => {\n    if (originalTableData) {\n      setTableData({\n        ...originalTableData\n      });\n    }\n  };\n  const renderTable = () => {\n    if (!tableData.headers.length) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name, \" - Data View\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tableData.headers.map((header, idx) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.rows.map((row, rowIdx) => {\n            // 그룹 행 스타일링\n            const isGroupHeader = String(row[0]).startsWith('📊') || String(row[0]).startsWith('📌');\n            const isGroupItem = String(row[0]).startsWith('└─');\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: `${isGroupHeader ? 'group-header' : ''} ${isGroupItem ? 'group-item' : ''}`,\n              children: row.map((cell, cellIdx) => {\n                // 괄호 내용 여부 확인\n                const isBracketContent = String(cell).startsWith('[괄호]');\n                let displayContent = cell;\n\n                // 괄호 내용인 경우 특별 처리\n                if (isBracketContent) {\n                  displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"bracket-indicator\",\n                      children: \"\\u2282\\u2283\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 356,\n                      columnNumber: 27\n                    }, this), String(cell).replace('[괄호] ', '')]\n                  }, void 0, true);\n                }\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `\n                          ${isGroupHeader && cellIdx === 0 ? 'group-header-cell' : ''} \n                          ${isGroupItem && cellIdx === 0 ? 'group-connector-cell' : ''}\n                          ${isBracketContent ? 'bracket-content-cell' : ''}\n                        `,\n                  children: displayContent\n                }, cellIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 363,\n                  columnNumber: 23\n                }, this);\n              })\n            }, rowIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column workspace-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'view' ? 'active' : ''}`,\n          onClick: () => handleTabChange('view'),\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'split' ? 'active' : ''}`,\n          onClick: () => handleTabChange('split'),\n          children: \"Split\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'segment' ? 'active' : ''}`,\n          onClick: () => handleTabChange('segment'),\n          children: \"Segment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'classify' ? 'active' : ''}`,\n          onClick: () => handleTabChange('classify'),\n          children: \"Classify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions\",\n        children: [tableData.headers.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button magic-button\",\n            title: \"\\uBD84\\uB9AC\\uBD84\\uB958 \\uB9C8\\uBC95 - \\uAD04\\uD638 \\uB0B4\\uC6A9 \\uBD84\\uB9AC \\uBC0F \\uACF5\\uBC31/\\uC27C\\uD45C \\uAE30\\uC900 \\uBD84\\uB9AC\",\n            onClick: handleSeparationMagic,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2728\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 416,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button reset-button\",\n            title: \"\\uC6D0\\uBCF8 \\uB370\\uC774\\uD130\\uB85C \\uBCF5\\uC6D0\",\n            onClick: resetToOriginal,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83D\\uDD04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 423,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u2699\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83D\\uDCBE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: [selectedTab === 'view' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-mode\",\n        children: tableData.headers.length > 0 ? renderTable() : /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"json-viewer\",\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 11\n      }, this), selectedTab === 'split' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"split-mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Split Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"split-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Split by:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Key\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 460,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Array elements\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 461,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 458,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Target path:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"/properties/items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-button\",\n            children: \"Apply Split\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-content\",\n            children: \"Split preview will appear here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 11\n      }, this), selectedTab === 'segment' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"segment-mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Segmentation Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Configure how to segment your data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Segment method:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 483,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"By structure\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"By semantic content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"By size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-button\",\n            children: \"Apply Segmentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 490,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 11\n      }, this), selectedTab === 'classify' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"classify-mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Classification Tools\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Classify data based on rules or patterns\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"classify-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Classification type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Type detection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Pattern matching\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Semantic grouping\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 502,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-button\",\n            children: \"Run Classification\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 441,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 385,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkspaceColumn, \"uKlQxB0JcLKh26/M4onERXj6+yY=\");\n_c = WorkspaceColumn;\nexport default WorkspaceColumn;\nvar _c;\n$RefreshReg$(_c, \"WorkspaceColumn\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","WorkspaceColumn","selectedFile","fileContent","_s","selectedTab","setSelectedTab","content","setContent","tableData","setTableData","headers","rows","originalTableData","setOriginalTableData","type","sheetData","headerIndex","headerName","columnData","map","row","newTableData","value","JSON","stringify","fileName","name","path","message","instruction","handleTabChange","tab","handleSeparationMagic","length","dataToProcess","bracketSet","Set","valueSet","forEach","cellValue","undefined","String","trim","cellValueStr","bracketContentRegex","textWithoutBrackets","replace","match","p1","p2","p3","add","separatedValues","split","filter","bracketValues","Array","from","val","normalValues","reverseString","str","reverse","join","allMinTokens","findCommonSubstrings","tokens","minLength","minCount","substringFreq","token","cleanToken","len","i","substr","substring","count","includes","push","commonSubstrings","Object","entries","data","sort","a","b","countDiff","lengthDiff","localeCompare","percentCoverage","selectOptimalSubstrings","substrings","sortedSubstrings","scoreA","scoreB","selectedSubstrings","coveredTokens","newCoverage","some","has","optimalSubstrings","tokenToGroupMap","group","isBracketContent","startsWith","finalRows","groupTokens","aIsBracket","bIsBracket","ungroupedTokens","resetToOriginal","renderTable","className","children","_jsxFileName","lineNumber","columnNumber","header","idx","rowIdx","isGroupHeader","isGroupItem","cell","cellIdx","displayContent","onClick","title","placeholder","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/WorkspaceColumn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './WorkspaceColumn.css';\n\nconst WorkspaceColumn = ({ selectedFile, fileContent }) => {\n  const [selectedTab, setSelectedTab] = useState('view');\n  const [content, setContent] = useState('');\n  const [tableData, setTableData] = useState({\n    headers: [],\n    rows: []\n  });\n  const [originalTableData, setOriginalTableData] = useState(null);\n\n  useEffect(() => {\n    // Reset content when file changes\n    if (selectedFile) {\n      if (selectedFile.type === 'xlsx_header') {\n        // Handle XLSX header selection\n        const { sheetData, headerIndex } = selectedFile;\n        \n        // Extract the column data for this header\n        const headerName = sheetData.headers[headerIndex];\n        const columnData = sheetData.rows.map(row => row[headerIndex]);\n        \n        // Set the table data for display\n        const newTableData = {\n          headers: [headerName],\n          rows: columnData.map(value => [value])\n        };\n        \n        setTableData(newTableData);\n        setOriginalTableData({...newTableData});\n        \n        // Switch to view tab\n        setSelectedTab('view');\n        \n        // Set content to empty to use table view instead\n        setContent('');\n      } else if (selectedFile.type === 'file') {\n        // Regular file selected, show file info\n        setContent(JSON.stringify({\n          fileName: selectedFile.name,\n          path: selectedFile.path,\n          type: selectedFile.type\n        }, null, 2));\n        \n        // Clear table data\n        setTableData({\n          headers: [],\n          rows: []\n        });\n        setOriginalTableData(null);\n      } else if (selectedFile.type === 'xlsx_sheet') {\n        // Sheet selected, show all data from the sheet\n        const { sheetData } = selectedFile;\n        \n        const newTableData = {\n          headers: sheetData.headers,\n          rows: sheetData.rows\n        };\n        \n        setTableData(newTableData);\n        setOriginalTableData({...newTableData});\n        \n        // Switch to view tab\n        setSelectedTab('view');\n        \n        // Set content to empty to use table view instead\n        setContent('');\n      }\n    } else {\n      // No file selected\n      setContent(JSON.stringify({\n        message: \"No file selected\",\n        instruction: \"Select a file or header from the file explorer\"\n      }, null, 2));\n      \n      // Clear table data\n      setTableData({\n        headers: [],\n        rows: []\n      });\n      setOriginalTableData(null);\n    }\n  }, [selectedFile]);\n\n  const handleTabChange = (tab) => {\n    setSelectedTab(tab);\n  };\n\n  // 분리분류 기능 처리 함수\n  const handleSeparationMagic = () => {\n    if (!tableData.headers.length || !tableData.rows.length) return;\n    \n    // 원본 데이터가 있는 경우 활용 (리셋 가능하도록)\n    const dataToProcess = originalTableData ? [...originalTableData.rows] : [...tableData.rows];\n    \n    // 중복 제거를 위한 Set 객체들\n    const bracketSet = new Set();\n    const valueSet = new Set();\n    \n    // 각 행 처리\n    dataToProcess.forEach(row => {\n      const cellValue = row[0];\n      \n      // null, undefined, 빈 문자열 등 건너뛰기\n      if (cellValue === null || cellValue === undefined || String(cellValue).trim() === '') {\n        return;\n      }\n      \n      const cellValueStr = String(cellValue);\n      \n      // 1. 괄호 내용 처리 - 다양한 괄호 유형 처리 (소괄호, 대괄호, 중괄호)\n      const bracketContentRegex = /\\(([^)]*)\\)|\\[([^\\]]*)\\]|\\{([^}]*)\\}/g;\n      let textWithoutBrackets = cellValueStr.replace(bracketContentRegex, (match, p1, p2, p3) => {\n        const content = p1 || p2 || p3; // 괄호 종류에 따라 p1, p2, p3 중 하나에 값이 있음\n        if (content && content.trim()) {\n          // 중복 제거를 위해 Set에 추가\n          bracketSet.add(content.trim());\n        }\n        return ' '; // 괄호와 내용을 공백으로 대체\n      });\n      \n      // 2. 공백과 쉼표로 분리\n      const separatedValues = textWithoutBrackets\n        .split(/[\\s,]+/) // 공백과 쉼표로 분리\n        .map(value => value.trim())\n        .filter(value => value.length > 0); // 빈 문자열 제거\n      \n      // 중복 제거를 위해 Set에 추가\n      separatedValues.forEach(value => {\n        if (value && value.trim()) {\n          valueSet.add(value.trim());\n        }\n      });\n    });\n    \n    // 결과 값 배열 생성 (중복 제거된 값들)\n    let bracketValues = Array.from(bracketSet).map(val => `[괄호] ${val}`);\n    let normalValues = Array.from(valueSet);\n    \n    // 결과가 없으면 \"분리된 값이 없습니다\" 표시\n    if (bracketValues.length === 0 && normalValues.length === 0) {\n      setTableData({\n        headers: [\"Group\", \"Token\"],\n        rows: [[\"\", \"분리된 값이 없습니다\"]]\n      });\n      return;\n    }\n    \n    // 문자열 뒤집기 함수\n    const reverseString = str => str.split('').reverse().join('');\n    \n    // 모든 최소 토큰 배열\n    const allMinTokens = [...bracketValues, ...normalValues];\n    \n    // 3. 부분문자열 기반 아이템셋 마이닝 (공통 부분 문자열 추출)\n    // 자주 등장하는 부분 문자열 찾기\n    const findCommonSubstrings = (tokens, minLength = 2, minCount = 2) => {\n      // 부분 문자열 빈도 카운트\n      const substringFreq = {};\n      \n      // 모든 가능한 부분 문자열 추출 및 카운트\n      tokens.forEach(token => {\n        // 괄호 태그 제거\n        const cleanToken = token.replace('[괄호] ', '');\n        \n        for (let len = minLength; len <= cleanToken.length; len++) {\n          for (let i = 0; i <= cleanToken.length - len; i++) {\n            const substr = cleanToken.substring(i, i + len);\n            if (!substringFreq[substr]) {\n              substringFreq[substr] = { count: 1, tokens: [token] };\n            } else if (!substringFreq[substr].tokens.includes(token)) {\n              substringFreq[substr].count++;\n              substringFreq[substr].tokens.push(token);\n            }\n          }\n        }\n      });\n      \n      // 빈도에 따라 필터링 및 정렬\n      const commonSubstrings = Object.entries(substringFreq)\n        .filter(([substr, data]) => data.count >= minCount)\n        .sort((a, b) => {\n          // 1. 토큰 수 내림차순\n          const countDiff = b[1].count - a[1].count;\n          if (countDiff !== 0) return countDiff;\n          \n          // 2. 길이 내림차순\n          const lengthDiff = b[0].length - a[0].length;\n          if (lengthDiff !== 0) return lengthDiff;\n          \n          // 3. 알파벳 순서\n          return a[0].localeCompare(b[0]);\n        })\n        .map(([substr, data]) => ({\n          substring: substr,\n          count: data.count,\n          tokens: data.tokens,\n          percentCoverage: (data.tokens.length / tokens.length) * 100\n        }));\n      \n      return commonSubstrings;\n    };\n    \n    // 최소 토큰에서 공통 부분 문자열 추출\n    const commonSubstrings = findCommonSubstrings(allMinTokens, 2, 2);\n    \n    // 중복 제거와 커버리지 최적화를 위한 그리디 알고리즘\n    const selectOptimalSubstrings = (substrings, tokens) => {\n      // 커버리지가 좋은 순서로 정렬\n      const sortedSubstrings = [...substrings]\n        .sort((a, b) => {\n          // 토큰수 * 길이로 점수 계산 (더 많은 토큰을 커버하고 더 긴 부분문자열 우선)\n          const scoreA = a.count * a.substring.length;\n          const scoreB = b.count * b.substring.length;\n          return scoreB - scoreA;\n        });\n      \n      const selectedSubstrings = [];\n      const coveredTokens = new Set();\n      \n      // 그리디 선택\n      for (const substr of sortedSubstrings) {\n        // 새로운 토큰을 커버하는지 확인\n        const newCoverage = substr.tokens.some(token => !coveredTokens.has(token));\n        \n        // 새 토큰을 커버하거나 중요 서브스트링인 경우만 선택\n        if (newCoverage || (substr.count >= 3 && substr.substring.length >= 3)) {\n          selectedSubstrings.push(substr);\n          \n          // 커버된 토큰 업데이트\n          substr.tokens.forEach(token => coveredTokens.add(token));\n        }\n        \n        // 최대 15개 그룹으로 제한\n        if (selectedSubstrings.length >= 15) break;\n      }\n      \n      return selectedSubstrings;\n    };\n    \n    // 최적의 부분 문자열 선택\n    const optimalSubstrings = selectOptimalSubstrings(commonSubstrings, allMinTokens);\n    \n    // 4. 덴드로그램 스타일의 데이터 구조 구성\n    // 각 토큰이 어떤 그룹에 속하는지 매핑\n    const tokenToGroupMap = {};\n    \n    allMinTokens.forEach(token => {\n      const cleanToken = token.replace('[괄호] ', '');\n      tokenToGroupMap[token] = optimalSubstrings\n        .filter(group => {\n          const isBracketContent = token.startsWith('[괄호]');\n          // 괄호 콘텐츠에 대해 정확히 일치하는 그룹만 허용\n          if (isBracketContent) {\n            return group.tokens.includes(token);\n          }\n          // 일반 토큰에 대해 부분 문자열 포함 여부 확인\n          return cleanToken.includes(group.substring);\n        })\n        .map(group => group.substring);\n    });\n    \n    // 테이블 행 구성\n    const finalRows = [];\n    \n    // 그룹 헤더 행 추가 (부분 문자열 그룹)\n    optimalSubstrings.forEach(group => {\n      finalRows.push([\n        `📊 Group (${group.count}): ${group.substring}`, \n        \"\"\n      ]);\n      \n      // 이 그룹에 속한 모든 토큰 추가\n      const groupTokens = group.tokens.sort((a, b) => {\n        // 괄호 콘텐츠 먼저, 그 다음 알파벳 순\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        \n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        \n        return a.localeCompare(b);\n      });\n      \n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      \n      // 그룹 간 구분을 위한 빈 행\n      finalRows.push([\"\", \"\"]);\n    });\n    \n    // 그룹에 속하지 않은 토큰 처리\n    const ungroupedTokens = allMinTokens\n      .filter(token => {\n        return !optimalSubstrings.some(group => group.tokens.includes(token));\n      })\n      .sort();\n    \n    if (ungroupedTokens.length > 0) {\n      finalRows.push([\"📌 Ungrouped Tokens\", \"\"]);\n      ungroupedTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n    }\n    \n    // 테이블 데이터 업데이트\n    setTableData({\n      headers: [\"Group\", \"Token\"],\n      rows: finalRows\n    });\n  };\n  \n  // 원본 데이터로 복원하는 함수\n  const resetToOriginal = () => {\n    if (originalTableData) {\n      setTableData({...originalTableData});\n    }\n  };\n\n  const renderTable = () => {\n    if (!tableData.headers.length) return null;\n    \n    return (\n      <div className=\"data-table-container\">\n        <h4>{selectedFile?.name} - Data View</h4>\n        <table className=\"data-table\">\n          <thead>\n            <tr>\n              {tableData.headers.map((header, idx) => (\n                <th key={idx}>{header}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.rows.map((row, rowIdx) => {\n              // 그룹 행 스타일링\n              const isGroupHeader = String(row[0]).startsWith('📊') || String(row[0]).startsWith('📌');\n              const isGroupItem = String(row[0]).startsWith('└─');\n              \n              return (\n                <tr \n                  key={rowIdx} \n                  className={`${isGroupHeader ? 'group-header' : ''} ${isGroupItem ? 'group-item' : ''}`}\n                >\n                  {row.map((cell, cellIdx) => {\n                    // 괄호 내용 여부 확인\n                    const isBracketContent = String(cell).startsWith('[괄호]');\n                    let displayContent = cell;\n                    \n                    // 괄호 내용인 경우 특별 처리\n                    if (isBracketContent) {\n                      displayContent = (\n                        <>\n                          <span className=\"bracket-indicator\">⊂⊃</span>\n                          {String(cell).replace('[괄호] ', '')}\n                        </>\n                      );\n                    }\n                    \n                    return (\n                      <td \n                        key={cellIdx} \n                        className={`\n                          ${isGroupHeader && cellIdx === 0 ? 'group-header-cell' : ''} \n                          ${isGroupItem && cellIdx === 0 ? 'group-connector-cell' : ''}\n                          ${isBracketContent ? 'bracket-content-cell' : ''}\n                        `}\n                      >\n                        {displayContent}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"column workspace-column\">\n      <div className=\"toolbar\">\n        <div className=\"tabs\">\n          <button \n            className={`tab ${selectedTab === 'view' ? 'active' : ''}`} \n            onClick={() => handleTabChange('view')}\n          >\n            View\n          </button>\n          <button \n            className={`tab ${selectedTab === 'split' ? 'active' : ''}`} \n            onClick={() => handleTabChange('split')}\n          >\n            Split\n          </button>\n          <button \n            className={`tab ${selectedTab === 'segment' ? 'active' : ''}`} \n            onClick={() => handleTabChange('segment')}\n          >\n            Segment\n          </button>\n          <button \n            className={`tab ${selectedTab === 'classify' ? 'active' : ''}`} \n            onClick={() => handleTabChange('classify')}\n          >\n            Classify\n          </button>\n        </div>\n        <div className=\"actions\">\n          {tableData.headers.length > 0 && (\n            <>\n              <button \n                className=\"action-button magic-button\" \n                title=\"분리분류 마법 - 괄호 내용 분리 및 공백/쉼표 기준 분리\"\n                onClick={handleSeparationMagic}\n              >\n                <span>✨</span>\n              </button>\n              <button \n                className=\"action-button reset-button\" \n                title=\"원본 데이터로 복원\"\n                onClick={resetToOriginal}\n              >\n                <span>🔄</span>\n              </button>\n            </>\n          )}\n          <button className=\"action-button\">\n            <span>⚙️</span>\n          </button>\n          <button className=\"action-button\">\n            <span>💾</span>\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"content-area\">\n        {selectedTab === 'view' && (\n          <div className=\"view-mode\">\n            {tableData.headers.length > 0 ? (\n              renderTable()\n            ) : (\n              <pre className=\"json-viewer\">{content}</pre>\n            )}\n          </div>\n        )}\n        \n        {selectedTab === 'split' && (\n          <div className=\"split-mode\">\n            <h4>Split Data</h4>\n            <div className=\"split-options\">\n              <div className=\"option\">\n                <label>Split by:</label>\n                <select>\n                  <option>Key</option>\n                  <option>Value</option>\n                  <option>Array elements</option>\n                </select>\n              </div>\n              <div className=\"option\">\n                <label>Target path:</label>\n                <input type=\"text\" placeholder=\"/properties/items\" />\n              </div>\n              <button className=\"apply-button\">Apply Split</button>\n            </div>\n            <div className=\"preview-area\">\n              <h5>Preview</h5>\n              <div className=\"preview-content\">Split preview will appear here</div>\n            </div>\n          </div>\n        )}\n        \n        {selectedTab === 'segment' && (\n          <div className=\"segment-mode\">\n            <h4>Segmentation Options</h4>\n            <p>Configure how to segment your data</p>\n            <div className=\"segment-options\">\n              <div className=\"option\">\n                <label>Segment method:</label>\n                <select>\n                  <option>By structure</option>\n                  <option>By semantic content</option>\n                  <option>By size</option>\n                </select>\n              </div>\n              <button className=\"apply-button\">Apply Segmentation</button>\n            </div>\n          </div>\n        )}\n        \n        {selectedTab === 'classify' && (\n          <div className=\"classify-mode\">\n            <h4>Classification Tools</h4>\n            <p>Classify data based on rules or patterns</p>\n            <div className=\"classify-options\">\n              <div className=\"option\">\n                <label>Classification type:</label>\n                <select>\n                  <option>Type detection</option>\n                  <option>Pattern matching</option>\n                  <option>Semantic grouping</option>\n                </select>\n              </div>\n              <button className=\"apply-button\">Run Classification</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WorkspaceColumn; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}