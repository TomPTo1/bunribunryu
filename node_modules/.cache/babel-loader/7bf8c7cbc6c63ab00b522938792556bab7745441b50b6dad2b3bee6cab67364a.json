{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/ChannelList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchChannels } from '../services/api';\nimport Column from './Column';\nimport './ChannelLevels.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChannelList = ({\n  onChannelSelect,\n  selectedChannel\n}) => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        setLoading(true);\n        const response = await fetchChannels();\n        console.log('API Response:', response);\n        setChannels(response.list || []);\n\n        // Process channel hierarchy\n        processChannelHierarchy(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setChannels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getChannels();\n  }, []);\n\n  // Process channels into hierarchical levels\n  const processChannelHierarchy = channelsList => {\n    // Get all unique channel keys\n    const allChannelKeys = channelsList.map(channel => channel.채널키);\n\n    // Find the maximum depth based on underscore separators\n    let maxDepth = 0;\n    allChannelKeys.forEach(key => {\n      const depth = (key.match(/_/g) || []).length + 1;\n      maxDepth = Math.max(maxDepth, depth);\n    });\n\n    // Initialize levels array\n    const levels = Array(maxDepth).fill().map(() => []);\n\n    // Group channels by level\n    allChannelKeys.forEach(key => {\n      const parts = key.split('_');\n\n      // Add each partial path to its corresponding level\n      for (let i = 0; i < parts.length; i++) {\n        const partialPath = parts.slice(0, i + 1).join('_');\n\n        // Only add if not already in the level\n        if (!levels[i].some(item => item.path === partialPath)) {\n          levels[i].push({\n            name: parts[i],\n            path: partialPath,\n            fullPath: key\n          });\n        }\n      }\n    });\n    setChannelLevels(levels);\n  };\n\n  // Handle level selection\n  const handleLevelSelect = (level, item) => {\n    // Update selected levels up to the clicked level\n    const newSelectedLevels = [...selectedLevels];\n    newSelectedLevels.splice(level, newSelectedLevels.length, item);\n    setSelectedLevels(newSelectedLevels);\n\n    // If selecting the last level, pass the full path to the parent\n    if (level === channelLevels.length - 1) {\n      onChannelSelect(item.fullPath);\n    }\n  };\n\n  // Render a level column\n  const renderLevelColumn = (level, items, selectedItem) => {\n    return /*#__PURE__*/_jsxDEV(Column, {\n      title: `레벨 ${level + 1}`,\n      items: items,\n      onItemClick: item => handleLevelSelect(level, item),\n      renderItem: {\n        display: item => item.name,\n        value: item => item.path\n      },\n      selectedItem: selectedItem,\n      loading: loading && level === 0,\n      error: error && level === 0,\n      emptyMessage: level === 0 ? \"채널 정보가 없습니다.\" : \"\"\n    }, `level-${level}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"channel-levels-container\",\n    children: channelLevels.map((levelItems, level) => {\n      // Filter items based on parent selection\n      let items = levelItems;\n      if (level > 0 && selectedLevels[level - 1]) {\n        const parentPath = selectedLevels[level - 1].path;\n        items = levelItems.filter(item => item.path.startsWith(parentPath + '_') || item.path === parentPath);\n      }\n      return renderLevelColumn(level, items, selectedLevels[level]);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(ChannelList, \"dOqllVwsBoar/9JI9+CNLqxZ0MI=\");\n_c = ChannelList;\nexport default ChannelList;\nvar _c;\n$RefreshReg$(_c, \"ChannelList\");","map":{"version":3,"names":["React","useState","useEffect","fetchChannels","Column","jsxDEV","_jsxDEV","ChannelList","onChannelSelect","selectedChannel","_s","channels","setChannels","loading","setLoading","error","setError","channelLevels","setChannelLevels","selectedLevels","setSelectedLevels","getChannels","response","console","log","list","processChannelHierarchy","err","message","channelsList","allChannelKeys","map","channel","채널키","maxDepth","forEach","key","depth","match","length","Math","max","levels","Array","fill","parts","split","i","partialPath","slice","join","some","item","path","push","name","fullPath","handleLevelSelect","level","newSelectedLevels","splice","renderLevelColumn","items","selectedItem","title","onItemClick","renderItem","display","value","emptyMessage","fileName","_jsxFileName","lineNumber","columnNumber","className","children","levelItems","parentPath","filter","startsWith","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/ChannelList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchChannels } from '../services/api';\nimport Column from './Column';\nimport './ChannelLevels.css';\n\nconst ChannelList = ({ onChannelSelect, selectedChannel }) => {\n  const [channels, setChannels] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        setLoading(true);\n        const response = await fetchChannels();\n        console.log('API Response:', response);\n        setChannels(response.list || []);\n        \n        // Process channel hierarchy\n        processChannelHierarchy(response.list || []);\n        \n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setChannels([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getChannels();\n  }, []);\n\n  // Process channels into hierarchical levels\n  const processChannelHierarchy = (channelsList) => {\n    // Get all unique channel keys\n    const allChannelKeys = channelsList.map(channel => channel.채널키);\n    \n    // Find the maximum depth based on underscore separators\n    let maxDepth = 0;\n    allChannelKeys.forEach(key => {\n      const depth = (key.match(/_/g) || []).length + 1;\n      maxDepth = Math.max(maxDepth, depth);\n    });\n    \n    // Initialize levels array\n    const levels = Array(maxDepth).fill().map(() => []);\n    \n    // Group channels by level\n    allChannelKeys.forEach(key => {\n      const parts = key.split('_');\n      \n      // Add each partial path to its corresponding level\n      for (let i = 0; i < parts.length; i++) {\n        const partialPath = parts.slice(0, i + 1).join('_');\n        \n        // Only add if not already in the level\n        if (!levels[i].some(item => item.path === partialPath)) {\n          levels[i].push({\n            name: parts[i],\n            path: partialPath,\n            fullPath: key\n          });\n        }\n      }\n    });\n    \n    setChannelLevels(levels);\n  };\n\n  // Handle level selection\n  const handleLevelSelect = (level, item) => {\n    // Update selected levels up to the clicked level\n    const newSelectedLevels = [...selectedLevels];\n    newSelectedLevels.splice(level, newSelectedLevels.length, item);\n    setSelectedLevels(newSelectedLevels);\n    \n    // If selecting the last level, pass the full path to the parent\n    if (level === channelLevels.length - 1) {\n      onChannelSelect(item.fullPath);\n    }\n  };\n\n  // Render a level column\n  const renderLevelColumn = (level, items, selectedItem) => {\n    return (\n      <Column\n        key={`level-${level}`}\n        title={`레벨 ${level + 1}`}\n        items={items}\n        onItemClick={(item) => handleLevelSelect(level, item)}\n        renderItem={{\n          display: item => item.name,\n          value: item => item.path\n        }}\n        selectedItem={selectedItem}\n        loading={loading && level === 0}\n        error={error && level === 0}\n        emptyMessage={level === 0 ? \"채널 정보가 없습니다.\" : \"\"}\n      />\n    );\n  };\n\n  return (\n    <div className=\"channel-levels-container\">\n      {channelLevels.map((levelItems, level) => {\n        // Filter items based on parent selection\n        let items = levelItems;\n        if (level > 0 && selectedLevels[level - 1]) {\n          const parentPath = selectedLevels[level - 1].path;\n          items = levelItems.filter(item => \n            item.path.startsWith(parentPath + '_') || \n            item.path === parentPath\n          );\n        }\n        \n        return renderLevelColumn(level, items, selectedLevels[level]);\n      })}\n    </div>\n  );\n};\n\nexport default ChannelList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}