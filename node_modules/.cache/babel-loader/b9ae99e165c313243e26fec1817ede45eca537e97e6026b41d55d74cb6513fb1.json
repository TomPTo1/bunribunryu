{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData,\n  groupingData,\n  showProcessedData,\n  isGroupingActive\n}) => {\n  _s();\n  // Add state for user-defined groups\n  const [userGroups, setUserGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [editingGroupIndex, setEditingGroupIndex] = useState(null);\n  const [editingGroupName, setEditingGroupName] = useState('');\n\n  // Track which values have been added to any group\n  const [usedValues, setUsedValues] = useState(new Set());\n  if (!processedData && !groupingData && !isGroupingActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Check if a value has been used in any group\n  const isValueUsed = value => {\n    return usedValues.has(value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n\n    // If a group is selected, add the segment to that group\n    if (selectedGroup !== null) {\n      const segmentValue = typeof segment === 'string' ? segment : segment.text;\n      addToGroup(selectedGroup, segmentValue);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = value => {\n    console.log('Whole tag clicked:', value);\n\n    // If a group is selected and value not already used, add the value to that group\n    if (selectedGroup !== null && !isValueUsed(value)) {\n      addToGroup(selectedGroup, value);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Add class if this value is already used in a group\n    if (isValueUsed(typeof value === 'string' ? value : value.value)) {\n      className += ' used-value';\n    }\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${className} tag-container ${isValueUsed(valueText) ? 'used-value' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whole-tag-button\",\n          onClick: () => handleTagClick(valueText),\n          title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n          disabled: isValueUsed(valueText),\n          children: valueText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segments-container\",\n          children: segmentation.segments.map((segment, segIdx) => {\n            const segmentText = segment.text;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`,\n              onClick: e => handleSegmentClick(segment, e),\n              disabled: isValueUsed(segmentText),\n              children: segmentText\n            }, `seg-${segIdx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally but still clickable\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${className} clickable-tag simple-tag-button ${isValueUsed(valueText) ? 'used-value' : ''}`,\n      onClick: () => handleTagClick(valueText),\n      disabled: isValueUsed(valueText),\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n        const source = item.source || 'text';\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"whole-tag-button\",\n              onClick: () => handleTagClick(value),\n              title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n              disabled: isValueUsed(value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segments-container\",\n              children: segments.map((segment, segIdx) => {\n                const segmentText = segment.text;\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`,\n                  onClick: e => handleSegmentClick(segment, e),\n                  disabled: isValueUsed(segmentText),\n                  children: segmentText\n                }, `seg-${segIdx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 239,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`,\n          onClick: () => handleTagClick(value),\n          disabled: isValueUsed(value),\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n\n  // Render grouped data (segmented values)\n  const renderGroupedData = () => {\n    if (!groupingData) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"no-data\",\n        children: \"\\uADF8\\uB8F9\\uD551 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouped-data\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uBD84\\uC808\\uAC12 \\uBAA9\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"segment-values-list\",\n        children: groupingData['분절값'] && groupingData['분절값'].length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment-values\",\n          children: groupingData['분절값'].map((value, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `segment-button ${isValueUsed(value) ? 'used-value' : ''}`,\n            onClick: () => handleTagClick(value),\n            disabled: isValueUsed(value),\n            children: value\n          }, `segment-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-segments\",\n          children: \"\\uBD84\\uC808\\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Add a new empty user group\n  const addUserGroup = () => {\n    if (newGroupName.trim() === '') return;\n    const newGroup = {\n      name: newGroupName.trim(),\n      items: []\n    };\n    setUserGroups([...userGroups, newGroup]);\n    setNewGroupName('');\n  };\n\n  // Start editing group name\n  const startEditingGroupName = (index, name, e) => {\n    e.stopPropagation();\n    setEditingGroupIndex(index);\n    setEditingGroupName(name);\n  };\n\n  // Save edited group name\n  const saveGroupName = (index, e) => {\n    e.stopPropagation();\n    if (editingGroupName.trim() === '') return;\n    const updatedGroups = [...userGroups];\n    updatedGroups[index].name = editingGroupName.trim();\n    setUserGroups(updatedGroups);\n    setEditingGroupIndex(null);\n    setEditingGroupName('');\n  };\n\n  // Handle key press in edit mode\n  const handleEditKeyDown = (index, e) => {\n    if (e.key === 'Enter') {\n      saveGroupName(index, e);\n    } else if (e.key === 'Escape') {\n      setEditingGroupIndex(null);\n      setEditingGroupName('');\n    }\n  };\n\n  // Add a value to a user-defined group\n  const addToGroup = (groupIndex, value) => {\n    if (userGroups[groupIndex].items.includes(value)) return;\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.push(value);\n    setUserGroups(updatedGroups);\n\n    // Update used values set\n    const newUsedValues = new Set(usedValues);\n    newUsedValues.add(value);\n    setUsedValues(newUsedValues);\n  };\n\n  // Remove a value from a user-defined group\n  const removeFromGroup = (groupIndex, itemIndex) => {\n    const updatedGroups = [...userGroups];\n    const removedValue = updatedGroups[groupIndex].items[itemIndex];\n    updatedGroups[groupIndex].items.splice(itemIndex, 1);\n    setUserGroups(updatedGroups);\n\n    // Check if the value is used in any other group\n    const isUsedElsewhere = userGroups.some((group, gIdx) => gIdx !== groupIndex && group.items.includes(removedValue));\n\n    // If not used elsewhere, remove from used values set\n    if (!isUsedElsewhere) {\n      const newUsedValues = new Set(usedValues);\n      newUsedValues.delete(removedValue);\n      setUsedValues(newUsedValues);\n    }\n  };\n\n  // Toggle group selection\n  const toggleGroupSelection = index => {\n    setSelectedGroup(selectedGroup === index ? null : index);\n  };\n\n  // Render user-defined groups\n  const renderUserGroups = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-groups\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"\\uC0AC\\uC6A9\\uC790 \\uC815\\uC758 \\uADF8\\uB8F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-group-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newGroupName,\n          onChange: e => setNewGroupName(e.target.value),\n          placeholder: \"\\uC0C8 \\uADF8\\uB8F9 \\uC774\\uB984\",\n          className: \"group-name-input\",\n          onKeyDown: e => e.key === 'Enter' && addUserGroup()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addUserGroup,\n          className: \"add-group-button\",\n          children: \"\\uADF8\\uB8F9 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"groups-list\",\n        children: [userGroups.map((group, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `user-group ${selectedGroup === index ? 'selected-group' : ''}`,\n          onClick: () => toggleGroupSelection(index),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-header\",\n            children: editingGroupIndex === index ? /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: editingGroupName,\n              onChange: e => setEditingGroupName(e.target.value),\n              onBlur: e => saveGroupName(index, e),\n              onKeyDown: e => handleEditKeyDown(index, e),\n              className: \"edit-group-name\",\n              autoFocus: true,\n              onClick: e => e.stopPropagation()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"group-name\",\n                children: [group.name, \" (\", group.items.length, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 445,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-name-button\",\n                onClick: e => startEditingGroupName(index, group.name, e),\n                title: \"\\uADF8\\uB8F9 \\uC774\\uB984 \\uC218\\uC815\",\n                children: \"\\u270F\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-items\",\n            children: [group.items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"item-value\",\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"remove-item-button\",\n                onClick: e => {\n                  e.stopPropagation();\n                  removeFromGroup(index, itemIndex);\n                },\n                title: \"\\uD56D\\uBAA9 \\uC81C\\uAC70\",\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 21\n              }, this)]\n            }, `item-${itemIndex}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 19\n            }, this)), group.items.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-group-message\",\n              children: selectedGroup === index ? \"분절값을 클릭하여 이 그룹에 추가하세요\" : \"그룹이 비어 있습니다\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 477,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 459,\n            columnNumber: 15\n          }, this)]\n        }, `group-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this)), userGroups.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-groups-message\",\n          children: \"\\uC0AC\\uC6A9\\uC790 \\uC815\\uC758 \\uADF8\\uB8F9\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uC0C8 \\uADF8\\uB8F9\\uC744 \\uCD94\\uAC00\\uD558\\uACE0 \\uBD84\\uC808\\uAC12\\uC744 \\uD560\\uB2F9\\uD558\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Main render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: isGroupingActive ?\n    /*#__PURE__*/\n    // Grouping mode - show segmented values and user-defined groups\n    _jsxDEV(\"div\", {\n      className: \"grouping-view\",\n      children: [renderGroupedData(), renderUserGroups()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }, this) :\n    // Regular mode - show processed data\n    showProcessedData && processedData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processed-data\",\n      children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-row\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"enhanced-data\",\n          children: renderEnhancedView(row)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 499,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"1/Gw7MhQtm38OZGRpAO1z77zB/M=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","DataDisplay","processedData","flattenData","segmentationData","groupingData","showProcessedData","isGroupingActive","_s","userGroups","setUserGroups","newGroupName","setNewGroupName","selectedGroup","setSelectedGroup","editingGroupIndex","setEditingGroupIndex","editingGroupName","setEditingGroupName","usedValues","setUsedValues","Set","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","hasSegmentationData","value","segmentations","some","seg","segments","getSegmentationData","find","isValueUsed","has","handleSegmentClick","segment","e","stopPropagation","console","log","segmentValue","addToGroup","handleTagClick","renderTag","source","key","isLastStep","valueText","segmentation","onClick","title","disabled","map","segIdx","segmentText","isSubstring","renderEnhancedView","row","type","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","item","Array","isArray","every","v","val","renderGroupedData","addUserGroup","trim","newGroup","name","items","startEditingGroupName","index","saveGroupName","updatedGroups","handleEditKeyDown","groupIndex","newUsedValues","add","removeFromGroup","itemIndex","removedValue","splice","isUsedElsewhere","group","gIdx","delete","toggleGroupSelection","renderUserGroups","onChange","target","placeholder","onKeyDown","onBlur","autoFocus","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData, groupingData, showProcessedData, isGroupingActive }) => {\n  // Add state for user-defined groups\n  const [userGroups, setUserGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [editingGroupIndex, setEditingGroupIndex] = useState(null);\n  const [editingGroupName, setEditingGroupName] = useState('');\n  \n  // Track which values have been added to any group\n  const [usedValues, setUsedValues] = useState(new Set());\n\n  if (!processedData && !groupingData && !isGroupingActive) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Check if a value has been used in any group\n  const isValueUsed = (value) => {\n    return usedValues.has(value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    \n    // If a group is selected, add the segment to that group\n    if (selectedGroup !== null) {\n      const segmentValue = typeof segment === 'string' ? segment : segment.text;\n      addToGroup(selectedGroup, segmentValue);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = (value) => {\n    console.log('Whole tag clicked:', value);\n    \n    // If a group is selected and value not already used, add the value to that group\n    if (selectedGroup !== null && !isValueUsed(value)) {\n      addToGroup(selectedGroup, value);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Add class if this value is already used in a group\n    if (isValueUsed(typeof value === 'string' ? value : value.value)) {\n      className += ' used-value';\n    }\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <div key={key} className={`${className} tag-container ${isValueUsed(valueText) ? 'used-value' : ''}`}>\n          <button \n            className=\"whole-tag-button\" \n            onClick={() => handleTagClick(valueText)}\n            title=\"전체 태그 선택\"\n            disabled={isValueUsed(valueText)}\n          >\n            {valueText}\n          </button>\n          <div className=\"segments-container\">\n            {segmentation.segments.map((segment, segIdx) => {\n              const segmentText = segment.text;\n              return (\n                <button \n                  key={`seg-${segIdx}`} \n                  className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`}\n                  onClick={(e) => handleSegmentClick(segment, e)}\n                  disabled={isValueUsed(segmentText)}\n                >\n                  {segmentText}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      );\n    }\n    \n    // No segmentation, render normally but still clickable\n    return (\n      <button \n        key={key} \n        className={`${className} clickable-tag simple-tag-button ${isValueUsed(valueText) ? 'used-value' : ''}`}\n        onClick={() => handleTagClick(valueText)}\n        disabled={isValueUsed(valueText)}\n      >\n        {valueText}\n      </button>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          const source = item.source || 'text';\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <div \n                key={idx} \n                className={`value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`}\n              >\n                <button \n                  className=\"whole-tag-button\" \n                  onClick={() => handleTagClick(value)}\n                  title=\"전체 태그 선택\"\n                  disabled={isValueUsed(value)}\n                >\n                  {value}\n                </button>\n                <div className=\"segments-container\">\n                  {segments.map((segment, segIdx) => {\n                    const segmentText = segment.text;\n                    return (\n                      <button \n                        key={`seg-${segIdx}`} \n                        className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`}\n                        onClick={(e) => handleSegmentClick(segment, e)}\n                        disabled={isValueUsed(segmentText)}\n                      >\n                        {segmentText}\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <button \n              key={idx} \n              className={`value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`}\n              onClick={() => handleTagClick(value)}\n              disabled={isValueUsed(value)}\n            >\n              {value}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n  \n  // Render grouped data (segmented values)\n  const renderGroupedData = () => {\n    if (!groupingData) {\n      return <div className=\"no-data\">그룹핑 데이터가 없습니다</div>;\n    }\n    \n    return (\n      <div className=\"grouped-data\">\n        <h4>분절값 목록</h4>\n        <div className=\"segment-values-list\">\n          {groupingData['분절값'] && groupingData['분절값'].length > 0 ? (\n            <div className=\"segment-values\">\n              {groupingData['분절값'].map((value, idx) => (\n                <button \n                  key={`segment-${idx}`}\n                  className={`segment-button ${isValueUsed(value) ? 'used-value' : ''}`}\n                  onClick={() => handleTagClick(value)}\n                  disabled={isValueUsed(value)}\n                >\n                  {value}\n                </button>\n              ))}\n            </div>\n          ) : (\n            <div className=\"no-segments\">분절값이 없습니다</div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Add a new empty user group\n  const addUserGroup = () => {\n    if (newGroupName.trim() === '') return;\n    \n    const newGroup = {\n      name: newGroupName.trim(),\n      items: []\n    };\n    \n    setUserGroups([...userGroups, newGroup]);\n    setNewGroupName('');\n  };\n  \n  // Start editing group name\n  const startEditingGroupName = (index, name, e) => {\n    e.stopPropagation();\n    setEditingGroupIndex(index);\n    setEditingGroupName(name);\n  };\n  \n  // Save edited group name\n  const saveGroupName = (index, e) => {\n    e.stopPropagation();\n    \n    if (editingGroupName.trim() === '') return;\n    \n    const updatedGroups = [...userGroups];\n    updatedGroups[index].name = editingGroupName.trim();\n    \n    setUserGroups(updatedGroups);\n    setEditingGroupIndex(null);\n    setEditingGroupName('');\n  };\n  \n  // Handle key press in edit mode\n  const handleEditKeyDown = (index, e) => {\n    if (e.key === 'Enter') {\n      saveGroupName(index, e);\n    } else if (e.key === 'Escape') {\n      setEditingGroupIndex(null);\n      setEditingGroupName('');\n    }\n  };\n  \n  // Add a value to a user-defined group\n  const addToGroup = (groupIndex, value) => {\n    if (userGroups[groupIndex].items.includes(value)) return;\n    \n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.push(value);\n    setUserGroups(updatedGroups);\n    \n    // Update used values set\n    const newUsedValues = new Set(usedValues);\n    newUsedValues.add(value);\n    setUsedValues(newUsedValues);\n  };\n  \n  // Remove a value from a user-defined group\n  const removeFromGroup = (groupIndex, itemIndex) => {\n    const updatedGroups = [...userGroups];\n    const removedValue = updatedGroups[groupIndex].items[itemIndex];\n    updatedGroups[groupIndex].items.splice(itemIndex, 1);\n    setUserGroups(updatedGroups);\n    \n    // Check if the value is used in any other group\n    const isUsedElsewhere = userGroups.some((group, gIdx) => \n      gIdx !== groupIndex && group.items.includes(removedValue)\n    );\n    \n    // If not used elsewhere, remove from used values set\n    if (!isUsedElsewhere) {\n      const newUsedValues = new Set(usedValues);\n      newUsedValues.delete(removedValue);\n      setUsedValues(newUsedValues);\n    }\n  };\n\n  // Toggle group selection\n  const toggleGroupSelection = (index) => {\n    setSelectedGroup(selectedGroup === index ? null : index);\n  };\n  \n  // Render user-defined groups\n  const renderUserGroups = () => {\n    return (\n      <div className=\"user-groups\">\n        <h4>사용자 정의 그룹</h4>\n        \n        {/* Add new group input */}\n        <div className=\"add-group-form\">\n          <input\n            type=\"text\"\n            value={newGroupName}\n            onChange={(e) => setNewGroupName(e.target.value)}\n            placeholder=\"새 그룹 이름\"\n            className=\"group-name-input\"\n            onKeyDown={(e) => e.key === 'Enter' && addUserGroup()}\n          />\n          <button onClick={addUserGroup} className=\"add-group-button\">\n            그룹 추가\n          </button>\n        </div>\n        \n        {/* Group list */}\n        <div className=\"groups-list\">\n          {userGroups.map((group, index) => (\n            <div \n              key={`group-${index}`} \n              className={`user-group ${selectedGroup === index ? 'selected-group' : ''}`}\n              onClick={() => toggleGroupSelection(index)}\n            >\n              <div className=\"group-header\">\n                {editingGroupIndex === index ? (\n                  <input\n                    type=\"text\"\n                    value={editingGroupName}\n                    onChange={(e) => setEditingGroupName(e.target.value)}\n                    onBlur={(e) => saveGroupName(index, e)}\n                    onKeyDown={(e) => handleEditKeyDown(index, e)}\n                    className=\"edit-group-name\"\n                    autoFocus\n                    onClick={(e) => e.stopPropagation()}\n                  />\n                ) : (\n                  <>\n                    <span className=\"group-name\">\n                      {group.name} ({group.items.length})\n                    </span>\n                    <button \n                      className=\"edit-name-button\"\n                      onClick={(e) => startEditingGroupName(index, group.name, e)}\n                      title=\"그룹 이름 수정\"\n                    >\n                      ✏️\n                    </button>\n                  </>\n                )}\n              </div>\n              \n              <div className=\"group-items\">\n                {group.items.map((item, itemIndex) => (\n                  <div key={`item-${itemIndex}`} className=\"group-item\">\n                    <span className=\"item-value\">{item}</span>\n                    <button \n                      className=\"remove-item-button\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        removeFromGroup(index, itemIndex);\n                      }}\n                      title=\"항목 제거\"\n                    >\n                      ✕\n                    </button>\n                  </div>\n                ))}\n                \n                {group.items.length === 0 && (\n                  <div className=\"empty-group-message\">\n                    {selectedGroup === index \n                      ? \"분절값을 클릭하여 이 그룹에 추가하세요\" \n                      : \"그룹이 비어 있습니다\"}\n                  </div>\n                )}\n              </div>\n            </div>\n          ))}\n          \n          {userGroups.length === 0 && (\n            <div className=\"no-groups-message\">\n              사용자 정의 그룹이 없습니다. 새 그룹을 추가하고 분절값을 할당하세요.\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Main render\n  return (\n    <div className=\"data-display\">\n      {isGroupingActive ? (\n        // Grouping mode - show segmented values and user-defined groups\n        <div className=\"grouping-view\">\n          {renderGroupedData()}\n          {renderUserGroups()}\n        </div>\n      ) : (\n        // Regular mode - show processed data\n        showProcessedData && processedData ? (\n          <div className=\"processed-data\">\n            {flattenData(processedData).map((row, index) => (\n              <div key={index} className=\"data-row\">\n                <div className=\"enhanced-data\">\n                  {renderEnhancedView(row)}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"no-data\">처리된 데이터가 없습니다</div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}