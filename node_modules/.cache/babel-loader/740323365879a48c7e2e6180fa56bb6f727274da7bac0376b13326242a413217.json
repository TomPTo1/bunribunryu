{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeparationClassifier = ({\n  data,\n  onReset\n}) => {\n  _s();\n  const [processedData, setProcessedData] = useState(null);\n  const [pipeline, setPipeline] = useState([{\n    id: 'bracket-separation',\n    name: '괄호값 분리',\n    active: true\n  }, {\n    id: 'delimiter-separation',\n    name: '구분자 분리',\n    active: false,\n    config: {\n      delimiters: [',', ' '] // Default delimiters: comma and whitespace\n    }\n  }]);\n  const [selectedStep, setSelectedStep] = useState('bracket-separation');\n\n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Process data through all active pipeline steps\n      let result = {\n        ...data\n      };\n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n          // Add more step processors here in the future\n        }\n      });\n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n    }\n  }, [data, pipeline]);\n  const processBracketSeparation = input => {\n    if (typeof input === 'string') {\n      const bracketRegex = /\\[(.*?)\\]|\\((.*?)\\)|\\{(.*?)\\}/g;\n      const matches = [];\n      let match;\n      while ((match = bracketRegex.exec(input)) !== null) {\n        const value = match[1] || match[2] || match[3];\n        if (value) matches.push(value);\n      }\n      return {\n        original: input,\n        separated: matches,\n        type: 'bracket-separation'\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processBracketSeparation(item));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processBracketSeparation(input[key]);\n      }\n      return result;\n    }\n    return input;\n  };\n  const processDelimiterSeparation = (input, delimiters) => {\n    if (typeof input === 'string') {\n      // Create a regex pattern from the delimiters\n      const delimiterPattern = delimiters.map(d =>\n      // Escape special regex characters in delimiters\n      d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|');\n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n\n      // Split the string by the delimiters and filter out empty strings\n      const parts = input.split(regex).filter(part => part.trim() !== '' && !delimiters.includes(part.trim()));\n      return {\n        original: input,\n        separated: parts,\n        type: 'delimiter-separation'\n      };\n    } else if (input && input.type === 'bracket-separation') {\n      // Process the original text with delimiter separation\n      const delimiterPattern = delimiters.map(d => d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|');\n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n\n      // Split the original text and filter\n      const partsFromOriginal = input.original.split(regex).filter(part => part.trim() !== '' && !delimiters.includes(part.trim()));\n\n      // Also process bracket values to get more granular results\n      const partsFromBrackets = [];\n      input.separated.forEach(val => {\n        const parts = val.split(regex).filter(part => part.trim() !== '' && !delimiters.includes(part.trim()));\n        partsFromBrackets.push(...parts);\n      });\n\n      // Combine all unique values\n      const allParts = [...new Set([...partsFromOriginal, ...partsFromBrackets])];\n      return {\n        original: input.original,\n        separated: allParts,\n        type: 'delimiter-separation',\n        previous: {\n          type: input.type,\n          separated: input.separated\n        }\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processDelimiterSeparation(item, delimiters));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processDelimiterSeparation(input[key], delimiters);\n      }\n      return result;\n    }\n    return input;\n  };\n  const toggleStepActive = stepId => {\n    setPipeline(pipeline.map(step => step.id === stepId ? {\n      ...step,\n      active: !step.active\n    } : step));\n  };\n  const selectStep = stepId => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = delimiterString => {\n    setPipeline(pipeline.map(step => step.id === 'delimiter-separation' ? {\n      ...step,\n      config: {\n        ...step.config,\n        delimiters: delimiterString.split('').filter(d => d) // Split into characters and filter empty\n      }\n    } : step));\n  };\n\n  // Flatten data structure to generate simple rows\n  const flattenData = (data, path = '', rows = []) => {\n    if (!data) return rows;\n    if (data.type === 'bracket-separation' || data.type === 'delimiter-separation') {\n      rows.push({\n        path,\n        original: data.original,\n        separated: data.separated,\n        type: data.type,\n        previous: data.previous\n      });\n    } else if (Array.isArray(data)) {\n      data.forEach((item, index) => {\n        const itemPath = path ? `${path}[${index}]` : `[${index}]`;\n        flattenData(item, itemPath, rows);\n      });\n    } else if (typeof data === 'object' && data !== null) {\n      Object.entries(data).forEach(([key, value]) => {\n        const keyPath = path ? `${path}.${key}` : key;\n        flattenData(value, keyPath, rows);\n      });\n    } else if (path) {\n      // Simple value\n      rows.push({\n        path,\n        original: data,\n        separated: []\n      });\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"separation-classifier\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"classifier-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-content\",\n          children: processedData ? /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"data-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"original-cell\",\n                  children: typeof row.original === 'string' ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    dangerouslySetInnerHTML: {\n                      __html: row.original.replace(/(\\[.*?\\]|\\(.*?\\)|\\{.*?\\})/g, '<span class=\"highlight-bracket\">$1</span>')\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 27\n                  }, this) : String(row.original)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 208,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"separated-cell\",\n                  children: row.separated && row.separated.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"separated-values\",\n                    children: row.separated.map((val, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"value-tag\",\n                      children: val\n                    }, idx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 224,\n                      columnNumber: 31\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 222,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"no-values\",\n                    children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 228,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 220,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 205,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-data\",\n            children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pipeline-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD30C\\uC774\\uD504\\uB77C\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-list\",\n          children: [pipeline.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `pipeline-step ${step.active ? 'active' : 'inactive'} ${selectedStep === step.id ? 'selected' : ''}`,\n            onClick: () => selectStep(step.id),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"step-number\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"step-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"step-title\",\n                children: step.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"step-control\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"toggle\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: step.active,\n                    onChange: () => toggleStepActive(step.id),\n                    onClick: e => e.stopPropagation()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 256,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"toggle-track\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 262,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 255,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 17\n            }, this), selectedStep === step.id && step.id === 'delimiter-separation' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"step-config\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"config-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"\\uAD6C\\uBD84\\uC790:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: step.config.delimiters.join(''),\n                  onChange: e => updateDelimiters(e.target.value),\n                  className: \"delimiter-input\",\n                  placeholder: \"\\uAD6C\\uBD84\\uC790 \\uC785\\uB825 (\\uC608: ,;)\",\n                  onClick: e => e.stopPropagation()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"delimiter-help\",\n                children: [\"\\uAC01 \\uBB38\\uC790\\uB294 \\uAC1C\\uBCC4 \\uAD6C\\uBD84\\uC790\\uB85C \\uCC98\\uB9AC\\uB429\\uB2C8\\uB2E4. \\uC608: \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \",\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 47\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \"\\uACF5\\uBC31\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 62\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this)]\n          }, step.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-step\",\n            children: \"+ \\uCC98\\uB9AC \\uB2E8\\uACC4 \\uCD94\\uAC00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: onReset,\n            children: \"\\uCD08\\uAE30\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .separation-classifier {\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .classifier-layout {\n          display: flex;\n          gap: 20px;\n          height: 100%;\n        }\n        \n        /* Data View - left side (wider) */\n        .data-view {\n          flex: 3;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          overflow: auto;\n        }\n        \n        .data-content {\n          height: calc(100% - 40px);\n          overflow: auto;\n        }\n        \n        /* Pipeline Panel - right side (narrower) */\n        .pipeline-panel {\n          flex: 1;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        h3 {\n          margin-top: 0;\n          margin-bottom: 16px;\n          color: #202124;\n          font-size: 16px;\n        }\n        \n        .pipeline-list {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          flex-grow: 1;\n        }\n        \n        .pipeline-step {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          border-radius: 6px;\n          background: #f8f9fa;\n          border: 1px solid #dadce0;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        \n        .pipeline-step:hover {\n          background: #f1f3f4;\n        }\n        \n        .pipeline-step.active {\n          border-color: #4285F4;\n        }\n        \n        .pipeline-step.selected {\n          background: #e8f0fe;\n        }\n        \n        .step-number {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          background: #4285F4;\n          color: white;\n          font-weight: bold;\n          margin-right: 10px;\n        }\n        \n        .pipeline-step.inactive .step-number {\n          background: #dadce0;\n        }\n        \n        .step-details {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .step-title {\n          font-weight: 500;\n        }\n        \n        .step-config {\n          margin-top: 12px;\n          padding-top: 12px;\n          border-top: 1px solid #dadce0;\n        }\n        \n        .config-row {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n          margin-bottom: 8px;\n        }\n        \n        .config-row label {\n          font-size: 14px;\n          color: #5f6368;\n          width: 60px;\n        }\n        \n        .delimiter-input {\n          flex: 1;\n          padding: 6px 8px;\n          border: 1px solid #dadce0;\n          border-radius: 4px;\n          font-size: 14px;\n        }\n        \n        .delimiter-help {\n          font-size: 12px;\n          color: #5f6368;\n          margin-top: 4px;\n        }\n        \n        .add-step {\n          margin-top: 8px;\n          padding: 10px;\n          border: 1px dashed #dadce0;\n          background: none;\n          border-radius: 6px;\n          color: #4285F4;\n          cursor: pointer;\n          text-align: center;\n          font-weight: 500;\n        }\n        \n        .add-step:hover {\n          background: #f8f9fa;\n        }\n        \n        .pipeline-actions {\n          margin-top: 16px;\n        }\n        \n        .reset-button {\n          width: 100%;\n          padding: 8px 16px;\n          background: #4285F4;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n        \n        .reset-button:hover {\n          background: #1a73e8;\n        }\n        \n        /* Toggle Switch */\n        .toggle {\n          position: relative;\n          display: inline-block;\n          width: 32px;\n          height: 16px;\n        }\n        \n        .toggle input {\n          opacity: 0;\n          width: 0;\n          height: 0;\n        }\n        \n        .toggle-track {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: .3s;\n          border-radius: 16px;\n        }\n        \n        .toggle-track:before {\n          position: absolute;\n          content: \"\";\n          height: 12px;\n          width: 12px;\n          left: 2px;\n          bottom: 2px;\n          background-color: white;\n          transition: .3s;\n          border-radius: 50%;\n        }\n        \n        input:checked + .toggle-track {\n          background-color: #4285F4;\n        }\n        \n        input:checked + .toggle-track:before {\n          transform: translateX(16px);\n        }\n        \n        /* Data Table */\n        .data-table {\n          width: 100%;\n          border-collapse: collapse;\n          font-size: 14px;\n        }\n        \n        .data-table th,\n        .data-table td {\n          padding: 10px;\n          text-align: left;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .data-table th {\n          background: #f8f9fa;\n          font-weight: 600;\n          color: #5f6368;\n        }\n        \n        .original-cell {\n          font-family: monospace;\n          color: #202124;\n          max-width: 300px;\n          width: 45%;\n          overflow-wrap: break-word;\n        }\n        \n        .highlight-bracket {\n          background-color: #fce8e6;\n          color: #d93025;\n          border-radius: 2px;\n          padding: 0 2px;\n        }\n        \n        .separated-cell {\n          width: 55%;\n          max-width: 300px;\n        }\n        \n        .separated-values {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 6px;\n        }\n        \n        .value-tag {\n          background: #e8f0fe;\n          color: #1967d2;\n          padding: 3px 8px;\n          border-radius: 16px;\n          font-size: 13px;\n          white-space: nowrap;\n        }\n        \n        .no-values {\n          color: #5f6368;\n          font-style: italic;\n        }\n        \n        .no-data {\n          color: #5f6368;\n          font-style: italic;\n          padding: 20px;\n          text-align: center;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s(SeparationClassifier, \"LGPMKhCOnHhQ4FdSMkHAJtAL5mw=\");\n_c = SeparationClassifier;\nexport default SeparationClassifier;\nvar _c;\n$RefreshReg$(_c, \"SeparationClassifier\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SeparationClassifier","data","onReset","_s","processedData","setProcessedData","pipeline","setPipeline","id","name","active","config","delimiters","selectedStep","setSelectedStep","result","forEach","step","processBracketSeparation","processDelimiterSeparation","input","bracketRegex","matches","match","exec","value","push","original","separated","type","Array","isArray","map","item","key","delimiterPattern","d","replace","join","regex","RegExp","parts","split","filter","part","trim","includes","partsFromOriginal","partsFromBrackets","val","allParts","Set","previous","toggleStepActive","stepId","selectStep","updateDelimiters","delimiterString","flattenData","path","rows","index","itemPath","Object","entries","keyPath","className","children","fileName","_jsxFileName","lineNumber","columnNumber","row","dangerouslySetInnerHTML","__html","String","length","idx","onClick","checked","onChange","e","stopPropagation","target","placeholder","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SeparationClassifier = ({ data, onReset }) => {\n  const [processedData, setProcessedData] = useState(null);\n  const [pipeline, setPipeline] = useState([\n    { id: 'bracket-separation', name: '괄호값 분리', active: true },\n    { \n      id: 'delimiter-separation', \n      name: '구분자 분리', \n      active: false,\n      config: {\n        delimiters: [',', ' '] // Default delimiters: comma and whitespace\n      }\n    }\n  ]);\n  const [selectedStep, setSelectedStep] = useState('bracket-separation');\n  \n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Process data through all active pipeline steps\n      let result = { ...data };\n      \n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n          // Add more step processors here in the future\n        }\n      });\n      \n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n    }\n  }, [data, pipeline]);\n\n  const processBracketSeparation = (input) => {\n    if (typeof input === 'string') {\n      const bracketRegex = /\\[(.*?)\\]|\\((.*?)\\)|\\{(.*?)\\}/g;\n      const matches = [];\n      let match;\n      \n      while ((match = bracketRegex.exec(input)) !== null) {\n        const value = match[1] || match[2] || match[3];\n        if (value) matches.push(value);\n      }\n      \n      return {\n        original: input,\n        separated: matches,\n        type: 'bracket-separation'\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processBracketSeparation(item));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processBracketSeparation(input[key]);\n      }\n      return result;\n    }\n    \n    return input;\n  };\n\n  const processDelimiterSeparation = (input, delimiters) => {\n    if (typeof input === 'string') {\n      // Create a regex pattern from the delimiters\n      const delimiterPattern = delimiters.map(d => \n        // Escape special regex characters in delimiters\n        d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      ).join('|');\n      \n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n      \n      // Split the string by the delimiters and filter out empty strings\n      const parts = input.split(regex).filter(part => \n        part.trim() !== '' && !delimiters.includes(part.trim())\n      );\n      \n      return {\n        original: input,\n        separated: parts,\n        type: 'delimiter-separation'\n      };\n    } else if (input && input.type === 'bracket-separation') {\n      // Process the original text with delimiter separation\n      const delimiterPattern = delimiters.map(d => \n        d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      ).join('|');\n      \n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n      \n      // Split the original text and filter\n      const partsFromOriginal = input.original.split(regex).filter(part => \n        part.trim() !== '' && !delimiters.includes(part.trim())\n      );\n      \n      // Also process bracket values to get more granular results\n      const partsFromBrackets = [];\n      input.separated.forEach(val => {\n        const parts = val.split(regex).filter(part => \n          part.trim() !== '' && !delimiters.includes(part.trim())\n        );\n        partsFromBrackets.push(...parts);\n      });\n      \n      // Combine all unique values\n      const allParts = [...new Set([...partsFromOriginal, ...partsFromBrackets])];\n      \n      return {\n        original: input.original,\n        separated: allParts,\n        type: 'delimiter-separation',\n        previous: {\n          type: input.type,\n          separated: input.separated\n        }\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processDelimiterSeparation(item, delimiters));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processDelimiterSeparation(input[key], delimiters);\n      }\n      return result;\n    }\n    \n    return input;\n  };\n\n  const toggleStepActive = (stepId) => {\n    setPipeline(pipeline.map(step => \n      step.id === stepId ? { ...step, active: !step.active } : step\n    ));\n  };\n\n  const selectStep = (stepId) => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = (delimiterString) => {\n    setPipeline(pipeline.map(step => \n      step.id === 'delimiter-separation' \n        ? { \n            ...step, \n            config: { \n              ...step.config, \n              delimiters: delimiterString.split('').filter(d => d) // Split into characters and filter empty\n            } \n          } \n        : step\n    ));\n  };\n\n  // Flatten data structure to generate simple rows\n  const flattenData = (data, path = '', rows = []) => {\n    if (!data) return rows;\n    \n    if (data.type === 'bracket-separation' || data.type === 'delimiter-separation') {\n      rows.push({\n        path,\n        original: data.original,\n        separated: data.separated,\n        type: data.type,\n        previous: data.previous\n      });\n    } else if (Array.isArray(data)) {\n      data.forEach((item, index) => {\n        const itemPath = path ? `${path}[${index}]` : `[${index}]`;\n        flattenData(item, itemPath, rows);\n      });\n    } else if (typeof data === 'object' && data !== null) {\n      Object.entries(data).forEach(([key, value]) => {\n        const keyPath = path ? `${path}.${key}` : key;\n        flattenData(value, keyPath, rows);\n      });\n    } else if (path) {\n      // Simple value\n      rows.push({\n        path,\n        original: data,\n        separated: []\n      });\n    }\n    \n    return rows;\n  };\n\n  return (\n    <div className=\"separation-classifier\">\n      <div className=\"classifier-layout\">\n        {/* Left side - Data View (wider) */}\n        <div className=\"data-view\">\n          <h3>처리된 데이터</h3>\n          <div className=\"data-content\">\n            {processedData ? (\n              <table className=\"data-table\">\n                <tbody>\n                  {flattenData(processedData).map((row, index) => (\n                    <tr key={index}>\n                      <td className=\"original-cell\">\n                        {typeof row.original === 'string' ? (\n                          <div dangerouslySetInnerHTML={{ \n                            __html: row.original.replace(\n                              /(\\[.*?\\]|\\(.*?\\)|\\{.*?\\})/g, \n                              '<span class=\"highlight-bracket\">$1</span>'\n                            )\n                          }} />\n                        ) : (\n                          String(row.original)\n                        )}\n                      </td>\n                      <td className=\"separated-cell\">\n                        {row.separated && row.separated.length > 0 ? (\n                          <div className=\"separated-values\">\n                            {row.separated.map((val, idx) => (\n                              <span key={idx} className=\"value-tag\">{val}</span>\n                            ))}\n                          </div>\n                        ) : (\n                          <span className=\"no-values\">추출된 값 없음</span>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            ) : (\n              <div className=\"no-data\">처리할 데이터가 없습니다</div>\n            )}\n          </div>\n        </div>\n        \n        {/* Right side - Pipeline (narrower) */}\n        <div className=\"pipeline-panel\">\n          <h3>파이프라인</h3>\n          <div className=\"pipeline-list\">\n            {pipeline.map((step, index) => (\n              <div \n                key={step.id}\n                className={`pipeline-step ${step.active ? 'active' : 'inactive'} ${selectedStep === step.id ? 'selected' : ''}`}\n                onClick={() => selectStep(step.id)}\n              >\n                <div className=\"step-number\">{index + 1}</div>\n                <div className=\"step-details\">\n                  <div className=\"step-title\">{step.name}</div>\n                  <div className=\"step-control\">\n                    <label className=\"toggle\">\n                      <input \n                        type=\"checkbox\" \n                        checked={step.active}\n                        onChange={() => toggleStepActive(step.id)}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                      <span className=\"toggle-track\"></span>\n                    </label>\n                  </div>\n                </div>\n                {selectedStep === step.id && step.id === 'delimiter-separation' && (\n                  <div className=\"step-config\">\n                    <div className=\"config-row\">\n                      <label>구분자:</label>\n                      <input \n                        type=\"text\" \n                        value={step.config.delimiters.join('')}\n                        onChange={(e) => updateDelimiters(e.target.value)}\n                        className=\"delimiter-input\"\n                        placeholder=\"구분자 입력 (예: ,;)\"\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                    </div>\n                    <div className=\"delimiter-help\">\n                      각 문자는 개별 구분자로 처리됩니다. 예: <code>,</code> <code>공백</code>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n            \n            <button className=\"add-step\">\n              + 처리 단계 추가\n            </button>\n          </div>\n          \n          <div className=\"pipeline-actions\">\n            <button className=\"reset-button\" onClick={onReset}>\n              초기화\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <style jsx>{`\n        .separation-classifier {\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .classifier-layout {\n          display: flex;\n          gap: 20px;\n          height: 100%;\n        }\n        \n        /* Data View - left side (wider) */\n        .data-view {\n          flex: 3;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          overflow: auto;\n        }\n        \n        .data-content {\n          height: calc(100% - 40px);\n          overflow: auto;\n        }\n        \n        /* Pipeline Panel - right side (narrower) */\n        .pipeline-panel {\n          flex: 1;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        h3 {\n          margin-top: 0;\n          margin-bottom: 16px;\n          color: #202124;\n          font-size: 16px;\n        }\n        \n        .pipeline-list {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          flex-grow: 1;\n        }\n        \n        .pipeline-step {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          border-radius: 6px;\n          background: #f8f9fa;\n          border: 1px solid #dadce0;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        \n        .pipeline-step:hover {\n          background: #f1f3f4;\n        }\n        \n        .pipeline-step.active {\n          border-color: #4285F4;\n        }\n        \n        .pipeline-step.selected {\n          background: #e8f0fe;\n        }\n        \n        .step-number {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          background: #4285F4;\n          color: white;\n          font-weight: bold;\n          margin-right: 10px;\n        }\n        \n        .pipeline-step.inactive .step-number {\n          background: #dadce0;\n        }\n        \n        .step-details {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .step-title {\n          font-weight: 500;\n        }\n        \n        .step-config {\n          margin-top: 12px;\n          padding-top: 12px;\n          border-top: 1px solid #dadce0;\n        }\n        \n        .config-row {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n          margin-bottom: 8px;\n        }\n        \n        .config-row label {\n          font-size: 14px;\n          color: #5f6368;\n          width: 60px;\n        }\n        \n        .delimiter-input {\n          flex: 1;\n          padding: 6px 8px;\n          border: 1px solid #dadce0;\n          border-radius: 4px;\n          font-size: 14px;\n        }\n        \n        .delimiter-help {\n          font-size: 12px;\n          color: #5f6368;\n          margin-top: 4px;\n        }\n        \n        .add-step {\n          margin-top: 8px;\n          padding: 10px;\n          border: 1px dashed #dadce0;\n          background: none;\n          border-radius: 6px;\n          color: #4285F4;\n          cursor: pointer;\n          text-align: center;\n          font-weight: 500;\n        }\n        \n        .add-step:hover {\n          background: #f8f9fa;\n        }\n        \n        .pipeline-actions {\n          margin-top: 16px;\n        }\n        \n        .reset-button {\n          width: 100%;\n          padding: 8px 16px;\n          background: #4285F4;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n        \n        .reset-button:hover {\n          background: #1a73e8;\n        }\n        \n        /* Toggle Switch */\n        .toggle {\n          position: relative;\n          display: inline-block;\n          width: 32px;\n          height: 16px;\n        }\n        \n        .toggle input {\n          opacity: 0;\n          width: 0;\n          height: 0;\n        }\n        \n        .toggle-track {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: .3s;\n          border-radius: 16px;\n        }\n        \n        .toggle-track:before {\n          position: absolute;\n          content: \"\";\n          height: 12px;\n          width: 12px;\n          left: 2px;\n          bottom: 2px;\n          background-color: white;\n          transition: .3s;\n          border-radius: 50%;\n        }\n        \n        input:checked + .toggle-track {\n          background-color: #4285F4;\n        }\n        \n        input:checked + .toggle-track:before {\n          transform: translateX(16px);\n        }\n        \n        /* Data Table */\n        .data-table {\n          width: 100%;\n          border-collapse: collapse;\n          font-size: 14px;\n        }\n        \n        .data-table th,\n        .data-table td {\n          padding: 10px;\n          text-align: left;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .data-table th {\n          background: #f8f9fa;\n          font-weight: 600;\n          color: #5f6368;\n        }\n        \n        .original-cell {\n          font-family: monospace;\n          color: #202124;\n          max-width: 300px;\n          width: 45%;\n          overflow-wrap: break-word;\n        }\n        \n        .highlight-bracket {\n          background-color: #fce8e6;\n          color: #d93025;\n          border-radius: 2px;\n          padding: 0 2px;\n        }\n        \n        .separated-cell {\n          width: 55%;\n          max-width: 300px;\n        }\n        \n        .separated-values {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 6px;\n        }\n        \n        .value-tag {\n          background: #e8f0fe;\n          color: #1967d2;\n          padding: 3px 8px;\n          border-radius: 16px;\n          font-size: 13px;\n          white-space: nowrap;\n        }\n        \n        .no-values {\n          color: #5f6368;\n          font-style: italic;\n        }\n        \n        .no-data {\n          color: #5f6368;\n          font-style: italic;\n          padding: 20px;\n          text-align: center;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SeparationClassifier; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,oBAAoB,GAAGA,CAAC;EAAEC,IAAI;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,CACvC;IAAEY,EAAE,EAAE,oBAAoB;IAAEC,IAAI,EAAE,QAAQ;IAAEC,MAAM,EAAE;EAAK,CAAC,EAC1D;IACEF,EAAE,EAAE,sBAAsB;IAC1BC,IAAI,EAAE,QAAQ;IACdC,MAAM,EAAE,KAAK;IACbC,MAAM,EAAE;MACNC,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IACzB;EACF,CAAC,CACF,CAAC;EACF,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGlB,QAAQ,CAAC,oBAAoB,CAAC;;EAEtE;EACAC,SAAS,CAAC,MAAM;IACd,IAAII,IAAI,EAAE;MACR;MACA,IAAIc,MAAM,GAAG;QAAE,GAAGd;MAAK,CAAC;MAExBK,QAAQ,CAACU,OAAO,CAACC,IAAI,IAAI;QACvB,IAAIA,IAAI,CAACP,MAAM,EAAE;UACf,IAAIO,IAAI,CAACT,EAAE,KAAK,oBAAoB,EAAE;YACpCO,MAAM,GAAGG,wBAAwB,CAACH,MAAM,CAAC;UAC3C,CAAC,MAAM,IAAIE,IAAI,CAACT,EAAE,KAAK,sBAAsB,EAAE;YAC7CO,MAAM,GAAGI,0BAA0B,CAACJ,MAAM,EAAEE,IAAI,CAACN,MAAM,CAACC,UAAU,CAAC;UACrE;UACA;QACF;MACF,CAAC,CAAC;MAEFP,gBAAgB,CAACU,MAAM,CAAC;IAC1B,CAAC,MAAM;MACLV,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC,EAAE,CAACJ,IAAI,EAAEK,QAAQ,CAAC,CAAC;EAEpB,MAAMY,wBAAwB,GAAIE,KAAK,IAAK;IAC1C,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,MAAMC,YAAY,GAAG,gCAAgC;MACrD,MAAMC,OAAO,GAAG,EAAE;MAClB,IAAIC,KAAK;MAET,OAAO,CAACA,KAAK,GAAGF,YAAY,CAACG,IAAI,CAACJ,KAAK,CAAC,MAAM,IAAI,EAAE;QAClD,MAAMK,KAAK,GAAGF,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC,IAAIA,KAAK,CAAC,CAAC,CAAC;QAC9C,IAAIE,KAAK,EAAEH,OAAO,CAACI,IAAI,CAACD,KAAK,CAAC;MAChC;MAEA,OAAO;QACLE,QAAQ,EAAEP,KAAK;QACfQ,SAAS,EAAEN,OAAO;QAClBO,IAAI,EAAE;MACR,CAAC;IACH,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACX,KAAK,CAAC,EAAE;MAC/B,OAAOA,KAAK,CAACY,GAAG,CAACC,IAAI,IAAIf,wBAAwB,CAACe,IAAI,CAAC,CAAC;IAC1D,CAAC,MAAM,IAAI,OAAOb,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MACtD,MAAML,MAAM,GAAG,CAAC,CAAC;MACjB,KAAK,MAAMmB,GAAG,IAAId,KAAK,EAAE;QACvBL,MAAM,CAACmB,GAAG,CAAC,GAAGhB,wBAAwB,CAACE,KAAK,CAACc,GAAG,CAAC,CAAC;MACpD;MACA,OAAOnB,MAAM;IACf;IAEA,OAAOK,KAAK;EACd,CAAC;EAED,MAAMD,0BAA0B,GAAGA,CAACC,KAAK,EAAER,UAAU,KAAK;IACxD,IAAI,OAAOQ,KAAK,KAAK,QAAQ,EAAE;MAC7B;MACA,MAAMe,gBAAgB,GAAGvB,UAAU,CAACoB,GAAG,CAACI,CAAC;MACvC;MACAA,CAAC,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CACzC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAEX,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAIL,gBAAgB,GAAG,EAAE,GAAG,CAAC;;MAEtD;MACA,MAAMM,KAAK,GAAGrB,KAAK,CAACsB,KAAK,CAACH,KAAK,CAAC,CAACI,MAAM,CAACC,IAAI,IAC1CA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACjC,UAAU,CAACkC,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC,CACxD,CAAC;MAED,OAAO;QACLlB,QAAQ,EAAEP,KAAK;QACfQ,SAAS,EAAEa,KAAK;QAChBZ,IAAI,EAAE;MACR,CAAC;IACH,CAAC,MAAM,IAAIT,KAAK,IAAIA,KAAK,CAACS,IAAI,KAAK,oBAAoB,EAAE;MACvD;MACA,MAAMM,gBAAgB,GAAGvB,UAAU,CAACoB,GAAG,CAACI,CAAC,IACvCA,CAAC,CAACC,OAAO,CAAC,qBAAqB,EAAE,MAAM,CACzC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;MAEX,MAAMC,KAAK,GAAG,IAAIC,MAAM,CAAC,IAAIL,gBAAgB,GAAG,EAAE,GAAG,CAAC;;MAEtD;MACA,MAAMY,iBAAiB,GAAG3B,KAAK,CAACO,QAAQ,CAACe,KAAK,CAACH,KAAK,CAAC,CAACI,MAAM,CAACC,IAAI,IAC/DA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACjC,UAAU,CAACkC,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC,CACxD,CAAC;;MAED;MACA,MAAMG,iBAAiB,GAAG,EAAE;MAC5B5B,KAAK,CAACQ,SAAS,CAACZ,OAAO,CAACiC,GAAG,IAAI;QAC7B,MAAMR,KAAK,GAAGQ,GAAG,CAACP,KAAK,CAACH,KAAK,CAAC,CAACI,MAAM,CAACC,IAAI,IACxCA,IAAI,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,IAAI,CAACjC,UAAU,CAACkC,QAAQ,CAACF,IAAI,CAACC,IAAI,CAAC,CAAC,CACxD,CAAC;QACDG,iBAAiB,CAACtB,IAAI,CAAC,GAAGe,KAAK,CAAC;MAClC,CAAC,CAAC;;MAEF;MACA,MAAMS,QAAQ,GAAG,CAAC,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAGJ,iBAAiB,EAAE,GAAGC,iBAAiB,CAAC,CAAC,CAAC;MAE3E,OAAO;QACLrB,QAAQ,EAAEP,KAAK,CAACO,QAAQ;QACxBC,SAAS,EAAEsB,QAAQ;QACnBrB,IAAI,EAAE,sBAAsB;QAC5BuB,QAAQ,EAAE;UACRvB,IAAI,EAAET,KAAK,CAACS,IAAI;UAChBD,SAAS,EAAER,KAAK,CAACQ;QACnB;MACF,CAAC;IACH,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACX,KAAK,CAAC,EAAE;MAC/B,OAAOA,KAAK,CAACY,GAAG,CAACC,IAAI,IAAId,0BAA0B,CAACc,IAAI,EAAErB,UAAU,CAAC,CAAC;IACxE,CAAC,MAAM,IAAI,OAAOQ,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,IAAI,EAAE;MACtD,MAAML,MAAM,GAAG,CAAC,CAAC;MACjB,KAAK,MAAMmB,GAAG,IAAId,KAAK,EAAE;QACvBL,MAAM,CAACmB,GAAG,CAAC,GAAGf,0BAA0B,CAACC,KAAK,CAACc,GAAG,CAAC,EAAEtB,UAAU,CAAC;MAClE;MACA,OAAOG,MAAM;IACf;IAEA,OAAOK,KAAK;EACd,CAAC;EAED,MAAMiC,gBAAgB,GAAIC,MAAM,IAAK;IACnC/C,WAAW,CAACD,QAAQ,CAAC0B,GAAG,CAACf,IAAI,IAC3BA,IAAI,CAACT,EAAE,KAAK8C,MAAM,GAAG;MAAE,GAAGrC,IAAI;MAAEP,MAAM,EAAE,CAACO,IAAI,CAACP;IAAO,CAAC,GAAGO,IAC3D,CAAC,CAAC;EACJ,CAAC;EAED,MAAMsC,UAAU,GAAID,MAAM,IAAK;IAC7BxC,eAAe,CAACwC,MAAM,CAAC;EACzB,CAAC;;EAED;EACA,MAAME,gBAAgB,GAAIC,eAAe,IAAK;IAC5ClD,WAAW,CAACD,QAAQ,CAAC0B,GAAG,CAACf,IAAI,IAC3BA,IAAI,CAACT,EAAE,KAAK,sBAAsB,GAC9B;MACE,GAAGS,IAAI;MACPN,MAAM,EAAE;QACN,GAAGM,IAAI,CAACN,MAAM;QACdC,UAAU,EAAE6C,eAAe,CAACf,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAACP,CAAC,IAAIA,CAAC,CAAC,CAAC;MACvD;IACF,CAAC,GACDnB,IACN,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMyC,WAAW,GAAGA,CAACzD,IAAI,EAAE0D,IAAI,GAAG,EAAE,EAAEC,IAAI,GAAG,EAAE,KAAK;IAClD,IAAI,CAAC3D,IAAI,EAAE,OAAO2D,IAAI;IAEtB,IAAI3D,IAAI,CAAC4B,IAAI,KAAK,oBAAoB,IAAI5B,IAAI,CAAC4B,IAAI,KAAK,sBAAsB,EAAE;MAC9E+B,IAAI,CAAClC,IAAI,CAAC;QACRiC,IAAI;QACJhC,QAAQ,EAAE1B,IAAI,CAAC0B,QAAQ;QACvBC,SAAS,EAAE3B,IAAI,CAAC2B,SAAS;QACzBC,IAAI,EAAE5B,IAAI,CAAC4B,IAAI;QACfuB,QAAQ,EAAEnD,IAAI,CAACmD;MACjB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAItB,KAAK,CAACC,OAAO,CAAC9B,IAAI,CAAC,EAAE;MAC9BA,IAAI,CAACe,OAAO,CAAC,CAACiB,IAAI,EAAE4B,KAAK,KAAK;QAC5B,MAAMC,QAAQ,GAAGH,IAAI,GAAG,GAAGA,IAAI,IAAIE,KAAK,GAAG,GAAG,IAAIA,KAAK,GAAG;QAC1DH,WAAW,CAACzB,IAAI,EAAE6B,QAAQ,EAAEF,IAAI,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC,MAAM,IAAI,OAAO3D,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,IAAI,EAAE;MACpD8D,MAAM,CAACC,OAAO,CAAC/D,IAAI,CAAC,CAACe,OAAO,CAAC,CAAC,CAACkB,GAAG,EAAET,KAAK,CAAC,KAAK;QAC7C,MAAMwC,OAAO,GAAGN,IAAI,GAAG,GAAGA,IAAI,IAAIzB,GAAG,EAAE,GAAGA,GAAG;QAC7CwB,WAAW,CAACjC,KAAK,EAAEwC,OAAO,EAAEL,IAAI,CAAC;MACnC,CAAC,CAAC;IACJ,CAAC,MAAM,IAAID,IAAI,EAAE;MACf;MACAC,IAAI,CAAClC,IAAI,CAAC;QACRiC,IAAI;QACJhC,QAAQ,EAAE1B,IAAI;QACd2B,SAAS,EAAE;MACb,CAAC,CAAC;IACJ;IAEA,OAAOgC,IAAI;EACb,CAAC;EAED,oBACE7D,OAAA;IAAKmE,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCpE,OAAA;MAAKmE,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBAEhCpE,OAAA;QAAKmE,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxBpE,OAAA;UAAAoE,QAAA,EAAI;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChBxE,OAAA;UAAKmE,SAAS,EAAC,cAAc;UAAAC,QAAA,EAC1B/D,aAAa,gBACZL,OAAA;YAAOmE,SAAS,EAAC,YAAY;YAAAC,QAAA,eAC3BpE,OAAA;cAAAoE,QAAA,EACGT,WAAW,CAACtD,aAAa,CAAC,CAAC4B,GAAG,CAAC,CAACwC,GAAG,EAAEX,KAAK,kBACzC9D,OAAA;gBAAAoE,QAAA,gBACEpE,OAAA;kBAAImE,SAAS,EAAC,eAAe;kBAAAC,QAAA,EAC1B,OAAOK,GAAG,CAAC7C,QAAQ,KAAK,QAAQ,gBAC/B5B,OAAA;oBAAK0E,uBAAuB,EAAE;sBAC5BC,MAAM,EAAEF,GAAG,CAAC7C,QAAQ,CAACU,OAAO,CAC1B,4BAA4B,EAC5B,2CACF;oBACF;kBAAE;oBAAA+B,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAE,CAAC,GAELI,MAAM,CAACH,GAAG,CAAC7C,QAAQ;gBACpB;kBAAAyC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC,eACLxE,OAAA;kBAAImE,SAAS,EAAC,gBAAgB;kBAAAC,QAAA,EAC3BK,GAAG,CAAC5C,SAAS,IAAI4C,GAAG,CAAC5C,SAAS,CAACgD,MAAM,GAAG,CAAC,gBACxC7E,OAAA;oBAAKmE,SAAS,EAAC,kBAAkB;oBAAAC,QAAA,EAC9BK,GAAG,CAAC5C,SAAS,CAACI,GAAG,CAAC,CAACiB,GAAG,EAAE4B,GAAG,kBAC1B9E,OAAA;sBAAgBmE,SAAS,EAAC,WAAW;sBAAAC,QAAA,EAAElB;oBAAG,GAA/B4B,GAAG;sBAAAT,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAmC,CAClD;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACC,CAAC,gBAENxE,OAAA;oBAAMmE,SAAS,EAAC,WAAW;oBAAAC,QAAA,EAAC;kBAAQ;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAM;gBAC3C;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACC,CAAC;cAAA,GAvBEV,KAAK;gBAAAO,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAwBV,CACL;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACG;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACH,CAAC,gBAERxE,OAAA;YAAKmE,SAAS,EAAC,SAAS;YAAAC,QAAA,EAAC;UAAa;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK;QAC5C;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,eAGNxE,OAAA;QAAKmE,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC7BpE,OAAA;UAAAoE,QAAA,EAAI;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACdxE,OAAA;UAAKmE,SAAS,EAAC,eAAe;UAAAC,QAAA,GAC3B7D,QAAQ,CAAC0B,GAAG,CAAC,CAACf,IAAI,EAAE4C,KAAK,kBACxB9D,OAAA;YAEEmE,SAAS,EAAE,iBAAiBjD,IAAI,CAACP,MAAM,GAAG,QAAQ,GAAG,UAAU,IAAIG,YAAY,KAAKI,IAAI,CAACT,EAAE,GAAG,UAAU,GAAG,EAAE,EAAG;YAChHsE,OAAO,EAAEA,CAAA,KAAMvB,UAAU,CAACtC,IAAI,CAACT,EAAE,CAAE;YAAA2D,QAAA,gBAEnCpE,OAAA;cAAKmE,SAAS,EAAC,aAAa;cAAAC,QAAA,EAAEN,KAAK,GAAG;YAAC;cAAAO,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eAC9CxE,OAAA;cAAKmE,SAAS,EAAC,cAAc;cAAAC,QAAA,gBAC3BpE,OAAA;gBAAKmE,SAAS,EAAC,YAAY;gBAAAC,QAAA,EAAElD,IAAI,CAACR;cAAI;gBAAA2D,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC,eAC7CxE,OAAA;gBAAKmE,SAAS,EAAC,cAAc;gBAAAC,QAAA,eAC3BpE,OAAA;kBAAOmE,SAAS,EAAC,QAAQ;kBAAAC,QAAA,gBACvBpE,OAAA;oBACE8B,IAAI,EAAC,UAAU;oBACfkD,OAAO,EAAE9D,IAAI,CAACP,MAAO;oBACrBsE,QAAQ,EAAEA,CAAA,KAAM3B,gBAAgB,CAACpC,IAAI,CAACT,EAAE,CAAE;oBAC1CsE,OAAO,EAAGG,CAAC,IAAKA,CAAC,CAACC,eAAe,CAAC;kBAAE;oBAAAd,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACrC,CAAC,eACFxE,OAAA;oBAAMmE,SAAS,EAAC;kBAAc;oBAAAE,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAO,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACjC;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACL,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CAAC,EACL1D,YAAY,KAAKI,IAAI,CAACT,EAAE,IAAIS,IAAI,CAACT,EAAE,KAAK,sBAAsB,iBAC7DT,OAAA;cAAKmE,SAAS,EAAC,aAAa;cAAAC,QAAA,gBAC1BpE,OAAA;gBAAKmE,SAAS,EAAC,YAAY;gBAAAC,QAAA,gBACzBpE,OAAA;kBAAAoE,QAAA,EAAO;gBAAI;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAO,CAAC,eACnBxE,OAAA;kBACE8B,IAAI,EAAC,MAAM;kBACXJ,KAAK,EAAER,IAAI,CAACN,MAAM,CAACC,UAAU,CAAC0B,IAAI,CAAC,EAAE,CAAE;kBACvC0C,QAAQ,EAAGC,CAAC,IAAKzB,gBAAgB,CAACyB,CAAC,CAACE,MAAM,CAAC1D,KAAK,CAAE;kBAClDyC,SAAS,EAAC,iBAAiB;kBAC3BkB,WAAW,EAAC,8CAAgB;kBAC5BN,OAAO,EAAGG,CAAC,IAAKA,CAAC,CAACC,eAAe,CAAC;gBAAE;kBAAAd,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACrC,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACC,CAAC,eACNxE,OAAA;gBAAKmE,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,GAAC,0GACN,eAAApE,OAAA;kBAAAoE,QAAA,EAAM;gBAAC;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC,KAAC,eAAAxE,OAAA;kBAAAoE,QAAA,EAAM;gBAAE;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAM,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACnD,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACH,CACN;UAAA,GApCItD,IAAI,CAACT,EAAE;YAAA4D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAqCT,CACN,CAAC,eAEFxE,OAAA;YAAQmE,SAAS,EAAC,UAAU;YAAAC,QAAA,EAAC;UAE7B;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eAENxE,OAAA;UAAKmE,SAAS,EAAC,kBAAkB;UAAAC,QAAA,eAC/BpE,OAAA;YAAQmE,SAAS,EAAC,cAAc;YAACY,OAAO,EAAE5E,OAAQ;YAAAiE,QAAA,EAAC;UAEnD;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENxE,OAAA;MAAOsF,GAAG;MAAAlB,QAAA,EAAE;AAClpE,EAAA,CAtkBIH,oBAAoB;AAAAsF,EAAA,GAApBtF,oBAAoB;AAwkB1B,eAAeA,oBAAoB;AAAC,IAAAsF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}