{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationList = ({\n  channel,\n  selectedHeader,\n  onCombinationSelect,\n  selectedCombination\n}) => {\n  _s();\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining data for test mode\n          generateMiningData(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining data from actual response\n          generateMiningData(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningData(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Function to generate mining data from header combinations\n  const generateMiningData = combinationData => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Step 3: Filter low frequency items and sort by frequency\n    const minSupport = Math.max(2, Math.floor(transactions.length * 0.1)); // At least 10% support\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupport).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Step 4: Find frequent patterns and their support\n    const patterns = {};\n\n    // First add single items\n    frequentItems.forEach(item => {\n      patterns[item] = {\n        support: itemCounts[item],\n        items: [item],\n        children: {}\n      };\n    });\n\n    // Then find frequent pairs\n    for (let i = 0; i < frequentItems.length; i++) {\n      const item1 = frequentItems[i];\n      for (let j = i + 1; j < frequentItems.length; j++) {\n        const item2 = frequentItems[j];\n        let pairCount = 0;\n\n        // Count co-occurrences\n        transactions.forEach(transaction => {\n          if (transaction.includes(item1) && transaction.includes(item2)) {\n            pairCount++;\n          }\n        });\n\n        // Add if frequent enough\n        if (pairCount >= minSupport) {\n          // Add as child of item1\n          patterns[item1].children[item2] = {\n            support: pairCount,\n            items: [item1, item2],\n            children: {}\n          };\n\n          // Find frequent triplets with this pair\n          for (let k = j + 1; k < frequentItems.length; k++) {\n            const item3 = frequentItems[k];\n            let tripletCount = 0;\n\n            // Count co-occurrences\n            transactions.forEach(transaction => {\n              if (transaction.includes(item1) && transaction.includes(item2) && transaction.includes(item3)) {\n                tripletCount++;\n              }\n            });\n\n            // Add if frequent enough\n            if (tripletCount >= minSupport) {\n              patterns[item1].children[item2].children[item3] = {\n                support: tripletCount,\n                items: [item1, item2, item3],\n                children: {}\n              };\n            }\n          }\n        }\n      }\n    }\n\n    // Convert to array format for rendering\n    const result = frequentItems.map(item => ({\n      id: item,\n      name: item,\n      support: itemCounts[item],\n      children: Object.keys(patterns[item].children).map(child => ({\n        id: `${item}-${child}`,\n        name: child,\n        support: patterns[item].children[child].support,\n        children: Object.keys(patterns[item].children[child].children || {}).map(grandchild => ({\n          id: `${item}-${child}-${grandchild}`,\n          name: grandchild,\n          support: patterns[item].children[child].children[grandchild].support,\n          children: []\n        }))\n      }))\n    }));\n    setMiningData(result);\n\n    // Initialize expanded state for top-level nodes\n    const initialExpanded = {};\n    result.slice(0, 3).forEach(node => {\n      initialExpanded[node.id] = true;\n    });\n    setExpandedNodes(initialExpanded);\n  };\n  const handleCombinationClick = combination => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = headerGroup => {\n    if (!headerGroup) return null;\n    const headers = headerGroup.split('|');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-tags\",\n      children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"similarity-tag\",\n        children: header\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n\n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n\n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningData(null);\n    }\n  };\n\n  // Render a mining node with its children\n  const renderMiningNode = (node, depth = 0) => {\n    const isExpanded = expandedNodes[node.id];\n    const hasChildren = node.children && node.children.length > 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-node\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-node-header\",\n        style: {\n          paddingLeft: `${depth * 16}px`\n        },\n        onClick: () => hasChildren && toggleNode(node.id),\n        children: [hasChildren && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"toggle-icon\",\n          children: isExpanded ? '▼' : '►'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"node-name\",\n          children: node.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"node-support\",\n          children: node.support\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), isExpanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-node-children\",\n        children: node.children.map(child => renderMiningNode(child, depth + 1))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-title\",\n        children: !testMode && selectedHeader ? `헤더명 조합 목록: ${selectedHeader}` : '헤더명 조합 목록'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-mode-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Test Mode \", testMode ? 'ON' : 'OFF']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: testMode,\n            onChange: toggleTestMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'combination' ? 'active' : ''}`,\n        onClick: () => setActiveTab('combination'),\n        children: \"\\uC870\\uD569\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'mining' ? 'active' : ''}`,\n        onClick: () => setActiveTab('mining'),\n        children: \"\\uB9C8\\uC774\\uB2DD\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 7\n    }, this), activeTab === 'combination' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }, this) : combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-content\",\n        children: combinationHeaders.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column-item ${selectedCombination === item.header_group ? 'selected' : ''}`,\n          onClick: () => handleCombinationClick(item.header_group),\n          children: renderHeaderGroupAsTags(item.header_group)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"테스트 모드가 활성화되었습니다.\" : \"채널과 헤더를 선택해주세요.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 13\n      }, this) : miningData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mining-table-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-item\",\n              children: \"\\uD5E4\\uB354\\uBA85\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"header-item\",\n              children: \"\\uBE48\\uB3C4\\uC218\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 316,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mining-table-body\",\n            children: miningData.map(node => renderMiningNode(node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-explanation\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"FP Growth \\uC54C\\uACE0\\uB9AC\\uC998\\uC73C\\uB85C \\uBC1C\\uACAC\\uD55C \\uBE48\\uBC1C \\uD328\\uD134\\uC785\\uB2C8\\uB2E4:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uD5E4\\uB354\\uBA85: \\uD328\\uD134\\uC5D0 \\uD3EC\\uD568\\uB41C \\uD5E4\\uB354\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uBE48\\uB3C4\\uC218: \\uD328\\uD134\\uC774 \\uBC1C\\uC0DD\\uD55C \\uD69F\\uC218\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\u25B6 \\uC544\\uC774\\uCF58\\uC744 \\uD074\\uB9AD\\uD558\\uC5EC \\uC138\\uBD80 \\uD328\\uD134\\uC744 \\uD655\\uC778\\uD558\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 FP Growth 마이닝 결과가 표시됩니다.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-table {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n        }\n        \n        .mining-table-header {\n          display: flex;\n          font-weight: bold;\n          background-color: #f5f5f5;\n          border-bottom: 1px solid #e0e0e0;\n          padding: 8px 12px;\n        }\n        \n        .header-item {\n          flex: 1;\n        }\n        \n        .header-item:last-child {\n          text-align: right;\n          width: 80px;\n          flex: 0 0 80px;\n        }\n        \n        .mining-node {\n          border-bottom: 1px solid #f0f0f0;\n        }\n        \n        .mining-node:last-child {\n          border-bottom: none;\n        }\n        \n        .mining-node-header {\n          display: flex;\n          padding: 8px 12px;\n          cursor: pointer;\n          align-items: center;\n        }\n        \n        .mining-node-header:hover {\n          background-color: #f9f9f9;\n        }\n        \n        .toggle-icon {\n          margin-right: 8px;\n          font-size: 10px;\n          width: 10px;\n        }\n        \n        .node-name {\n          flex: 1;\n        }\n        \n        .node-support {\n          width: 80px;\n          text-align: right;\n          flex: 0 0 80px;\n          font-weight: bold;\n        }\n        \n        .mining-explanation {\n          margin-top: 16px;\n          font-size: 12px;\n          color: #666;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 20px;\n          margin: 8px 0;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationList, \"yMYiiaPVIVzspRugJGIJt9lWjvU=\");\n_c = HeaderCombinationList;\nexport default HeaderCombinationList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationList\");","map":{"version":3,"names":["React","useState","useEffect","fetchHeaderCombinationList","jsxDEV","_jsxDEV","HeaderCombinationList","channel","selectedHeader","onCombinationSelect","selectedCombination","_s","combinationHeaders","setCombinationHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","testMode","setTestMode","miningData","setMiningData","expandedNodes","setExpandedNodes","getCombinationHeaders","response","console","log","list","generateMiningData","headers","Array","isArray","err","message","combinationData","length","transactions","filter","item","header_group","map","split","itemCounts","forEach","transaction","minSupport","Math","max","floor","frequentItems","Object","keys","sort","a","b","patterns","support","items","children","i","item1","j","item2","pairCount","includes","k","item3","tripletCount","result","id","name","child","grandchild","initialExpanded","slice","node","handleCombinationClick","combination","toggleNode","nodeId","prev","renderHeaderGroupAsTags","headerGroup","className","header","index","fileName","_jsxFileName","lineNumber","columnNumber","toggleTestMode","newTestMode","renderMiningNode","depth","isExpanded","hasChildren","style","paddingLeft","onClick","type","checked","onChange","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\n\nconst HeaderCombinationList = ({ channel, selectedHeader, onCombinationSelect, selectedCombination }) => {\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      \n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining data for test mode\n          generateMiningData(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining data from actual response\n          generateMiningData(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningData(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Function to generate mining data from header combinations\n  const generateMiningData = (combinationData) => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Step 3: Filter low frequency items and sort by frequency\n    const minSupport = Math.max(2, Math.floor(transactions.length * 0.1)); // At least 10% support\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupport)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Step 4: Find frequent patterns and their support\n    const patterns = {};\n    \n    // First add single items\n    frequentItems.forEach(item => {\n      patterns[item] = {\n        support: itemCounts[item],\n        items: [item],\n        children: {}\n      };\n    });\n    \n    // Then find frequent pairs\n    for (let i = 0; i < frequentItems.length; i++) {\n      const item1 = frequentItems[i];\n      \n      for (let j = i + 1; j < frequentItems.length; j++) {\n        const item2 = frequentItems[j];\n        let pairCount = 0;\n        \n        // Count co-occurrences\n        transactions.forEach(transaction => {\n          if (transaction.includes(item1) && transaction.includes(item2)) {\n            pairCount++;\n          }\n        });\n        \n        // Add if frequent enough\n        if (pairCount >= minSupport) {\n          // Add as child of item1\n          patterns[item1].children[item2] = {\n            support: pairCount,\n            items: [item1, item2],\n            children: {}\n          };\n          \n          // Find frequent triplets with this pair\n          for (let k = j + 1; k < frequentItems.length; k++) {\n            const item3 = frequentItems[k];\n            let tripletCount = 0;\n            \n            // Count co-occurrences\n            transactions.forEach(transaction => {\n              if (transaction.includes(item1) && \n                  transaction.includes(item2) && \n                  transaction.includes(item3)) {\n                tripletCount++;\n              }\n            });\n            \n            // Add if frequent enough\n            if (tripletCount >= minSupport) {\n              patterns[item1].children[item2].children[item3] = {\n                support: tripletCount,\n                items: [item1, item2, item3],\n                children: {}\n              };\n            }\n          }\n        }\n      }\n    }\n    \n    // Convert to array format for rendering\n    const result = frequentItems.map(item => ({\n      id: item,\n      name: item,\n      support: itemCounts[item],\n      children: Object.keys(patterns[item].children).map(child => ({\n        id: `${item}-${child}`,\n        name: child,\n        support: patterns[item].children[child].support,\n        children: Object.keys(patterns[item].children[child].children || {}).map(grandchild => ({\n          id: `${item}-${child}-${grandchild}`,\n          name: grandchild,\n          support: patterns[item].children[child].children[grandchild].support,\n          children: []\n        }))\n      }))\n    }));\n    \n    setMiningData(result);\n    \n    // Initialize expanded state for top-level nodes\n    const initialExpanded = {};\n    result.slice(0, 3).forEach(node => {\n      initialExpanded[node.id] = true;\n    });\n    setExpandedNodes(initialExpanded);\n  };\n\n  const handleCombinationClick = (combination) => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = (headerGroup) => {\n    if (!headerGroup) return null;\n    \n    const headers = headerGroup.split('|');\n    return (\n      <div className=\"header-tags\">\n        {headers.map((header, index) => (\n          <span key={index} className=\"similarity-tag\">{header}</span>\n        ))}\n      </div>\n    );\n  };\n\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n    \n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n    \n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningData(null);\n    }\n  };\n\n  // Render a mining node with its children\n  const renderMiningNode = (node, depth = 0) => {\n    const isExpanded = expandedNodes[node.id];\n    const hasChildren = node.children && node.children.length > 0;\n    \n    return (\n      <div key={node.id} className=\"mining-node\">\n        <div \n          className=\"mining-node-header\"\n          style={{ paddingLeft: `${depth * 16}px` }}\n          onClick={() => hasChildren && toggleNode(node.id)}\n        >\n          {hasChildren && (\n            <span className=\"toggle-icon\">\n              {isExpanded ? '▼' : '►'}\n            </span>\n          )}\n          <span className=\"node-name\">{node.name}</span>\n          <span className=\"node-support\">{node.support}</span>\n        </div>\n        \n        {isExpanded && hasChildren && (\n          <div className=\"mining-node-children\">\n            {node.children.map(child => renderMiningNode(child, depth + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"column-container\">\n      <div className=\"column-title-container\">\n        <h2 className=\"column-title\">\n          {!testMode && selectedHeader \n            ? `헤더명 조합 목록: ${selectedHeader}` \n            : '헤더명 조합 목록'}\n        </h2>\n        <div className=\"test-mode-toggle\">\n          <label className=\"toggle-label\">\n            <span>Test Mode {testMode ? 'ON' : 'OFF'}</span>\n            <input \n              type=\"checkbox\" \n              checked={testMode}\n              onChange={toggleTestMode}\n            />\n            <span className=\"toggle-slider\"></span>\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'combination' ? 'active' : ''}`}\n          onClick={() => setActiveTab('combination')}\n        >\n          조합뷰\n        </button>\n        <button \n          className={`tab ${activeTab === 'mining' ? 'active' : ''}`}\n          onClick={() => setActiveTab('mining')}\n        >\n          마이닝뷰\n        </button>\n      </div>\n      \n      {activeTab === 'combination' ? (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationHeaders.length > 0 ? (\n            <div className=\"column-content\">\n              {combinationHeaders.map((item, index) => (\n                <div\n                  key={index}\n                  className={`column-item ${selectedCombination === item.header_group ? 'selected' : ''}`}\n                  onClick={() => handleCombinationClick(item.header_group)}\n                >\n                  {renderHeaderGroupAsTags(item.header_group)}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"테스트 모드가 활성화되었습니다.\" \n                : \"채널과 헤더를 선택해주세요.\"}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : miningData ? (\n            <div className=\"mining-view\">\n              <div className=\"mining-table\">\n                <div className=\"mining-table-header\">\n                  <div className=\"header-item\">헤더명</div>\n                  <div className=\"header-item\">빈도수</div>\n                </div>\n                <div className=\"mining-table-body\">\n                  {miningData.map(node => renderMiningNode(node))}\n                </div>\n              </div>\n              <div className=\"mining-explanation\">\n                <p>FP Growth 알고리즘으로 발견한 빈발 패턴입니다:</p>\n                <ul>\n                  <li>헤더명: 패턴에 포함된 헤더</li>\n                  <li>빈도수: 패턴이 발생한 횟수</li>\n                  <li>▶ 아이콘을 클릭하여 세부 패턴을 확인하세요</li>\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"마이닝 데이터를 로딩 중입니다...\" \n                : \"채널과 헤더를 선택하면 FP Growth 마이닝 결과가 표시됩니다.\"}\n            </div>\n          )}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-table {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n        }\n        \n        .mining-table-header {\n          display: flex;\n          font-weight: bold;\n          background-color: #f5f5f5;\n          border-bottom: 1px solid #e0e0e0;\n          padding: 8px 12px;\n        }\n        \n        .header-item {\n          flex: 1;\n        }\n        \n        .header-item:last-child {\n          text-align: right;\n          width: 80px;\n          flex: 0 0 80px;\n        }\n        \n        .mining-node {\n          border-bottom: 1px solid #f0f0f0;\n        }\n        \n        .mining-node:last-child {\n          border-bottom: none;\n        }\n        \n        .mining-node-header {\n          display: flex;\n          padding: 8px 12px;\n          cursor: pointer;\n          align-items: center;\n        }\n        \n        .mining-node-header:hover {\n          background-color: #f9f9f9;\n        }\n        \n        .toggle-icon {\n          margin-right: 8px;\n          font-size: 10px;\n          width: 10px;\n        }\n        \n        .node-name {\n          flex: 1;\n        }\n        \n        .node-support {\n          width: 80px;\n          text-align: right;\n          flex: 0 0 80px;\n          font-weight: bold;\n        }\n        \n        .mining-explanation {\n          margin-top: 16px;\n          font-size: 12px;\n          color: #666;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 20px;\n          margin: 8px 0;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default HeaderCombinationList; "],"mappings":"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,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,eAEDvF,OAAA;MAAOoG,GAAG;MAAA5C,QAAA,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACjF,EAAA,CAlaIL,qBAAqB;AAAAoG,EAAA,GAArBpG,qBAAqB;AAoa3B,eAAeA,qBAAqB;AAAC,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}