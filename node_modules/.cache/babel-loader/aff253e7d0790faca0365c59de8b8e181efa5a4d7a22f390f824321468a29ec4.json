{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationList = ({\n  channel,\n  selectedHeader,\n  onCombinationSelect,\n  selectedCombination\n}) => {\n  _s();\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('eclat'); // 'eclat' or 'fpgrowth'\n  const [minSupport, setMinSupport] = useState(0.1); // 10% default\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining data for test mode with selected algorithm\n          generateMiningData(response.list || [], algorithm);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining data from actual response with selected algorithm\n          generateMiningData(response.list || [], algorithm);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningData(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode, algorithm, minSupport]); // Dependencies updated\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (activeTab === 'mining' && miningData && svgRef.current) {\n      renderMiningNetwork();\n    }\n  }, [miningData, activeTab, expandedNodes, highlightedPattern]);\n\n  // Function to render the network visualization\n  const renderMiningNetwork = () => {\n    if (!svgRef.current || !miningData) return;\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    const svgWidth = svg.clientWidth || 300;\n    const svgHeight = 500;\n    svg.setAttribute('height', `${svgHeight}px`);\n\n    // Create a force-directed graph layout\n    // For simplicity, we'll manually position nodes in a more readable layout\n\n    // Get all nodes at different levels (no root node)\n    const nodes = [];\n    const links = [];\n\n    // Helper function to get a node's unique ID\n    const getNodeId = node => `node-${node.id}`;\n\n    // Calculate node positions - arrange in multiple rows\n    const TOP_MARGIN = 40;\n    const horizontalSpacing = svgWidth / (Math.min(miningData.length, 5) + 1);\n    const verticalSpacing = 70;\n\n    // Add single items (level 1)\n    miningData.forEach((node, i) => {\n      // Position in grid layout - multiple rows if needed\n      const row = Math.floor(i / 5);\n      const col = i % 5;\n      const x = horizontalSpacing * (col + 1);\n      const y = TOP_MARGIN + row * verticalSpacing * 1.5;\n      nodes.push({\n        ...node,\n        x,\n        y,\n        radius: Math.min(Math.max(node.support / 2, 6), 12),\n        // Size by support \n        level: 1,\n        id: getNodeId(node)\n      });\n\n      // Add second level nodes if expanded\n      if (expandedNodes[node.id] && node.children && node.children.length > 0) {\n        const childSpacing = 140 / (node.children.length + 1);\n        node.children.forEach((child, j) => {\n          // Position children below their parent\n          const childX = x - 70 + childSpacing * (j + 1);\n          const childY = y + verticalSpacing;\n          nodes.push({\n            ...child,\n            x: childX,\n            y: childY,\n            radius: Math.min(Math.max(child.support / 2, 5), 10),\n            level: 2,\n            id: getNodeId(child)\n          });\n\n          // Add link from parent to child\n          links.push({\n            source: getNodeId(node),\n            target: getNodeId(child),\n            value: child.support\n          });\n\n          // Add third level nodes if expanded\n          if (expandedNodes[child.id] && child.children && child.children.length > 0) {\n            const grandchildSpacing = 120 / (child.children.length + 1);\n            child.children.forEach((grandchild, k) => {\n              const grandchildX = childX - 60 + grandchildSpacing * (k + 1);\n              const grandchildY = childY + verticalSpacing;\n              nodes.push({\n                ...grandchild,\n                x: grandchildX,\n                y: grandchildY,\n                radius: Math.min(Math.max(grandchild.support / 2, 4), 8),\n                level: 3,\n                id: getNodeId(grandchild)\n              });\n\n              // Add link from child to grandchild\n              links.push({\n                source: getNodeId(child),\n                target: getNodeId(grandchild),\n                value: grandchild.support\n              });\n            });\n          }\n        });\n      }\n    });\n\n    // Create a container for the graph\n    const graphContainer = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(graphContainer);\n\n    // Create links\n    links.forEach(link => {\n      const source = nodes.find(n => n.id === link.source);\n      const target = nodes.find(n => n.id === link.target);\n      if (source && target) {\n        const isHighlighted = highlightedPattern && highlightedPattern.includes(source.id.replace('node-', '')) && highlightedPattern.includes(target.id.replace('node-', ''));\n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        line.setAttribute('x1', source.x);\n        line.setAttribute('y1', source.y);\n        line.setAttribute('x2', target.x);\n        line.setAttribute('y2', target.y);\n        line.setAttribute('stroke', isHighlighted ? '#ff7f0e' : '#aaa');\n        line.setAttribute('stroke-width', isHighlighted ? '2' : '1.5');\n        line.setAttribute('stroke-opacity', '0.6');\n        graphContainer.appendChild(line);\n      }\n    });\n\n    // Create nodes\n    nodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x},${node.y})`);\n\n      // Node circle\n      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      circle.setAttribute('r', node.radius);\n\n      // Highlight if part of the highlighted pattern\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id.replace('node-', ''));\n\n      // Color based on level\n      const colors = ['#7b68ee', '#3cb371', '#ff7f50'];\n      let fillColor = colors[node.level - 1];\n      if (isHighlighted) {\n        fillColor = '#ff7f0e';\n      }\n      circle.setAttribute('fill', fillColor);\n      circle.setAttribute('stroke', '#fff');\n      circle.setAttribute('stroke-width', '1.5');\n\n      // Make interactive\n      if (node.children && node.children.length > 0) {\n        nodeGroup.style.cursor = 'pointer';\n        nodeGroup.addEventListener('click', () => {\n          toggleNode(node.id.replace('node-', ''));\n        });\n      }\n\n      // Hover effect\n      nodeGroup.addEventListener('mouseenter', () => {\n        const pattern = getNodeFullPattern(node, nodes, links);\n        setHighlightedPattern(pattern);\n      });\n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n      });\n\n      // Expansion indicator\n      if (node.children && node.children.length > 0) {\n        const isExpanded = expandedNodes[node.id.replace('node-', '')];\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = isExpanded ? '−' : '+';\n        indicator.setAttribute('x', 0);\n        indicator.setAttribute('y', 4);\n        indicator.setAttribute('font-size', '10px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#fff');\n        indicator.setAttribute('text-anchor', 'middle');\n        nodeGroup.appendChild(indicator);\n      }\n\n      // Node label - show above the node\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 0);\n      text.setAttribute('y', -node.radius - 5);\n      text.setAttribute('font-size', '11px');\n      text.setAttribute('fill', '#333');\n      text.setAttribute('text-anchor', 'middle');\n      text.textContent = node.name;\n\n      // Support count - show below the node\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', 0);\n      supportText.setAttribute('y', node.radius + 12);\n      supportText.setAttribute('font-size', '10px');\n      supportText.setAttribute('fill', '#666');\n      supportText.setAttribute('text-anchor', 'middle');\n      supportText.textContent = node.support;\n      nodeGroup.appendChild(circle);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      graphContainer.appendChild(nodeGroup);\n    });\n  };\n\n  // Helper to get the full pattern for highlighted nodes\n  const getNodeFullPattern = (node, nodes, links) => {\n    const pattern = [node.id.replace('node-', '')];\n\n    // Find all connected nodes\n    const findConnectedNodes = (nodeId, visited = new Set()) => {\n      visited.add(nodeId);\n      links.forEach(link => {\n        if (link.source === nodeId && !visited.has(link.target)) {\n          pattern.push(link.target.replace('node-', ''));\n          findConnectedNodes(link.target, visited);\n        } else if (link.target === nodeId && !visited.has(link.source)) {\n          pattern.push(link.source.replace('node-', ''));\n          findConnectedNodes(link.source, visited);\n        }\n      });\n    };\n    findConnectedNodes(node.id);\n    return pattern;\n  };\n\n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold\n    const minSupportCount = Math.max(2, Math.floor(transactions.length * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n\n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n\n      // Step 2: Find frequent itemsets using ECLAT recursion\n      const frequentItemsets = {};\n\n      // Initialize with single items\n      frequentItems.forEach(item => {\n        const support = tidLists[item].size;\n        frequentItemsets[item] = {\n          support,\n          tids: tidLists[item],\n          children: {}\n        };\n      });\n\n      // Recursive function to find frequent itemsets\n      const eclat = (prefix, tidList, level, parent) => {\n        if (level > 3) return; // Limit depth for visualization purposes\n\n        // Find extensions with all items that come after the prefix's last item\n        const lastItem = prefix[prefix.length - 1];\n        const lastItemIndex = frequentItems.indexOf(lastItem);\n        for (let i = lastItemIndex + 1; i < frequentItems.length; i++) {\n          const item = frequentItems[i];\n          const itemTids = tidLists[item];\n\n          // Compute intersection\n          const intersection = new Set([...tidList].filter(tid => itemTids.has(tid)));\n\n          // If support is high enough, add to frequent itemsets\n          if (intersection.size >= minSupportCount) {\n            const newPrefix = [...prefix, item];\n            const newPrefixStr = item; // Just use the extension item as key\n\n            parent.children[newPrefixStr] = {\n              support: intersection.size,\n              tids: intersection,\n              children: {}\n            };\n\n            // Recursively find extensions of this new prefix\n            eclat(newPrefix, intersection, level + 1, parent.children[newPrefixStr]);\n          }\n        }\n      };\n\n      // Start ECLAT recursion for each single item\n      frequentItems.forEach(item => {\n        eclat([item], tidLists[item], 1, frequentItemsets[item]);\n      });\n\n      // Convert to array format for visualization\n      const result = frequentItems.map(item => ({\n        id: item,\n        name: item,\n        support: tidLists[item].size,\n        children: Object.keys(frequentItemsets[item].children).map(child => ({\n          id: `${item}-${child}`,\n          name: child,\n          support: frequentItemsets[item].children[child].support,\n          children: Object.keys(frequentItemsets[item].children[child].children || {}).map(grandchild => ({\n            id: `${item}-${child}-${grandchild}`,\n            name: grandchild,\n            support: frequentItemsets[item].children[child].children[grandchild].support,\n            children: []\n          }))\n        }))\n      }));\n      setMiningData(result);\n    } else {\n      // FP GROWTH ALGORITHM - IMPROVED VERSION\n\n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n\n      // Step 4: Build FP-Tree\n      const fpTree = {\n        name: \"root\",\n        count: 0,\n        children: {},\n        nodeLinks: {} // Header table node links\n      };\n\n      // Initialize header table\n      const headerTable = {};\n      frequentItems.forEach(item => {\n        headerTable[item] = {\n          count: itemCounts[item],\n          nodeLink: null\n        };\n      });\n\n      // Insert a transaction into the FP-Tree\n      const insertTransaction = (transaction, tree, count = 1) => {\n        if (transaction.length === 0) return;\n        const item = transaction[0];\n\n        // Create node if it doesn't exist\n        if (!tree.children[item]) {\n          tree.children[item] = {\n            name: item,\n            count: 0,\n            children: {},\n            parent: tree,\n            nextSameItem: null\n          };\n\n          // Update header table node links\n          if (!headerTable[item].nodeLink) {\n            headerTable[item].nodeLink = tree.children[item];\n          } else {\n            let current = headerTable[item].nodeLink;\n            while (current.nextSameItem) {\n              current = current.nextSameItem;\n            }\n            current.nextSameItem = tree.children[item];\n          }\n        }\n\n        // Increment count\n        tree.children[item].count += count;\n\n        // Insert remaining items\n        if (transaction.length > 1) {\n          insertTransaction(transaction.slice(1), tree.children[item], count);\n        }\n      };\n\n      // Insert all transactions\n      orderedTransactions.forEach(transaction => {\n        insertTransaction(transaction, fpTree);\n      });\n\n      // Step 5: Mine patterns using FP-Growth\n      const patterns = {};\n\n      // Mine patterns with a suffix\n      const minePatterns = (headerTable, conditionalBase, suffix = []) => {\n        // Get items in descending order of frequency\n        const items = Object.keys(headerTable).sort((a, b) => headerTable[b].count - headerTable[a].count);\n        for (const item of items) {\n          // New frequent itemset found\n          const newSuffix = [item, ...suffix];\n          const supportCount = headerTable[item].count;\n\n          // Store pattern\n          const patternKey = newSuffix.join('-');\n          patterns[patternKey] = {\n            items: newSuffix,\n            support: supportCount\n          };\n\n          // Build conditional pattern base\n          const conditionalPatternBase = [];\n          let node = headerTable[item].nodeLink;\n          while (node) {\n            // Traverse upward to get the path\n            const path = [];\n            let prefixSupport = node.count;\n            let parent = node.parent;\n            while (parent && parent.name !== \"root\") {\n              path.unshift(parent.name);\n              parent = parent.parent;\n            }\n            if (path.length > 0) {\n              conditionalPatternBase.push({\n                path,\n                count: prefixSupport\n              });\n            }\n            node = node.nextSameItem;\n          }\n\n          // Build conditional FP-Tree\n          if (conditionalPatternBase.length > 0) {\n            const newConditionalBase = {};\n\n            // Count items in the conditional pattern base\n            conditionalPatternBase.forEach(({\n              path,\n              count\n            }) => {\n              path.forEach(pathItem => {\n                newConditionalBase[pathItem] = (newConditionalBase[pathItem] || 0) + count;\n              });\n            });\n\n            // Filter items by minimum support\n            const newHeaderTable = {};\n            Object.keys(newConditionalBase).forEach(item => {\n              if (newConditionalBase[item] >= minSupportCount) {\n                newHeaderTable[item] = {\n                  count: newConditionalBase[item],\n                  nodeLink: null\n                };\n              }\n            });\n\n            // Recursively mine with the new conditional tree\n            if (Object.keys(newHeaderTable).length > 0) {\n              minePatterns(newHeaderTable, conditionalPatternBase, newSuffix);\n            }\n          }\n        }\n      };\n\n      // Start mining\n      minePatterns(headerTable, []);\n\n      // Convert to hierarchical format for visualization\n      const result = frequentItems.map(item => {\n        // Find all patterns that start with this item\n        const itemPatterns = Object.values(patterns).filter(p => p.items[0] === item);\n\n        // Group by second item\n        const children = {};\n        itemPatterns.forEach(pattern => {\n          if (pattern.items.length > 1) {\n            const secondItem = pattern.items[1];\n            if (!children[secondItem]) {\n              children[secondItem] = {\n                support: pattern.support,\n                children: {}\n              };\n            }\n\n            // Add third-level items\n            if (pattern.items.length > 2) {\n              const thirdItem = pattern.items[2];\n              children[secondItem].children[thirdItem] = {\n                support: pattern.support,\n                children: {}\n              };\n            }\n          }\n        });\n        return {\n          id: item,\n          name: item,\n          support: itemCounts[item],\n          children: Object.keys(children).map(childItem => ({\n            id: `${item}-${childItem}`,\n            name: childItem,\n            support: children[childItem].support,\n            children: Object.keys(children[childItem].children).map(grandchildItem => ({\n              id: `${item}-${childItem}-${grandchildItem}`,\n              name: grandchildItem,\n              support: children[childItem].children[grandchildItem].support,\n              children: []\n            }))\n          }))\n        };\n      });\n      setMiningData(result);\n    }\n\n    // Initialize expanded state for top-level nodes\n    const initialExpanded = {};\n    if (miningData) {\n      miningData.slice(0, 5).forEach(node => {\n        initialExpanded[node.id] = true;\n      });\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = algo => {\n    setAlgorithm(algo);\n  };\n\n  // Change minimum support threshold\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  const handleCombinationClick = combination => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = headerGroup => {\n    if (!headerGroup) return null;\n    const headers = headerGroup.split('|');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-tags\",\n      children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"similarity-tag\",\n        children: header\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 653,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n\n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n\n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningData(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-title\",\n        children: !testMode && selectedHeader ? `헤더명 조합 목록: ${selectedHeader}` : '헤더명 조합 목록'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-mode-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Test Mode \", testMode ? 'ON' : 'OFF']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: testMode,\n            onChange: toggleTestMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 677,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'combination' ? 'active' : ''}`,\n        onClick: () => setActiveTab('combination'),\n        children: \"\\uC870\\uD569\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'mining' ? 'active' : ''}`,\n        onClick: () => setActiveTab('mining'),\n        children: \"\\uB9C8\\uC774\\uB2DD\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 703,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 696,\n      columnNumber: 7\n    }, this), activeTab === 'combination' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 13\n      }, this) : combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-content\",\n        children: combinationHeaders.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column-item ${selectedCombination === item.header_group ? 'selected' : ''}`,\n          onClick: () => handleCombinationClick(item.header_group),\n          children: renderHeaderGroupAsTags(item.header_group)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 720,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 718,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"테스트 모드가 활성화되었습니다.\" : \"채널과 헤더를 선택해주세요.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 740,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 13\n      }, this) : miningData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-controls\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"algorithm-selector\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: `algorithm-btn ${algorithm === 'eclat' ? 'active' : ''}`,\n              onClick: () => switchAlgorithm('eclat'),\n              children: \"Eclat \\uC54C\\uACE0\\uB9AC\\uC998\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 747,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `algorithm-btn ${algorithm === 'fpgrowth' ? 'active' : ''}`,\n              onClick: () => switchAlgorithm('fpgrowth'),\n              children: \"FP-Growth \\uC54C\\uACE0\\uB9AC\\uC998\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 753,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 746,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"support-control\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4: \", (minSupport * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 761,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.05\",\n              max: \"0.5\",\n              step: \"0.05\",\n              value: minSupport,\n              onChange: handleSupportChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 762,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 760,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-tree-legend\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#7b68ee'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uB2E8\\uC77C \\uD56D\\uBAA9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 776,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#3cb371'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 779,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"2\\uAC1C \\uD56D\\uBAA9 \\uC870\\uD569\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 780,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 778,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#ff7f50'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 783,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"3\\uAC1C \\uD56D\\uBAA9 \\uC870\\uD569\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 784,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 782,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#ff7f0e'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 787,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD558\\uC774\\uB77C\\uC774\\uD2B8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 786,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-tree-svg-container\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"mining-tree-svg\",\n            ref: svgRef,\n            width: \"100%\",\n            height: \"400\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-explanation\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: [algorithm === 'eclat' ? 'Eclat' : 'FP-Growth', \" \\uC54C\\uACE0\\uB9AC\\uC998 \\uD328\\uD134 \\uC2DC\\uAC01\\uD654:\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 802,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uB178\\uB4DC \\uD06C\\uAE30\\uB294 \\uBC1C\\uC0DD \\uBE48\\uB3C4\\uB97C \\uB098\\uD0C0\\uB0C5\\uB2C8\\uB2E4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 804,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uB178\\uB4DC\\uB97C \\uD074\\uB9AD\\uD558\\uC5EC \\uC5F0\\uAD00 \\uD328\\uD134\\uC744 \\uD655\\uC7A5/\\uCD95\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 805,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uB178\\uB4DC\\uC5D0 \\uB9C8\\uC6B0\\uC2A4\\uB97C \\uC62C\\uB9AC\\uBA74 \\uC5F0\\uAD00 \\uD328\\uD134 \\uD558\\uC774\\uB77C\\uC774\\uD2B8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 806,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uB178\\uB4DC \\uC544\\uB798\\uC758 \\uC22B\\uC790\\uB294 \\uD574\\uB2F9 \\uD328\\uD134\\uC758 \\uBC1C\\uC0DD \\uD69F\\uC218\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 807,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 803,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 744,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 738,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-controls {\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          margin-bottom: 12px;\n          background-color: #f8f8f8;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .algorithm-selector {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .algorithm-btn {\n          background: #f0f0f0;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 12px;\n          cursor: pointer;\n        }\n        \n        .algorithm-btn.active {\n          background: #4682b4;\n          color: white;\n          border-color: #4682b4;\n        }\n        \n        .support-control {\n          display: flex;\n          flex-direction: column;\n          font-size: 12px;\n        }\n        \n        .support-control input {\n          width: 100px;\n        }\n        \n        .mining-tree-legend {\n          display: flex;\n          flex-wrap: wrap;\n          padding: 8px;\n          margin-bottom: 8px;\n          border-bottom: 1px solid #eee;\n          font-size: 11px;\n        }\n        \n        .legend-item {\n          display: flex;\n          align-items: center;\n          margin-right: 12px;\n          margin-bottom: 4px;\n        }\n        \n        .legend-color {\n          display: inline-block;\n          width: 10px;\n          height: 10px;\n          border-radius: 50%;\n          margin-right: 4px;\n        }\n        \n        .mining-tree-svg-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #fafafa;\n          flex-grow: 1;\n          min-height: 300px;\n        }\n        \n        .mining-explanation {\n          margin-top: 16px;\n          font-size: 12px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 8px 12px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 20px;\n          margin: 8px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 821,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 676,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationList, \"lsUsunJ35rYXBvFTvZLyArdHhPQ=\");\n_c = HeaderCombinationList;\nexport default HeaderCombinationList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchHeaderCombinationList","jsxDEV","_jsxDEV","HeaderCombinationList","channel","selectedHeader","onCombinationSelect","selectedCombination","_s","combinationHeaders","setCombinationHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","testMode","setTestMode","miningData","setMiningData","expandedNodes","setExpandedNodes","highlightedPattern","setHighlightedPattern","algorithm","setAlgorithm","minSupport","setMinSupport","svgRef","getCombinationHeaders","response","console","log","list","generateMiningData","headers","Array","isArray","err","message","current","renderMiningNetwork","svg","firstChild","removeChild","svgWidth","clientWidth","svgHeight","setAttribute","nodes","links","getNodeId","node","id","TOP_MARGIN","horizontalSpacing","Math","min","length","verticalSpacing","forEach","i","row","floor","col","x","y","push","radius","max","support","level","children","childSpacing","child","j","childX","childY","source","target","value","grandchildSpacing","grandchild","k","grandchildX","grandchildY","graphContainer","document","createElementNS","appendChild","link","find","n","isHighlighted","includes","replace","line","nodeGroup","circle","colors","fillColor","style","cursor","addEventListener","toggleNode","pattern","getNodeFullPattern","isExpanded","indicator","textContent","text","name","supportText","findConnectedNodes","nodeId","visited","Set","add","has","combinationData","algo","transactions","filter","item","header_group","map","split","itemCounts","transaction","minSupportCount","frequentItems","Object","keys","sort","a","b","tidLists","tid","frequentItemsets","size","tids","eclat","prefix","tidList","parent","lastItem","lastItemIndex","indexOf","itemTids","intersection","newPrefix","newPrefixStr","result","orderedTransactions","fpTree","count","nodeLinks","headerTable","nodeLink","insertTransaction","tree","nextSameItem","slice","patterns","minePatterns","conditionalBase","suffix","items","newSuffix","supportCount","patternKey","join","conditionalPatternBase","path","prefixSupport","unshift","newConditionalBase","pathItem","newHeaderTable","itemPatterns","values","p","secondItem","thirdItem","childItem","grandchildItem","initialExpanded","switchAlgorithm","handleSupportChange","e","parseFloat","isNaN","handleCombinationClick","combination","prev","renderHeaderGroupAsTags","headerGroup","className","header","index","fileName","_jsxFileName","lineNumber","columnNumber","toggleTestMode","newTestMode","type","checked","onChange","onClick","toFixed","step","backgroundColor","ref","width","height","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\n\nconst HeaderCombinationList = ({ channel, selectedHeader, onCombinationSelect, selectedCombination }) => {\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('eclat'); // 'eclat' or 'fpgrowth'\n  const [minSupport, setMinSupport] = useState(0.1); // 10% default\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      \n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining data for test mode with selected algorithm\n          generateMiningData(response.list || [], algorithm);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining data from actual response with selected algorithm\n          generateMiningData(response.list || [], algorithm);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningData(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode, algorithm, minSupport]); // Dependencies updated\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (activeTab === 'mining' && miningData && svgRef.current) {\n      renderMiningNetwork();\n    }\n  }, [miningData, activeTab, expandedNodes, highlightedPattern]);\n\n  // Function to render the network visualization\n  const renderMiningNetwork = () => {\n    if (!svgRef.current || !miningData) return;\n\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n\n    const svgWidth = svg.clientWidth || 300;\n    const svgHeight = 500;\n    svg.setAttribute('height', `${svgHeight}px`);\n    \n    // Create a force-directed graph layout\n    // For simplicity, we'll manually position nodes in a more readable layout\n    \n    // Get all nodes at different levels (no root node)\n    const nodes = [];\n    const links = [];\n    \n    // Helper function to get a node's unique ID\n    const getNodeId = (node) => `node-${node.id}`;\n    \n    // Calculate node positions - arrange in multiple rows\n    const TOP_MARGIN = 40;\n    const horizontalSpacing = svgWidth / (Math.min(miningData.length, 5) + 1);\n    const verticalSpacing = 70;\n    \n    // Add single items (level 1)\n    miningData.forEach((node, i) => {\n      // Position in grid layout - multiple rows if needed\n      const row = Math.floor(i / 5);\n      const col = i % 5;\n      const x = horizontalSpacing * (col + 1);\n      const y = TOP_MARGIN + row * verticalSpacing * 1.5;\n      \n      nodes.push({\n        ...node,\n        x,\n        y,\n        radius: Math.min(Math.max(node.support / 2, 6), 12), // Size by support \n        level: 1,\n        id: getNodeId(node)\n      });\n      \n      // Add second level nodes if expanded\n      if (expandedNodes[node.id] && node.children && node.children.length > 0) {\n        const childSpacing = 140 / (node.children.length + 1);\n        \n        node.children.forEach((child, j) => {\n          // Position children below their parent\n          const childX = x - 70 + childSpacing * (j + 1);\n          const childY = y + verticalSpacing;\n          \n          nodes.push({\n            ...child,\n            x: childX,\n            y: childY,\n            radius: Math.min(Math.max(child.support / 2, 5), 10),\n            level: 2,\n            id: getNodeId(child)\n          });\n          \n          // Add link from parent to child\n          links.push({\n            source: getNodeId(node),\n            target: getNodeId(child),\n            value: child.support\n          });\n          \n          // Add third level nodes if expanded\n          if (expandedNodes[child.id] && child.children && child.children.length > 0) {\n            const grandchildSpacing = 120 / (child.children.length + 1);\n            \n            child.children.forEach((grandchild, k) => {\n              const grandchildX = childX - 60 + grandchildSpacing * (k + 1);\n              const grandchildY = childY + verticalSpacing;\n              \n              nodes.push({\n                ...grandchild,\n                x: grandchildX,\n                y: grandchildY,\n                radius: Math.min(Math.max(grandchild.support / 2, 4), 8),\n                level: 3,\n                id: getNodeId(grandchild)\n              });\n              \n              // Add link from child to grandchild\n              links.push({\n                source: getNodeId(child),\n                target: getNodeId(grandchild),\n                value: grandchild.support\n              });\n            });\n          }\n        });\n      }\n    });\n    \n    // Create a container for the graph\n    const graphContainer = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(graphContainer);\n    \n    // Create links\n    links.forEach(link => {\n      const source = nodes.find(n => n.id === link.source);\n      const target = nodes.find(n => n.id === link.target);\n      \n      if (source && target) {\n        const isHighlighted = highlightedPattern && \n                            highlightedPattern.includes(source.id.replace('node-', '')) && \n                            highlightedPattern.includes(target.id.replace('node-', ''));\n        \n        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');\n        line.setAttribute('x1', source.x);\n        line.setAttribute('y1', source.y);\n        line.setAttribute('x2', target.x);\n        line.setAttribute('y2', target.y);\n        line.setAttribute('stroke', isHighlighted ? '#ff7f0e' : '#aaa');\n        line.setAttribute('stroke-width', isHighlighted ? '2' : '1.5');\n        line.setAttribute('stroke-opacity', '0.6');\n        \n        graphContainer.appendChild(line);\n      }\n    });\n    \n    // Create nodes\n    nodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x},${node.y})`);\n      \n      // Node circle\n      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      circle.setAttribute('r', node.radius);\n      \n      // Highlight if part of the highlighted pattern\n      const isHighlighted = highlightedPattern && \n                          highlightedPattern.includes(node.id.replace('node-', ''));\n      \n      // Color based on level\n      const colors = ['#7b68ee', '#3cb371', '#ff7f50'];\n      let fillColor = colors[node.level - 1];\n      \n      if (isHighlighted) {\n        fillColor = '#ff7f0e';\n      }\n      \n      circle.setAttribute('fill', fillColor);\n      circle.setAttribute('stroke', '#fff');\n      circle.setAttribute('stroke-width', '1.5');\n      \n      // Make interactive\n      if (node.children && node.children.length > 0) {\n        nodeGroup.style.cursor = 'pointer';\n        nodeGroup.addEventListener('click', () => {\n          toggleNode(node.id.replace('node-', ''));\n        });\n      }\n      \n      // Hover effect\n      nodeGroup.addEventListener('mouseenter', () => {\n        const pattern = getNodeFullPattern(node, nodes, links);\n        setHighlightedPattern(pattern);\n      });\n      \n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n      });\n      \n      // Expansion indicator\n      if (node.children && node.children.length > 0) {\n        const isExpanded = expandedNodes[node.id.replace('node-', '')];\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = isExpanded ? '−' : '+';\n        indicator.setAttribute('x', 0);\n        indicator.setAttribute('y', 4);\n        indicator.setAttribute('font-size', '10px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#fff');\n        indicator.setAttribute('text-anchor', 'middle');\n        nodeGroup.appendChild(indicator);\n      }\n      \n      // Node label - show above the node\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 0);\n      text.setAttribute('y', -node.radius - 5);\n      text.setAttribute('font-size', '11px');\n      text.setAttribute('fill', '#333');\n      text.setAttribute('text-anchor', 'middle');\n      text.textContent = node.name;\n      \n      // Support count - show below the node\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', 0);\n      supportText.setAttribute('y', node.radius + 12);\n      supportText.setAttribute('font-size', '10px');\n      supportText.setAttribute('fill', '#666');\n      supportText.setAttribute('text-anchor', 'middle');\n      supportText.textContent = node.support;\n      \n      nodeGroup.appendChild(circle);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      graphContainer.appendChild(nodeGroup);\n    });\n  };\n  \n  // Helper to get the full pattern for highlighted nodes\n  const getNodeFullPattern = (node, nodes, links) => {\n    const pattern = [node.id.replace('node-', '')];\n    \n    // Find all connected nodes\n    const findConnectedNodes = (nodeId, visited = new Set()) => {\n      visited.add(nodeId);\n      \n      links.forEach(link => {\n        if (link.source === nodeId && !visited.has(link.target)) {\n          pattern.push(link.target.replace('node-', ''));\n          findConnectedNodes(link.target, visited);\n        } else if (link.target === nodeId && !visited.has(link.source)) {\n          pattern.push(link.source.replace('node-', ''));\n          findConnectedNodes(link.source, visited);\n        }\n      });\n    };\n    \n    findConnectedNodes(node.id);\n    return pattern;\n  };\n\n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold\n    const minSupportCount = Math.max(2, Math.floor(transactions.length * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    \n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n      \n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      \n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n      \n      // Step 2: Find frequent itemsets using ECLAT recursion\n      const frequentItemsets = {};\n      \n      // Initialize with single items\n      frequentItems.forEach(item => {\n        const support = tidLists[item].size;\n        frequentItemsets[item] = {\n          support,\n          tids: tidLists[item],\n          children: {}\n        };\n      });\n      \n      // Recursive function to find frequent itemsets\n      const eclat = (prefix, tidList, level, parent) => {\n        if (level > 3) return; // Limit depth for visualization purposes\n        \n        // Find extensions with all items that come after the prefix's last item\n        const lastItem = prefix[prefix.length - 1];\n        const lastItemIndex = frequentItems.indexOf(lastItem);\n        \n        for (let i = lastItemIndex + 1; i < frequentItems.length; i++) {\n          const item = frequentItems[i];\n          const itemTids = tidLists[item];\n          \n          // Compute intersection\n          const intersection = new Set([...tidList].filter(tid => itemTids.has(tid)));\n          \n          // If support is high enough, add to frequent itemsets\n          if (intersection.size >= minSupportCount) {\n            const newPrefix = [...prefix, item];\n            const newPrefixStr = item; // Just use the extension item as key\n            \n            parent.children[newPrefixStr] = {\n              support: intersection.size,\n              tids: intersection,\n              children: {}\n            };\n            \n            // Recursively find extensions of this new prefix\n            eclat(newPrefix, intersection, level + 1, parent.children[newPrefixStr]);\n          }\n        }\n      };\n      \n      // Start ECLAT recursion for each single item\n      frequentItems.forEach(item => {\n        eclat([item], tidLists[item], 1, frequentItemsets[item]);\n      });\n      \n      // Convert to array format for visualization\n      const result = frequentItems.map(item => ({\n        id: item,\n        name: item,\n        support: tidLists[item].size,\n        children: Object.keys(frequentItemsets[item].children).map(child => ({\n          id: `${item}-${child}`,\n          name: child,\n          support: frequentItemsets[item].children[child].support,\n          children: Object.keys(frequentItemsets[item].children[child].children || {}).map(grandchild => ({\n            id: `${item}-${child}-${grandchild}`,\n            name: grandchild,\n            support: frequentItemsets[item].children[child].children[grandchild].support,\n            children: []\n          }))\n        }))\n      }));\n      \n      setMiningData(result);\n      \n    } else {\n      // FP GROWTH ALGORITHM - IMPROVED VERSION\n      \n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction\n          .filter(item => frequentItems.includes(item))\n          .sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n      \n      // Step 4: Build FP-Tree\n      const fpTree = { \n        name: \"root\", \n        count: 0,\n        children: {},\n        nodeLinks: {} // Header table node links\n      };\n      \n      // Initialize header table\n      const headerTable = {};\n      frequentItems.forEach(item => {\n        headerTable[item] = {\n          count: itemCounts[item],\n          nodeLink: null\n        };\n      });\n      \n      // Insert a transaction into the FP-Tree\n      const insertTransaction = (transaction, tree, count = 1) => {\n        if (transaction.length === 0) return;\n        \n        const item = transaction[0];\n        \n        // Create node if it doesn't exist\n        if (!tree.children[item]) {\n          tree.children[item] = {\n            name: item,\n            count: 0,\n            children: {},\n            parent: tree,\n            nextSameItem: null\n          };\n          \n          // Update header table node links\n          if (!headerTable[item].nodeLink) {\n            headerTable[item].nodeLink = tree.children[item];\n          } else {\n            let current = headerTable[item].nodeLink;\n            while (current.nextSameItem) {\n              current = current.nextSameItem;\n            }\n            current.nextSameItem = tree.children[item];\n          }\n        }\n        \n        // Increment count\n        tree.children[item].count += count;\n        \n        // Insert remaining items\n        if (transaction.length > 1) {\n          insertTransaction(transaction.slice(1), tree.children[item], count);\n        }\n      };\n      \n      // Insert all transactions\n      orderedTransactions.forEach(transaction => {\n        insertTransaction(transaction, fpTree);\n      });\n      \n      // Step 5: Mine patterns using FP-Growth\n      const patterns = {};\n      \n      // Mine patterns with a suffix\n      const minePatterns = (headerTable, conditionalBase, suffix = []) => {\n        // Get items in descending order of frequency\n        const items = Object.keys(headerTable).sort((a, b) => headerTable[b].count - headerTable[a].count);\n        \n        for (const item of items) {\n          // New frequent itemset found\n          const newSuffix = [item, ...suffix];\n          const supportCount = headerTable[item].count;\n          \n          // Store pattern\n          const patternKey = newSuffix.join('-');\n          patterns[patternKey] = {\n            items: newSuffix,\n            support: supportCount\n          };\n          \n          // Build conditional pattern base\n          const conditionalPatternBase = [];\n          let node = headerTable[item].nodeLink;\n          \n          while (node) {\n            // Traverse upward to get the path\n            const path = [];\n            let prefixSupport = node.count;\n            let parent = node.parent;\n            \n            while (parent && parent.name !== \"root\") {\n              path.unshift(parent.name);\n              parent = parent.parent;\n            }\n            \n            if (path.length > 0) {\n              conditionalPatternBase.push({\n                path,\n                count: prefixSupport\n              });\n            }\n            \n            node = node.nextSameItem;\n          }\n          \n          // Build conditional FP-Tree\n          if (conditionalPatternBase.length > 0) {\n            const newConditionalBase = {};\n            \n            // Count items in the conditional pattern base\n            conditionalPatternBase.forEach(({path, count}) => {\n              path.forEach(pathItem => {\n                newConditionalBase[pathItem] = (newConditionalBase[pathItem] || 0) + count;\n              });\n            });\n            \n            // Filter items by minimum support\n            const newHeaderTable = {};\n            Object.keys(newConditionalBase).forEach(item => {\n              if (newConditionalBase[item] >= minSupportCount) {\n                newHeaderTable[item] = {\n                  count: newConditionalBase[item],\n                  nodeLink: null\n                };\n              }\n            });\n            \n            // Recursively mine with the new conditional tree\n            if (Object.keys(newHeaderTable).length > 0) {\n              minePatterns(newHeaderTable, conditionalPatternBase, newSuffix);\n            }\n          }\n        }\n      };\n      \n      // Start mining\n      minePatterns(headerTable, []);\n      \n      // Convert to hierarchical format for visualization\n      const result = frequentItems.map(item => {\n        // Find all patterns that start with this item\n        const itemPatterns = Object.values(patterns).filter(p => p.items[0] === item);\n        \n        // Group by second item\n        const children = {};\n        itemPatterns.forEach(pattern => {\n          if (pattern.items.length > 1) {\n            const secondItem = pattern.items[1];\n            if (!children[secondItem]) {\n              children[secondItem] = {\n                support: pattern.support,\n                children: {}\n              };\n            }\n            \n            // Add third-level items\n            if (pattern.items.length > 2) {\n              const thirdItem = pattern.items[2];\n              children[secondItem].children[thirdItem] = {\n                support: pattern.support,\n                children: {}\n              };\n            }\n          }\n        });\n        \n        return {\n          id: item,\n          name: item,\n          support: itemCounts[item],\n          children: Object.keys(children).map(childItem => ({\n            id: `${item}-${childItem}`,\n            name: childItem,\n            support: children[childItem].support,\n            children: Object.keys(children[childItem].children).map(grandchildItem => ({\n              id: `${item}-${childItem}-${grandchildItem}`,\n              name: grandchildItem,\n              support: children[childItem].children[grandchildItem].support,\n              children: []\n            }))\n          }))\n        };\n      });\n      \n      setMiningData(result);\n    }\n    \n    // Initialize expanded state for top-level nodes\n    const initialExpanded = {};\n    if (miningData) {\n      miningData.slice(0, 5).forEach(node => {\n        initialExpanded[node.id] = true;\n      });\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = (algo) => {\n    setAlgorithm(algo);\n  };\n  \n  // Change minimum support threshold\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  const handleCombinationClick = (combination) => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = (headerGroup) => {\n    if (!headerGroup) return null;\n    \n    const headers = headerGroup.split('|');\n    return (\n      <div className=\"header-tags\">\n        {headers.map((header, index) => (\n          <span key={index} className=\"similarity-tag\">{header}</span>\n        ))}\n      </div>\n    );\n  };\n\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n    \n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n    \n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningData(null);\n    }\n  };\n\n  return (\n    <div className=\"column-container\">\n      <div className=\"column-title-container\">\n        <h2 className=\"column-title\">\n          {!testMode && selectedHeader \n            ? `헤더명 조합 목록: ${selectedHeader}` \n            : '헤더명 조합 목록'}\n        </h2>\n        <div className=\"test-mode-toggle\">\n          <label className=\"toggle-label\">\n            <span>Test Mode {testMode ? 'ON' : 'OFF'}</span>\n            <input \n              type=\"checkbox\" \n              checked={testMode}\n              onChange={toggleTestMode}\n            />\n            <span className=\"toggle-slider\"></span>\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'combination' ? 'active' : ''}`}\n          onClick={() => setActiveTab('combination')}\n        >\n          조합뷰\n        </button>\n        <button \n          className={`tab ${activeTab === 'mining' ? 'active' : ''}`}\n          onClick={() => setActiveTab('mining')}\n        >\n          마이닝뷰\n        </button>\n      </div>\n      \n      {activeTab === 'combination' ? (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationHeaders.length > 0 ? (\n            <div className=\"column-content\">\n              {combinationHeaders.map((item, index) => (\n                <div\n                  key={index}\n                  className={`column-item ${selectedCombination === item.header_group ? 'selected' : ''}`}\n                  onClick={() => handleCombinationClick(item.header_group)}\n                >\n                  {renderHeaderGroupAsTags(item.header_group)}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"테스트 모드가 활성화되었습니다.\" \n                : \"채널과 헤더를 선택해주세요.\"}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : miningData ? (\n            <div className=\"mining-view\">\n              <div className=\"mining-controls\">\n                <div className=\"algorithm-selector\">\n                  <button \n                    className={`algorithm-btn ${algorithm === 'eclat' ? 'active' : ''}`} \n                    onClick={() => switchAlgorithm('eclat')}\n                  >\n                    Eclat 알고리즘\n                  </button>\n                  <button \n                    className={`algorithm-btn ${algorithm === 'fpgrowth' ? 'active' : ''}`} \n                    onClick={() => switchAlgorithm('fpgrowth')}\n                  >\n                    FP-Growth 알고리즘\n                  </button>\n                </div>\n                <div className=\"support-control\">\n                  <label>최소 지지도: {(minSupport * 100).toFixed(0)}%</label>\n                  <input \n                    type=\"range\" \n                    min=\"0.05\" \n                    max=\"0.5\" \n                    step=\"0.05\" \n                    value={minSupport}\n                    onChange={handleSupportChange}\n                  />\n                </div>\n              </div>\n              \n              <div className=\"mining-tree-legend\">\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#7b68ee' }}></span>\n                  <span>단일 항목</span>\n                </div>\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#3cb371' }}></span>\n                  <span>2개 항목 조합</span>\n                </div>\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#ff7f50' }}></span>\n                  <span>3개 항목 조합</span>\n                </div>\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#ff7f0e' }}></span>\n                  <span>하이라이트</span>\n                </div>\n              </div>\n              \n              <div className=\"mining-tree-svg-container\">\n                <svg \n                  className=\"mining-tree-svg\" \n                  ref={svgRef} \n                  width=\"100%\" \n                  height=\"400\"\n                ></svg>\n              </div>\n              \n              <div className=\"mining-explanation\">\n                <p>{algorithm === 'eclat' ? 'Eclat' : 'FP-Growth'} 알고리즘 패턴 시각화:</p>\n                <ul>\n                  <li>노드 크기는 발생 빈도를 나타냅니다</li>\n                  <li>노드를 클릭하여 연관 패턴을 확장/축소</li>\n                  <li>노드에 마우스를 올리면 연관 패턴 하이라이트</li>\n                  <li>노드 아래의 숫자는 해당 패턴의 발생 횟수</li>\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"마이닝 데이터를 로딩 중입니다...\" \n                : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"}\n            </div>\n          )}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-controls {\n          display: flex;\n          justify-content: space-between;\n          flex-wrap: wrap;\n          margin-bottom: 12px;\n          background-color: #f8f8f8;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .algorithm-selector {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .algorithm-btn {\n          background: #f0f0f0;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 12px;\n          cursor: pointer;\n        }\n        \n        .algorithm-btn.active {\n          background: #4682b4;\n          color: white;\n          border-color: #4682b4;\n        }\n        \n        .support-control {\n          display: flex;\n          flex-direction: column;\n          font-size: 12px;\n        }\n        \n        .support-control input {\n          width: 100px;\n        }\n        \n        .mining-tree-legend {\n          display: flex;\n          flex-wrap: wrap;\n          padding: 8px;\n          margin-bottom: 8px;\n          border-bottom: 1px solid #eee;\n          font-size: 11px;\n        }\n        \n        .legend-item {\n          display: flex;\n          align-items: center;\n          margin-right: 12px;\n          margin-bottom: 4px;\n        }\n        \n        .legend-color {\n          display: inline-block;\n          width: 10px;\n          height: 10px;\n          border-radius: 50%;\n          margin-right: 4px;\n        }\n        \n        .mining-tree-svg-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #fafafa;\n          flex-grow: 1;\n          min-height: 300px;\n        }\n        \n        .mining-explanation {\n          margin-top: 16px;\n          font-size: 12px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 8px 12px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 20px;\n          margin: 8px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default HeaderCombinationList; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,0BAA0B,QAAQ,iBAAiB;AAC5D,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,cAAc;EAAEC,mBAAmB;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EACvG,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACsB,UAAU,EAAEC,aAAa,CAAC,GAAGvB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACwB,aAAa,EAAEC,gBAAgB,CAAC,GAAGzB,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAAC0B,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAAC4B,SAAS,EAAEC,YAAY,CAAC,GAAG7B,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;EACrD,MAAM,CAAC8B,UAAU,EAAEC,aAAa,CAAC,GAAG/B,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;EACnD,MAAMgC,MAAM,GAAG9B,MAAM,CAAC,IAAI,CAAC;EAE3BD,SAAS,CAAC,MAAM;IACd,MAAMgC,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC;MACA,IAAI,CAACb,QAAQ,KAAK,CAACb,OAAO,IAAI,CAACC,cAAc,CAAC,EAAE;MAEhDO,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAIK,QAAQ,EAAE;UACZ;UACA,MAAMc,QAAQ,GAAG,MAAM,MAAM,CAAC,wCAAwC,CAAC;UACvEC,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEF,QAAQ,CAAC;UACnErB,qBAAqB,CAACqB,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;;UAE1C;UACAC,kBAAkB,CAACJ,QAAQ,CAACG,IAAI,IAAI,EAAE,EAAET,SAAS,CAAC;QACpD,CAAC,MAAM,IAAIrB,OAAO,IAAIC,cAAc,EAAE;UACpC;UACA,MAAM+B,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACjC,cAAc,CAAC,GAAGA,cAAc,GAAG,CAACA,cAAc,CAAC;UACjF,MAAM0B,QAAQ,GAAG,MAAM/B,0BAA0B,CAACI,OAAO,EAAEgC,OAAO,CAAC;UACnEJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;UACtDrB,qBAAqB,CAACqB,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;;UAE1C;UACAC,kBAAkB,CAACJ,QAAQ,CAACG,IAAI,IAAI,EAAE,EAAET,SAAS,CAAC;QACpD,CAAC,MAAM;UACL;UACAf,qBAAqB,CAAC,EAAE,CAAC;UACzBU,aAAa,CAAC,IAAI,CAAC;QACrB;QACAN,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOyB,GAAG,EAAE;QACZzB,QAAQ,CAACyB,GAAG,CAACC,OAAO,CAAC;QACrB9B,qBAAqB,CAAC,EAAE,CAAC;QACzBU,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDkB,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAAC1B,OAAO,EAAEC,cAAc,EAAEY,QAAQ,EAAEQ,SAAS,EAAEE,UAAU,CAAC,CAAC,CAAC,CAAC;;EAEhE;EACA7B,SAAS,CAAC,MAAM;IACd,IAAIiB,SAAS,KAAK,QAAQ,IAAII,UAAU,IAAIU,MAAM,CAACY,OAAO,EAAE;MAC1DC,mBAAmB,CAAC,CAAC;IACvB;EACF,CAAC,EAAE,CAACvB,UAAU,EAAEJ,SAAS,EAAEM,aAAa,EAAEE,kBAAkB,CAAC,CAAC;;EAE9D;EACA,MAAMmB,mBAAmB,GAAGA,CAAA,KAAM;IAChC,IAAI,CAACb,MAAM,CAACY,OAAO,IAAI,CAACtB,UAAU,EAAE;IAEpC,MAAMwB,GAAG,GAAGd,MAAM,CAACY,OAAO;IAC1B;IACA,OAAOE,GAAG,CAACC,UAAU,EAAE;MACrBD,GAAG,CAACE,WAAW,CAACF,GAAG,CAACC,UAAU,CAAC;IACjC;IAEA,MAAME,QAAQ,GAAGH,GAAG,CAACI,WAAW,IAAI,GAAG;IACvC,MAAMC,SAAS,GAAG,GAAG;IACrBL,GAAG,CAACM,YAAY,CAAC,QAAQ,EAAE,GAAGD,SAAS,IAAI,CAAC;;IAE5C;IACA;;IAEA;IACA,MAAME,KAAK,GAAG,EAAE;IAChB,MAAMC,KAAK,GAAG,EAAE;;IAEhB;IACA,MAAMC,SAAS,GAAIC,IAAI,IAAK,QAAQA,IAAI,CAACC,EAAE,EAAE;;IAE7C;IACA,MAAMC,UAAU,GAAG,EAAE;IACrB,MAAMC,iBAAiB,GAAGV,QAAQ,IAAIW,IAAI,CAACC,GAAG,CAACvC,UAAU,CAACwC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;IACzE,MAAMC,eAAe,GAAG,EAAE;;IAE1B;IACAzC,UAAU,CAAC0C,OAAO,CAAC,CAACR,IAAI,EAAES,CAAC,KAAK;MAC9B;MACA,MAAMC,GAAG,GAAGN,IAAI,CAACO,KAAK,CAACF,CAAC,GAAG,CAAC,CAAC;MAC7B,MAAMG,GAAG,GAAGH,CAAC,GAAG,CAAC;MACjB,MAAMI,CAAC,GAAGV,iBAAiB,IAAIS,GAAG,GAAG,CAAC,CAAC;MACvC,MAAME,CAAC,GAAGZ,UAAU,GAAGQ,GAAG,GAAGH,eAAe,GAAG,GAAG;MAElDV,KAAK,CAACkB,IAAI,CAAC;QACT,GAAGf,IAAI;QACPa,CAAC;QACDC,CAAC;QACDE,MAAM,EAAEZ,IAAI,CAACC,GAAG,CAACD,IAAI,CAACa,GAAG,CAACjB,IAAI,CAACkB,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;QAAE;QACrDC,KAAK,EAAE,CAAC;QACRlB,EAAE,EAAEF,SAAS,CAACC,IAAI;MACpB,CAAC,CAAC;;MAEF;MACA,IAAIhC,aAAa,CAACgC,IAAI,CAACC,EAAE,CAAC,IAAID,IAAI,CAACoB,QAAQ,IAAIpB,IAAI,CAACoB,QAAQ,CAACd,MAAM,GAAG,CAAC,EAAE;QACvE,MAAMe,YAAY,GAAG,GAAG,IAAIrB,IAAI,CAACoB,QAAQ,CAACd,MAAM,GAAG,CAAC,CAAC;QAErDN,IAAI,CAACoB,QAAQ,CAACZ,OAAO,CAAC,CAACc,KAAK,EAAEC,CAAC,KAAK;UAClC;UACA,MAAMC,MAAM,GAAGX,CAAC,GAAG,EAAE,GAAGQ,YAAY,IAAIE,CAAC,GAAG,CAAC,CAAC;UAC9C,MAAME,MAAM,GAAGX,CAAC,GAAGP,eAAe;UAElCV,KAAK,CAACkB,IAAI,CAAC;YACT,GAAGO,KAAK;YACRT,CAAC,EAAEW,MAAM;YACTV,CAAC,EAAEW,MAAM;YACTT,MAAM,EAAEZ,IAAI,CAACC,GAAG,CAACD,IAAI,CAACa,GAAG,CAACK,KAAK,CAACJ,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;YACpDC,KAAK,EAAE,CAAC;YACRlB,EAAE,EAAEF,SAAS,CAACuB,KAAK;UACrB,CAAC,CAAC;;UAEF;UACAxB,KAAK,CAACiB,IAAI,CAAC;YACTW,MAAM,EAAE3B,SAAS,CAACC,IAAI,CAAC;YACvB2B,MAAM,EAAE5B,SAAS,CAACuB,KAAK,CAAC;YACxBM,KAAK,EAAEN,KAAK,CAACJ;UACf,CAAC,CAAC;;UAEF;UACA,IAAIlD,aAAa,CAACsD,KAAK,CAACrB,EAAE,CAAC,IAAIqB,KAAK,CAACF,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAACd,MAAM,GAAG,CAAC,EAAE;YAC1E,MAAMuB,iBAAiB,GAAG,GAAG,IAAIP,KAAK,CAACF,QAAQ,CAACd,MAAM,GAAG,CAAC,CAAC;YAE3DgB,KAAK,CAACF,QAAQ,CAACZ,OAAO,CAAC,CAACsB,UAAU,EAAEC,CAAC,KAAK;cACxC,MAAMC,WAAW,GAAGR,MAAM,GAAG,EAAE,GAAGK,iBAAiB,IAAIE,CAAC,GAAG,CAAC,CAAC;cAC7D,MAAME,WAAW,GAAGR,MAAM,GAAGlB,eAAe;cAE5CV,KAAK,CAACkB,IAAI,CAAC;gBACT,GAAGe,UAAU;gBACbjB,CAAC,EAAEmB,WAAW;gBACdlB,CAAC,EAAEmB,WAAW;gBACdjB,MAAM,EAAEZ,IAAI,CAACC,GAAG,CAACD,IAAI,CAACa,GAAG,CAACa,UAAU,CAACZ,OAAO,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;gBACxDC,KAAK,EAAE,CAAC;gBACRlB,EAAE,EAAEF,SAAS,CAAC+B,UAAU;cAC1B,CAAC,CAAC;;cAEF;cACAhC,KAAK,CAACiB,IAAI,CAAC;gBACTW,MAAM,EAAE3B,SAAS,CAACuB,KAAK,CAAC;gBACxBK,MAAM,EAAE5B,SAAS,CAAC+B,UAAU,CAAC;gBAC7BF,KAAK,EAAEE,UAAU,CAACZ;cACpB,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,MAAMgB,cAAc,GAAGC,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,GAAG,CAAC;IAClF9C,GAAG,CAAC+C,WAAW,CAACH,cAAc,CAAC;;IAE/B;IACApC,KAAK,CAACU,OAAO,CAAC8B,IAAI,IAAI;MACpB,MAAMZ,MAAM,GAAG7B,KAAK,CAAC0C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAKqC,IAAI,CAACZ,MAAM,CAAC;MACpD,MAAMC,MAAM,GAAG9B,KAAK,CAAC0C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACvC,EAAE,KAAKqC,IAAI,CAACX,MAAM,CAAC;MAEpD,IAAID,MAAM,IAAIC,MAAM,EAAE;QACpB,MAAMc,aAAa,GAAGvE,kBAAkB,IACpBA,kBAAkB,CAACwE,QAAQ,CAAChB,MAAM,CAACzB,EAAE,CAAC0C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,IAC3DzE,kBAAkB,CAACwE,QAAQ,CAACf,MAAM,CAAC1B,EAAE,CAAC0C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAE/E,MAAMC,IAAI,GAAGT,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC;QAC3EQ,IAAI,CAAChD,YAAY,CAAC,IAAI,EAAE8B,MAAM,CAACb,CAAC,CAAC;QACjC+B,IAAI,CAAChD,YAAY,CAAC,IAAI,EAAE8B,MAAM,CAACZ,CAAC,CAAC;QACjC8B,IAAI,CAAChD,YAAY,CAAC,IAAI,EAAE+B,MAAM,CAACd,CAAC,CAAC;QACjC+B,IAAI,CAAChD,YAAY,CAAC,IAAI,EAAE+B,MAAM,CAACb,CAAC,CAAC;QACjC8B,IAAI,CAAChD,YAAY,CAAC,QAAQ,EAAE6C,aAAa,GAAG,SAAS,GAAG,MAAM,CAAC;QAC/DG,IAAI,CAAChD,YAAY,CAAC,cAAc,EAAE6C,aAAa,GAAG,GAAG,GAAG,KAAK,CAAC;QAC9DG,IAAI,CAAChD,YAAY,CAAC,gBAAgB,EAAE,KAAK,CAAC;QAE1CsC,cAAc,CAACG,WAAW,CAACO,IAAI,CAAC;MAClC;IACF,CAAC,CAAC;;IAEF;IACA/C,KAAK,CAACW,OAAO,CAACR,IAAI,IAAI;MACpB,MAAM6C,SAAS,GAAGV,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,GAAG,CAAC;MAC7ES,SAAS,CAACjD,YAAY,CAAC,WAAW,EAAE,aAAaI,IAAI,CAACa,CAAC,IAAIb,IAAI,CAACc,CAAC,GAAG,CAAC;;MAErE;MACA,MAAMgC,MAAM,GAAGX,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,QAAQ,CAAC;MAC/EU,MAAM,CAAClD,YAAY,CAAC,GAAG,EAAEI,IAAI,CAACgB,MAAM,CAAC;;MAErC;MACA,MAAMyB,aAAa,GAAGvE,kBAAkB,IACpBA,kBAAkB,CAACwE,QAAQ,CAAC1C,IAAI,CAACC,EAAE,CAAC0C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;MAE7E;MACA,MAAMI,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;MAChD,IAAIC,SAAS,GAAGD,MAAM,CAAC/C,IAAI,CAACmB,KAAK,GAAG,CAAC,CAAC;MAEtC,IAAIsB,aAAa,EAAE;QACjBO,SAAS,GAAG,SAAS;MACvB;MAEAF,MAAM,CAAClD,YAAY,CAAC,MAAM,EAAEoD,SAAS,CAAC;MACtCF,MAAM,CAAClD,YAAY,CAAC,QAAQ,EAAE,MAAM,CAAC;MACrCkD,MAAM,CAAClD,YAAY,CAAC,cAAc,EAAE,KAAK,CAAC;;MAE1C;MACA,IAAII,IAAI,CAACoB,QAAQ,IAAIpB,IAAI,CAACoB,QAAQ,CAACd,MAAM,GAAG,CAAC,EAAE;QAC7CuC,SAAS,CAACI,KAAK,CAACC,MAAM,GAAG,SAAS;QAClCL,SAAS,CAACM,gBAAgB,CAAC,OAAO,EAAE,MAAM;UACxCC,UAAU,CAACpD,IAAI,CAACC,EAAE,CAAC0C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC1C,CAAC,CAAC;MACJ;;MAEA;MACAE,SAAS,CAACM,gBAAgB,CAAC,YAAY,EAAE,MAAM;QAC7C,MAAME,OAAO,GAAGC,kBAAkB,CAACtD,IAAI,EAAEH,KAAK,EAAEC,KAAK,CAAC;QACtD3B,qBAAqB,CAACkF,OAAO,CAAC;MAChC,CAAC,CAAC;MAEFR,SAAS,CAACM,gBAAgB,CAAC,YAAY,EAAE,MAAM;QAC7ChF,qBAAqB,CAAC,IAAI,CAAC;MAC7B,CAAC,CAAC;;MAEF;MACA,IAAI6B,IAAI,CAACoB,QAAQ,IAAIpB,IAAI,CAACoB,QAAQ,CAACd,MAAM,GAAG,CAAC,EAAE;QAC7C,MAAMiD,UAAU,GAAGvF,aAAa,CAACgC,IAAI,CAACC,EAAE,CAAC0C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QAC9D,MAAMa,SAAS,GAAGrB,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC;QAChFoB,SAAS,CAACC,WAAW,GAAGF,UAAU,GAAG,GAAG,GAAG,GAAG;QAC9CC,SAAS,CAAC5D,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;QAC9B4D,SAAS,CAAC5D,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;QAC9B4D,SAAS,CAAC5D,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC;QAC3C4D,SAAS,CAAC5D,YAAY,CAAC,aAAa,EAAE,MAAM,CAAC;QAC7C4D,SAAS,CAAC5D,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;QACtC4D,SAAS,CAAC5D,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC;QAC/CiD,SAAS,CAACR,WAAW,CAACmB,SAAS,CAAC;MAClC;;MAEA;MACA,MAAME,IAAI,GAAGvB,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC;MAC3EsB,IAAI,CAAC9D,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;MACzB8D,IAAI,CAAC9D,YAAY,CAAC,GAAG,EAAE,CAACI,IAAI,CAACgB,MAAM,GAAG,CAAC,CAAC;MACxC0C,IAAI,CAAC9D,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC;MACtC8D,IAAI,CAAC9D,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;MACjC8D,IAAI,CAAC9D,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC;MAC1C8D,IAAI,CAACD,WAAW,GAAGzD,IAAI,CAAC2D,IAAI;;MAE5B;MACA,MAAMC,WAAW,GAAGzB,QAAQ,CAACC,eAAe,CAAC,4BAA4B,EAAE,MAAM,CAAC;MAClFwB,WAAW,CAAChE,YAAY,CAAC,GAAG,EAAE,CAAC,CAAC;MAChCgE,WAAW,CAAChE,YAAY,CAAC,GAAG,EAAEI,IAAI,CAACgB,MAAM,GAAG,EAAE,CAAC;MAC/C4C,WAAW,CAAChE,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC;MAC7CgE,WAAW,CAAChE,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC;MACxCgE,WAAW,CAAChE,YAAY,CAAC,aAAa,EAAE,QAAQ,CAAC;MACjDgE,WAAW,CAACH,WAAW,GAAGzD,IAAI,CAACkB,OAAO;MAEtC2B,SAAS,CAACR,WAAW,CAACS,MAAM,CAAC;MAC7BD,SAAS,CAACR,WAAW,CAACqB,IAAI,CAAC;MAC3Bb,SAAS,CAACR,WAAW,CAACuB,WAAW,CAAC;MAClC1B,cAAc,CAACG,WAAW,CAACQ,SAAS,CAAC;IACvC,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMS,kBAAkB,GAAGA,CAACtD,IAAI,EAAEH,KAAK,EAAEC,KAAK,KAAK;IACjD,MAAMuD,OAAO,GAAG,CAACrD,IAAI,CAACC,EAAE,CAAC0C,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;;IAE9C;IACA,MAAMkB,kBAAkB,GAAGA,CAACC,MAAM,EAAEC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK;MAC1DD,OAAO,CAACE,GAAG,CAACH,MAAM,CAAC;MAEnBhE,KAAK,CAACU,OAAO,CAAC8B,IAAI,IAAI;QACpB,IAAIA,IAAI,CAACZ,MAAM,KAAKoC,MAAM,IAAI,CAACC,OAAO,CAACG,GAAG,CAAC5B,IAAI,CAACX,MAAM,CAAC,EAAE;UACvD0B,OAAO,CAACtC,IAAI,CAACuB,IAAI,CAACX,MAAM,CAACgB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;UAC9CkB,kBAAkB,CAACvB,IAAI,CAACX,MAAM,EAAEoC,OAAO,CAAC;QAC1C,CAAC,MAAM,IAAIzB,IAAI,CAACX,MAAM,KAAKmC,MAAM,IAAI,CAACC,OAAO,CAACG,GAAG,CAAC5B,IAAI,CAACZ,MAAM,CAAC,EAAE;UAC9D2B,OAAO,CAACtC,IAAI,CAACuB,IAAI,CAACZ,MAAM,CAACiB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;UAC9CkB,kBAAkB,CAACvB,IAAI,CAACZ,MAAM,EAAEqC,OAAO,CAAC;QAC1C;MACF,CAAC,CAAC;IACJ,CAAC;IAEDF,kBAAkB,CAAC7D,IAAI,CAACC,EAAE,CAAC;IAC3B,OAAOoD,OAAO;EAChB,CAAC;;EAED;EACA,MAAMvE,kBAAkB,GAAGA,CAACqF,eAAe,EAAEC,IAAI,GAAG,OAAO,KAAK;IAC9D,IAAI,CAACD,eAAe,IAAIA,eAAe,CAAC7D,MAAM,KAAK,CAAC,EAAE;MACpDvC,aAAa,CAAC,IAAI,CAAC;MACnB;IACF;;IAEA;IACA,MAAMsG,YAAY,GAAGF,eAAe,CACjCG,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,YAAY,CAAC,CACjCC,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,YAAY,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC;;IAE5C;IACA,MAAMC,UAAU,GAAG,CAAC,CAAC;IACrBN,YAAY,CAAC7D,OAAO,CAACoE,WAAW,IAAI;MAClCA,WAAW,CAACpE,OAAO,CAAC+D,IAAI,IAAI;QAC1BI,UAAU,CAACJ,IAAI,CAAC,GAAG,CAACI,UAAU,CAACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMM,eAAe,GAAGzE,IAAI,CAACa,GAAG,CAAC,CAAC,EAAEb,IAAI,CAACO,KAAK,CAAC0D,YAAY,CAAC/D,MAAM,GAAGhC,UAAU,CAAC,CAAC;;IAEjF;IACA,MAAMwG,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC,CAC1CL,MAAM,CAACC,IAAI,IAAII,UAAU,CAACJ,IAAI,CAAC,IAAIM,eAAe,CAAC,CACnDI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKR,UAAU,CAACQ,CAAC,CAAC,GAAGR,UAAU,CAACO,CAAC,CAAC,CAAC;IAEhD,IAAId,IAAI,KAAK,OAAO,EAAE;MACpB;;MAEA;MACA,MAAMgB,QAAQ,GAAG,CAAC,CAAC;MACnBN,aAAa,CAACtE,OAAO,CAAC+D,IAAI,IAAI;QAC5Ba,QAAQ,CAACb,IAAI,CAAC,GAAG,IAAIP,GAAG,CAAC,CAAC;MAC5B,CAAC,CAAC;MAEFK,YAAY,CAAC7D,OAAO,CAAC,CAACoE,WAAW,EAAES,GAAG,KAAK;QACzCT,WAAW,CAACpE,OAAO,CAAC+D,IAAI,IAAI;UAC1B,IAAIO,aAAa,CAACpC,QAAQ,CAAC6B,IAAI,CAAC,EAAE;YAChCa,QAAQ,CAACb,IAAI,CAAC,CAACN,GAAG,CAACoB,GAAG,CAAC;UACzB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;;MAEF;MACA,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;MAE3B;MACAR,aAAa,CAACtE,OAAO,CAAC+D,IAAI,IAAI;QAC5B,MAAMrD,OAAO,GAAGkE,QAAQ,CAACb,IAAI,CAAC,CAACgB,IAAI;QACnCD,gBAAgB,CAACf,IAAI,CAAC,GAAG;UACvBrD,OAAO;UACPsE,IAAI,EAAEJ,QAAQ,CAACb,IAAI,CAAC;UACpBnD,QAAQ,EAAE,CAAC;QACb,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,MAAMqE,KAAK,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAExE,KAAK,EAAEyE,MAAM,KAAK;QAChD,IAAIzE,KAAK,GAAG,CAAC,EAAE,OAAO,CAAC;;QAEvB;QACA,MAAM0E,QAAQ,GAAGH,MAAM,CAACA,MAAM,CAACpF,MAAM,GAAG,CAAC,CAAC;QAC1C,MAAMwF,aAAa,GAAGhB,aAAa,CAACiB,OAAO,CAACF,QAAQ,CAAC;QAErD,KAAK,IAAIpF,CAAC,GAAGqF,aAAa,GAAG,CAAC,EAAErF,CAAC,GAAGqE,aAAa,CAACxE,MAAM,EAAEG,CAAC,EAAE,EAAE;UAC7D,MAAM8D,IAAI,GAAGO,aAAa,CAACrE,CAAC,CAAC;UAC7B,MAAMuF,QAAQ,GAAGZ,QAAQ,CAACb,IAAI,CAAC;;UAE/B;UACA,MAAM0B,YAAY,GAAG,IAAIjC,GAAG,CAAC,CAAC,GAAG2B,OAAO,CAAC,CAACrB,MAAM,CAACe,GAAG,IAAIW,QAAQ,CAAC9B,GAAG,CAACmB,GAAG,CAAC,CAAC,CAAC;;UAE3E;UACA,IAAIY,YAAY,CAACV,IAAI,IAAIV,eAAe,EAAE;YACxC,MAAMqB,SAAS,GAAG,CAAC,GAAGR,MAAM,EAAEnB,IAAI,CAAC;YACnC,MAAM4B,YAAY,GAAG5B,IAAI,CAAC,CAAC;;YAE3BqB,MAAM,CAACxE,QAAQ,CAAC+E,YAAY,CAAC,GAAG;cAC9BjF,OAAO,EAAE+E,YAAY,CAACV,IAAI;cAC1BC,IAAI,EAAES,YAAY;cAClB7E,QAAQ,EAAE,CAAC;YACb,CAAC;;YAED;YACAqE,KAAK,CAACS,SAAS,EAAED,YAAY,EAAE9E,KAAK,GAAG,CAAC,EAAEyE,MAAM,CAACxE,QAAQ,CAAC+E,YAAY,CAAC,CAAC;UAC1E;QACF;MACF,CAAC;;MAED;MACArB,aAAa,CAACtE,OAAO,CAAC+D,IAAI,IAAI;QAC5BkB,KAAK,CAAC,CAAClB,IAAI,CAAC,EAAEa,QAAQ,CAACb,IAAI,CAAC,EAAE,CAAC,EAAEe,gBAAgB,CAACf,IAAI,CAAC,CAAC;MAC1D,CAAC,CAAC;;MAEF;MACA,MAAM6B,MAAM,GAAGtB,aAAa,CAACL,GAAG,CAACF,IAAI,KAAK;QACxCtE,EAAE,EAAEsE,IAAI;QACRZ,IAAI,EAAEY,IAAI;QACVrD,OAAO,EAAEkE,QAAQ,CAACb,IAAI,CAAC,CAACgB,IAAI;QAC5BnE,QAAQ,EAAE2D,MAAM,CAACC,IAAI,CAACM,gBAAgB,CAACf,IAAI,CAAC,CAACnD,QAAQ,CAAC,CAACqD,GAAG,CAACnD,KAAK,KAAK;UACnErB,EAAE,EAAE,GAAGsE,IAAI,IAAIjD,KAAK,EAAE;UACtBqC,IAAI,EAAErC,KAAK;UACXJ,OAAO,EAAEoE,gBAAgB,CAACf,IAAI,CAAC,CAACnD,QAAQ,CAACE,KAAK,CAAC,CAACJ,OAAO;UACvDE,QAAQ,EAAE2D,MAAM,CAACC,IAAI,CAACM,gBAAgB,CAACf,IAAI,CAAC,CAACnD,QAAQ,CAACE,KAAK,CAAC,CAACF,QAAQ,IAAI,CAAC,CAAC,CAAC,CAACqD,GAAG,CAAC3C,UAAU,KAAK;YAC9F7B,EAAE,EAAE,GAAGsE,IAAI,IAAIjD,KAAK,IAAIQ,UAAU,EAAE;YACpC6B,IAAI,EAAE7B,UAAU;YAChBZ,OAAO,EAAEoE,gBAAgB,CAACf,IAAI,CAAC,CAACnD,QAAQ,CAACE,KAAK,CAAC,CAACF,QAAQ,CAACU,UAAU,CAAC,CAACZ,OAAO;YAC5EE,QAAQ,EAAE;UACZ,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC,CAAC;MAEHrD,aAAa,CAACqI,MAAM,CAAC;IAEvB,CAAC,MAAM;MACL;;MAEA;MACA,MAAMC,mBAAmB,GAAGhC,YAAY,CAACI,GAAG,CAACG,WAAW,IAAI;QAC1D,OAAOA,WAAW,CACfN,MAAM,CAACC,IAAI,IAAIO,aAAa,CAACpC,QAAQ,CAAC6B,IAAI,CAAC,CAAC,CAC5CU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKR,UAAU,CAACQ,CAAC,CAAC,GAAGR,UAAU,CAACO,CAAC,CAAC,CAAC;MAClD,CAAC,CAAC,CAACZ,MAAM,CAACM,WAAW,IAAIA,WAAW,CAACtE,MAAM,GAAG,CAAC,CAAC;;MAEhD;MACA,MAAMgG,MAAM,GAAG;QACb3C,IAAI,EAAE,MAAM;QACZ4C,KAAK,EAAE,CAAC;QACRnF,QAAQ,EAAE,CAAC,CAAC;QACZoF,SAAS,EAAE,CAAC,CAAC,CAAC;MAChB,CAAC;;MAED;MACA,MAAMC,WAAW,GAAG,CAAC,CAAC;MACtB3B,aAAa,CAACtE,OAAO,CAAC+D,IAAI,IAAI;QAC5BkC,WAAW,CAAClC,IAAI,CAAC,GAAG;UAClBgC,KAAK,EAAE5B,UAAU,CAACJ,IAAI,CAAC;UACvBmC,QAAQ,EAAE;QACZ,CAAC;MACH,CAAC,CAAC;;MAEF;MACA,MAAMC,iBAAiB,GAAGA,CAAC/B,WAAW,EAAEgC,IAAI,EAAEL,KAAK,GAAG,CAAC,KAAK;QAC1D,IAAI3B,WAAW,CAACtE,MAAM,KAAK,CAAC,EAAE;QAE9B,MAAMiE,IAAI,GAAGK,WAAW,CAAC,CAAC,CAAC;;QAE3B;QACA,IAAI,CAACgC,IAAI,CAACxF,QAAQ,CAACmD,IAAI,CAAC,EAAE;UACxBqC,IAAI,CAACxF,QAAQ,CAACmD,IAAI,CAAC,GAAG;YACpBZ,IAAI,EAAEY,IAAI;YACVgC,KAAK,EAAE,CAAC;YACRnF,QAAQ,EAAE,CAAC,CAAC;YACZwE,MAAM,EAAEgB,IAAI;YACZC,YAAY,EAAE;UAChB,CAAC;;UAED;UACA,IAAI,CAACJ,WAAW,CAAClC,IAAI,CAAC,CAACmC,QAAQ,EAAE;YAC/BD,WAAW,CAAClC,IAAI,CAAC,CAACmC,QAAQ,GAAGE,IAAI,CAACxF,QAAQ,CAACmD,IAAI,CAAC;UAClD,CAAC,MAAM;YACL,IAAInF,OAAO,GAAGqH,WAAW,CAAClC,IAAI,CAAC,CAACmC,QAAQ;YACxC,OAAOtH,OAAO,CAACyH,YAAY,EAAE;cAC3BzH,OAAO,GAAGA,OAAO,CAACyH,YAAY;YAChC;YACAzH,OAAO,CAACyH,YAAY,GAAGD,IAAI,CAACxF,QAAQ,CAACmD,IAAI,CAAC;UAC5C;QACF;;QAEA;QACAqC,IAAI,CAACxF,QAAQ,CAACmD,IAAI,CAAC,CAACgC,KAAK,IAAIA,KAAK;;QAElC;QACA,IAAI3B,WAAW,CAACtE,MAAM,GAAG,CAAC,EAAE;UAC1BqG,iBAAiB,CAAC/B,WAAW,CAACkC,KAAK,CAAC,CAAC,CAAC,EAAEF,IAAI,CAACxF,QAAQ,CAACmD,IAAI,CAAC,EAAEgC,KAAK,CAAC;QACrE;MACF,CAAC;;MAED;MACAF,mBAAmB,CAAC7F,OAAO,CAACoE,WAAW,IAAI;QACzC+B,iBAAiB,CAAC/B,WAAW,EAAE0B,MAAM,CAAC;MACxC,CAAC,CAAC;;MAEF;MACA,MAAMS,QAAQ,GAAG,CAAC,CAAC;;MAEnB;MACA,MAAMC,YAAY,GAAGA,CAACP,WAAW,EAAEQ,eAAe,EAAEC,MAAM,GAAG,EAAE,KAAK;QAClE;QACA,MAAMC,KAAK,GAAGpC,MAAM,CAACC,IAAI,CAACyB,WAAW,CAAC,CAACxB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKsB,WAAW,CAACtB,CAAC,CAAC,CAACoB,KAAK,GAAGE,WAAW,CAACvB,CAAC,CAAC,CAACqB,KAAK,CAAC;QAElG,KAAK,MAAMhC,IAAI,IAAI4C,KAAK,EAAE;UACxB;UACA,MAAMC,SAAS,GAAG,CAAC7C,IAAI,EAAE,GAAG2C,MAAM,CAAC;UACnC,MAAMG,YAAY,GAAGZ,WAAW,CAAClC,IAAI,CAAC,CAACgC,KAAK;;UAE5C;UACA,MAAMe,UAAU,GAAGF,SAAS,CAACG,IAAI,CAAC,GAAG,CAAC;UACtCR,QAAQ,CAACO,UAAU,CAAC,GAAG;YACrBH,KAAK,EAAEC,SAAS;YAChBlG,OAAO,EAAEmG;UACX,CAAC;;UAED;UACA,MAAMG,sBAAsB,GAAG,EAAE;UACjC,IAAIxH,IAAI,GAAGyG,WAAW,CAAClC,IAAI,CAAC,CAACmC,QAAQ;UAErC,OAAO1G,IAAI,EAAE;YACX;YACA,MAAMyH,IAAI,GAAG,EAAE;YACf,IAAIC,aAAa,GAAG1H,IAAI,CAACuG,KAAK;YAC9B,IAAIX,MAAM,GAAG5F,IAAI,CAAC4F,MAAM;YAExB,OAAOA,MAAM,IAAIA,MAAM,CAACjC,IAAI,KAAK,MAAM,EAAE;cACvC8D,IAAI,CAACE,OAAO,CAAC/B,MAAM,CAACjC,IAAI,CAAC;cACzBiC,MAAM,GAAGA,MAAM,CAACA,MAAM;YACxB;YAEA,IAAI6B,IAAI,CAACnH,MAAM,GAAG,CAAC,EAAE;cACnBkH,sBAAsB,CAACzG,IAAI,CAAC;gBAC1B0G,IAAI;gBACJlB,KAAK,EAAEmB;cACT,CAAC,CAAC;YACJ;YAEA1H,IAAI,GAAGA,IAAI,CAAC6G,YAAY;UAC1B;;UAEA;UACA,IAAIW,sBAAsB,CAAClH,MAAM,GAAG,CAAC,EAAE;YACrC,MAAMsH,kBAAkB,GAAG,CAAC,CAAC;;YAE7B;YACAJ,sBAAsB,CAAChH,OAAO,CAAC,CAAC;cAACiH,IAAI;cAAElB;YAAK,CAAC,KAAK;cAChDkB,IAAI,CAACjH,OAAO,CAACqH,QAAQ,IAAI;gBACvBD,kBAAkB,CAACC,QAAQ,CAAC,GAAG,CAACD,kBAAkB,CAACC,QAAQ,CAAC,IAAI,CAAC,IAAItB,KAAK;cAC5E,CAAC,CAAC;YACJ,CAAC,CAAC;;YAEF;YACA,MAAMuB,cAAc,GAAG,CAAC,CAAC;YACzB/C,MAAM,CAACC,IAAI,CAAC4C,kBAAkB,CAAC,CAACpH,OAAO,CAAC+D,IAAI,IAAI;cAC9C,IAAIqD,kBAAkB,CAACrD,IAAI,CAAC,IAAIM,eAAe,EAAE;gBAC/CiD,cAAc,CAACvD,IAAI,CAAC,GAAG;kBACrBgC,KAAK,EAAEqB,kBAAkB,CAACrD,IAAI,CAAC;kBAC/BmC,QAAQ,EAAE;gBACZ,CAAC;cACH;YACF,CAAC,CAAC;;YAEF;YACA,IAAI3B,MAAM,CAACC,IAAI,CAAC8C,cAAc,CAAC,CAACxH,MAAM,GAAG,CAAC,EAAE;cAC1C0G,YAAY,CAACc,cAAc,EAAEN,sBAAsB,EAAEJ,SAAS,CAAC;YACjE;UACF;QACF;MACF,CAAC;;MAED;MACAJ,YAAY,CAACP,WAAW,EAAE,EAAE,CAAC;;MAE7B;MACA,MAAML,MAAM,GAAGtB,aAAa,CAACL,GAAG,CAACF,IAAI,IAAI;QACvC;QACA,MAAMwD,YAAY,GAAGhD,MAAM,CAACiD,MAAM,CAACjB,QAAQ,CAAC,CAACzC,MAAM,CAAC2D,CAAC,IAAIA,CAAC,CAACd,KAAK,CAAC,CAAC,CAAC,KAAK5C,IAAI,CAAC;;QAE7E;QACA,MAAMnD,QAAQ,GAAG,CAAC,CAAC;QACnB2G,YAAY,CAACvH,OAAO,CAAC6C,OAAO,IAAI;UAC9B,IAAIA,OAAO,CAAC8D,KAAK,CAAC7G,MAAM,GAAG,CAAC,EAAE;YAC5B,MAAM4H,UAAU,GAAG7E,OAAO,CAAC8D,KAAK,CAAC,CAAC,CAAC;YACnC,IAAI,CAAC/F,QAAQ,CAAC8G,UAAU,CAAC,EAAE;cACzB9G,QAAQ,CAAC8G,UAAU,CAAC,GAAG;gBACrBhH,OAAO,EAAEmC,OAAO,CAACnC,OAAO;gBACxBE,QAAQ,EAAE,CAAC;cACb,CAAC;YACH;;YAEA;YACA,IAAIiC,OAAO,CAAC8D,KAAK,CAAC7G,MAAM,GAAG,CAAC,EAAE;cAC5B,MAAM6H,SAAS,GAAG9E,OAAO,CAAC8D,KAAK,CAAC,CAAC,CAAC;cAClC/F,QAAQ,CAAC8G,UAAU,CAAC,CAAC9G,QAAQ,CAAC+G,SAAS,CAAC,GAAG;gBACzCjH,OAAO,EAAEmC,OAAO,CAACnC,OAAO;gBACxBE,QAAQ,EAAE,CAAC;cACb,CAAC;YACH;UACF;QACF,CAAC,CAAC;QAEF,OAAO;UACLnB,EAAE,EAAEsE,IAAI;UACRZ,IAAI,EAAEY,IAAI;UACVrD,OAAO,EAAEyD,UAAU,CAACJ,IAAI,CAAC;UACzBnD,QAAQ,EAAE2D,MAAM,CAACC,IAAI,CAAC5D,QAAQ,CAAC,CAACqD,GAAG,CAAC2D,SAAS,KAAK;YAChDnI,EAAE,EAAE,GAAGsE,IAAI,IAAI6D,SAAS,EAAE;YAC1BzE,IAAI,EAAEyE,SAAS;YACflH,OAAO,EAAEE,QAAQ,CAACgH,SAAS,CAAC,CAAClH,OAAO;YACpCE,QAAQ,EAAE2D,MAAM,CAACC,IAAI,CAAC5D,QAAQ,CAACgH,SAAS,CAAC,CAAChH,QAAQ,CAAC,CAACqD,GAAG,CAAC4D,cAAc,KAAK;cACzEpI,EAAE,EAAE,GAAGsE,IAAI,IAAI6D,SAAS,IAAIC,cAAc,EAAE;cAC5C1E,IAAI,EAAE0E,cAAc;cACpBnH,OAAO,EAAEE,QAAQ,CAACgH,SAAS,CAAC,CAAChH,QAAQ,CAACiH,cAAc,CAAC,CAACnH,OAAO;cAC7DE,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC;MACH,CAAC,CAAC;MAEFrD,aAAa,CAACqI,MAAM,CAAC;IACvB;;IAEA;IACA,MAAMkC,eAAe,GAAG,CAAC,CAAC;IAC1B,IAAIxK,UAAU,EAAE;MACdA,UAAU,CAACgJ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACtG,OAAO,CAACR,IAAI,IAAI;QACrCsI,eAAe,CAACtI,IAAI,CAACC,EAAE,CAAC,GAAG,IAAI;MACjC,CAAC,CAAC;MACFhC,gBAAgB,CAACqK,eAAe,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMC,eAAe,GAAInE,IAAI,IAAK;IAChC/F,YAAY,CAAC+F,IAAI,CAAC;EACpB,CAAC;;EAED;EACA,MAAMoE,mBAAmB,GAAIC,CAAC,IAAK;IACjC,MAAM7G,KAAK,GAAG8G,UAAU,CAACD,CAAC,CAAC9G,MAAM,CAACC,KAAK,CAAC;IACxC,IAAI,CAAC+G,KAAK,CAAC/G,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE;MAC5CrD,aAAa,CAACqD,KAAK,CAAC;IACtB;EACF,CAAC;EAED,MAAMgH,sBAAsB,GAAIC,WAAW,IAAK;IAC9C,IAAI5L,mBAAmB,EAAE;MACvBA,mBAAmB,CAAC4L,WAAW,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMzF,UAAU,GAAIU,MAAM,IAAK;IAC7B7F,gBAAgB,CAAC6K,IAAI,KAAK;MACxB,GAAGA,IAAI;MACP,CAAChF,MAAM,GAAG,CAACgF,IAAI,CAAChF,MAAM;IACxB,CAAC,CAAC,CAAC;EACL,CAAC;;EAED;EACA,MAAMiF,uBAAuB,GAAIC,WAAW,IAAK;IAC/C,IAAI,CAACA,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAMjK,OAAO,GAAGiK,WAAW,CAACtE,KAAK,CAAC,GAAG,CAAC;IACtC,oBACE7H,OAAA;MAAKoM,SAAS,EAAC,aAAa;MAAA7H,QAAA,EACzBrC,OAAO,CAAC0F,GAAG,CAAC,CAACyE,MAAM,EAAEC,KAAK,kBACzBtM,OAAA;QAAkBoM,SAAS,EAAC,gBAAgB;QAAA7H,QAAA,EAAE8H;MAAM,GAAzCC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG,CAAC7L,QAAQ;IAC7BC,WAAW,CAAC4L,WAAW,CAAC;;IAExB;IACA9K,OAAO,CAACC,GAAG,CAAC,aAAa6K,WAAW,GAAG,SAAS,GAAG,UAAU,EAAE,CAAC;;IAEhE;IACA,IAAI,CAACA,WAAW,KAAK,CAAC1M,OAAO,IAAI,CAACC,cAAc,CAAC,EAAE;MACjDK,qBAAqB,CAAC,EAAE,CAAC;MACzBU,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EAED,oBACElB,OAAA;IAAKoM,SAAS,EAAC,kBAAkB;IAAA7H,QAAA,gBAC/BvE,OAAA;MAAKoM,SAAS,EAAC,wBAAwB;MAAA7H,QAAA,gBACrCvE,OAAA;QAAIoM,SAAS,EAAC,cAAc;QAAA7H,QAAA,EACzB,CAACxD,QAAQ,IAAIZ,cAAc,GACxB,cAAcA,cAAc,EAAE,GAC9B;MAAW;QAAAoM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACL1M,OAAA;QAAKoM,SAAS,EAAC,kBAAkB;QAAA7H,QAAA,eAC/BvE,OAAA;UAAOoM,SAAS,EAAC,cAAc;UAAA7H,QAAA,gBAC7BvE,OAAA;YAAAuE,QAAA,GAAM,YAAU,EAACxD,QAAQ,GAAG,IAAI,GAAG,KAAK;UAAA;YAAAwL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAChD1M,OAAA;YACE6M,IAAI,EAAC,UAAU;YACfC,OAAO,EAAE/L,QAAS;YAClBgM,QAAQ,EAAEJ;UAAe;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACF1M,OAAA;YAAMoM,SAAS,EAAC;UAAe;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAEN1M,OAAA;MAAKoM,SAAS,EAAC,MAAM;MAAA7H,QAAA,gBACnBvE,OAAA;QACEoM,SAAS,EAAE,OAAOvL,SAAS,KAAK,aAAa,GAAG,QAAQ,GAAG,EAAE,EAAG;QAChEmM,OAAO,EAAEA,CAAA,KAAMlM,YAAY,CAAC,aAAa,CAAE;QAAAyD,QAAA,EAC5C;MAED;QAAAgI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACT1M,OAAA;QACEoM,SAAS,EAAE,OAAOvL,SAAS,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC3DmM,OAAO,EAAEA,CAAA,KAAMlM,YAAY,CAAC,QAAQ,CAAE;QAAAyD,QAAA,EACvC;MAED;QAAAgI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAEL7L,SAAS,KAAK,aAAa,gBAC1Bb,OAAA;MAAKoM,SAAS,EAAC,aAAa;MAAA7H,QAAA,EACzB9D,OAAO,gBACNT,OAAA;QAAKoM,SAAS,EAAC,SAAS;QAAA7H,QAAA,EAAC;MAAO;QAAAgI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACpC/L,KAAK,gBACPX,OAAA;QAAKoM,SAAS,EAAC,OAAO;QAAA7H,QAAA,GAAC,gBAAI,EAAC5D,KAAK;MAAA;QAAA4L,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACtCnM,kBAAkB,CAACkD,MAAM,GAAG,CAAC,gBAC/BzD,OAAA;QAAKoM,SAAS,EAAC,gBAAgB;QAAA7H,QAAA,EAC5BhE,kBAAkB,CAACqH,GAAG,CAAC,CAACF,IAAI,EAAE4E,KAAK,kBAClCtM,OAAA;UAEEoM,SAAS,EAAE,eAAe/L,mBAAmB,KAAKqH,IAAI,CAACC,YAAY,GAAG,UAAU,GAAG,EAAE,EAAG;UACxFqF,OAAO,EAAEA,CAAA,KAAMjB,sBAAsB,CAACrE,IAAI,CAACC,YAAY,CAAE;UAAApD,QAAA,EAExD2H,uBAAuB,CAACxE,IAAI,CAACC,YAAY;QAAC,GAJtC2E,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAEN1M,OAAA;QAAKoM,SAAS,EAAC,cAAc;QAAA7H,QAAA,EAC1BxD,QAAQ,GACL,mBAAmB,GACnB;MAAiB;QAAAwL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,gBAEN1M,OAAA;MAAKoM,SAAS,EAAC,aAAa;MAAA7H,QAAA,EACzB9D,OAAO,gBACNT,OAAA;QAAKoM,SAAS,EAAC,SAAS;QAAA7H,QAAA,EAAC;MAAO;QAAAgI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACpC/L,KAAK,gBACPX,OAAA;QAAKoM,SAAS,EAAC,OAAO;QAAA7H,QAAA,GAAC,gBAAI,EAAC5D,KAAK;MAAA;QAAA4L,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACtCzL,UAAU,gBACZjB,OAAA;QAAKoM,SAAS,EAAC,aAAa;QAAA7H,QAAA,gBAC1BvE,OAAA;UAAKoM,SAAS,EAAC,iBAAiB;UAAA7H,QAAA,gBAC9BvE,OAAA;YAAKoM,SAAS,EAAC,oBAAoB;YAAA7H,QAAA,gBACjCvE,OAAA;cACEoM,SAAS,EAAE,iBAAiB7K,SAAS,KAAK,OAAO,GAAG,QAAQ,GAAG,EAAE,EAAG;cACpEyL,OAAO,EAAEA,CAAA,KAAMtB,eAAe,CAAC,OAAO,CAAE;cAAAnH,QAAA,EACzC;YAED;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACT1M,OAAA;cACEoM,SAAS,EAAE,iBAAiB7K,SAAS,KAAK,UAAU,GAAG,QAAQ,GAAG,EAAE,EAAG;cACvEyL,OAAO,EAAEA,CAAA,KAAMtB,eAAe,CAAC,UAAU,CAAE;cAAAnH,QAAA,EAC5C;YAED;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACN1M,OAAA;YAAKoM,SAAS,EAAC,iBAAiB;YAAA7H,QAAA,gBAC9BvE,OAAA;cAAAuE,QAAA,GAAO,mCAAQ,EAAC,CAAC9C,UAAU,GAAG,GAAG,EAAEwL,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;YAAA;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvD1M,OAAA;cACE6M,IAAI,EAAC,OAAO;cACZrJ,GAAG,EAAC,MAAM;cACVY,GAAG,EAAC,KAAK;cACT8I,IAAI,EAAC,MAAM;cACXnI,KAAK,EAAEtD,UAAW;cAClBsL,QAAQ,EAAEpB;YAAoB;cAAAY,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAEN1M,OAAA;UAAKoM,SAAS,EAAC,oBAAoB;UAAA7H,QAAA,gBACjCvE,OAAA;YAAKoM,SAAS,EAAC,aAAa;YAAA7H,QAAA,gBAC1BvE,OAAA;cAAMoM,SAAS,EAAC,cAAc;cAAChG,KAAK,EAAE;gBAAE+G,eAAe,EAAE;cAAU;YAAE;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7E1M,OAAA;cAAAuE,QAAA,EAAM;YAAK;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC,eACN1M,OAAA;YAAKoM,SAAS,EAAC,aAAa;YAAA7H,QAAA,gBAC1BvE,OAAA;cAAMoM,SAAS,EAAC,cAAc;cAAChG,KAAK,EAAE;gBAAE+G,eAAe,EAAE;cAAU;YAAE;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7E1M,OAAA;cAAAuE,QAAA,EAAM;YAAQ;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB,CAAC,eACN1M,OAAA;YAAKoM,SAAS,EAAC,aAAa;YAAA7H,QAAA,gBAC1BvE,OAAA;cAAMoM,SAAS,EAAC,cAAc;cAAChG,KAAK,EAAE;gBAAE+G,eAAe,EAAE;cAAU;YAAE;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7E1M,OAAA;cAAAuE,QAAA,EAAM;YAAQ;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClB,CAAC,eACN1M,OAAA;YAAKoM,SAAS,EAAC,aAAa;YAAA7H,QAAA,gBAC1BvE,OAAA;cAAMoM,SAAS,EAAC,cAAc;cAAChG,KAAK,EAAE;gBAAE+G,eAAe,EAAE;cAAU;YAAE;cAAAZ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eAC7E1M,OAAA;cAAAuE,QAAA,EAAM;YAAK;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC,eAEN1M,OAAA;UAAKoM,SAAS,EAAC,2BAA2B;UAAA7H,QAAA,eACxCvE,OAAA;YACEoM,SAAS,EAAC,iBAAiB;YAC3BgB,GAAG,EAAEzL,MAAO;YACZ0L,KAAK,EAAC,MAAM;YACZC,MAAM,EAAC;UAAK;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACR;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eAEN1M,OAAA;UAAKoM,SAAS,EAAC,oBAAoB;UAAA7H,QAAA,gBACjCvE,OAAA;YAAAuE,QAAA,GAAIhD,SAAS,KAAK,OAAO,GAAG,OAAO,GAAG,WAAW,EAAC,4DAAa;UAAA;YAAAgL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACnE1M,OAAA;YAAAuE,QAAA,gBACEvE,OAAA;cAAAuE,QAAA,EAAI;YAAmB;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC5B1M,OAAA;cAAAuE,QAAA,EAAI;YAAqB;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC9B1M,OAAA;cAAAuE,QAAA,EAAI;YAAwB;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjC1M,OAAA;cAAAuE,QAAA,EAAI;YAAuB;cAAAgI,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC9B,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,gBAEN1M,OAAA;QAAKoM,SAAS,EAAC,cAAc;QAAA7H,QAAA,EAC1BxD,QAAQ,GACL,qBAAqB,GACrB;MAA6B;QAAAwL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN,eAED1M,OAAA;MAAOuN,GAAG;MAAAhJ,QAAA,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAAgI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAACpM,EAAA,CAr5BIL,qBAAqB;AAAAuN,EAAA,GAArBvN,qBAAqB;AAu5B3B,eAAeA,qBAAqB;AAAC,IAAAuN,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}