{"ast":null,"code":"/**\n * 브라우즈 모드를 위한 파일 시스템 서비스\n * \n * API를 통해 파일 시스템과 상호작용하는 함수들 제공\n */\n\n// API 기본 URL\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n/**\n * 디렉토리 구조 가져오기 함수\n * @param {string} path - 확인할 디렉토리 경로\n * @returns {Promise<Object>} 디렉토리 구조 데이터\n */\nexport const getDirectoryStructure = async (path = 'src/browse_mode_sample_data') => {\n  console.log('디렉토리 구조 요청:', path);\n  try {\n    const response = await fetch(`${API_BASE_URL}/files?path=${encodeURIComponent(path)}`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`디렉토리 구조 가져오기 실패 (${response.status}): ${errorText}`);\n    }\n    const data = await response.json();\n    console.log('디렉토리 구조 받음:', path);\n    return data;\n  } catch (error) {\n    console.error(\"디렉토리 구조 가져오기 오류:\", error);\n    throw error;\n  }\n};\n\n/**\n * 파일 내용 가져오기 함수\n * @param {string} path - 파일 경로\n * @returns {Promise<Object|string>} 파일 내용 (JSON 또는 텍스트)\n */\nexport const getFileContent = async path => {\n  console.log('파일 내용 요청:', path);\n  try {\n    const response = await fetch(`${API_BASE_URL}/file-content?path=${encodeURIComponent(path)}`);\n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`파일 내용 가져오기 실패 (${response.status}): ${errorText}`);\n    }\n\n    // 파일 타입에 따라 다른 처리\n    const contentType = response.headers.get('Content-Type');\n    let data;\n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n      console.log('JSON 파일 내용 받음:', path);\n    } else {\n      data = await response.text();\n      console.log('텍스트 파일 내용 받음:', path);\n    }\n    return data;\n  } catch (error) {\n    console.error(\"파일 내용 가져오기 오류:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getDirectoryStructure","path","console","log","response","fetch","encodeURIComponent","ok","errorText","text","Error","status","data","json","error","getFileContent","contentType","headers","get","includes"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/services/fileSystemService.js"],"sourcesContent":["/**\n * 브라우즈 모드를 위한 파일 시스템 서비스\n * \n * API를 통해 파일 시스템과 상호작용하는 함수들 제공\n */\n\n// API 기본 URL\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n/**\n * 디렉토리 구조 가져오기 함수\n * @param {string} path - 확인할 디렉토리 경로\n * @returns {Promise<Object>} 디렉토리 구조 데이터\n */\nexport const getDirectoryStructure = async (path = 'src/browse_mode_sample_data') => {\n  console.log('디렉토리 구조 요청:', path);\n  \n  try {\n    const response = await fetch(`${API_BASE_URL}/files?path=${encodeURIComponent(path)}`);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`디렉토리 구조 가져오기 실패 (${response.status}): ${errorText}`);\n    }\n    \n    const data = await response.json();\n    console.log('디렉토리 구조 받음:', path);\n    return data;\n  } catch (error) {\n    console.error(\"디렉토리 구조 가져오기 오류:\", error);\n    throw error;\n  }\n};\n\n/**\n * 파일 내용 가져오기 함수\n * @param {string} path - 파일 경로\n * @returns {Promise<Object|string>} 파일 내용 (JSON 또는 텍스트)\n */\nexport const getFileContent = async (path) => {\n  console.log('파일 내용 요청:', path);\n  \n  try {\n    const response = await fetch(`${API_BASE_URL}/file-content?path=${encodeURIComponent(path)}`);\n    \n    if (!response.ok) {\n      const errorText = await response.text();\n      throw new Error(`파일 내용 가져오기 실패 (${response.status}): ${errorText}`);\n    }\n    \n    // 파일 타입에 따라 다른 처리\n    const contentType = response.headers.get('Content-Type');\n    let data;\n    \n    if (contentType && contentType.includes('application/json')) {\n      data = await response.json();\n      console.log('JSON 파일 내용 받음:', path);\n    } else {\n      data = await response.text();\n      console.log('텍스트 파일 내용 받음:', path);\n    }\n    \n    return data;\n  } catch (error) {\n    console.error(\"파일 내용 가져오기 오류:\", error);\n    throw error;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,IAAI,GAAG,6BAA6B,KAAK;EACnFC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,IAAI,CAAC;EAEhC,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,eAAeO,kBAAkB,CAACL,IAAI,CAAC,EAAE,CAAC;IAEtF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,oBAAoBN,QAAQ,CAACO,MAAM,MAAMH,SAAS,EAAE,CAAC;IACvE;IAEA,MAAMI,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCX,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEF,IAAI,CAAC;IAChC,OAAOW,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAG,MAAOd,IAAI,IAAK;EAC5CC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEF,IAAI,CAAC;EAE9B,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,YAAY,sBAAsBO,kBAAkB,CAACL,IAAI,CAAC,EAAE,CAAC;IAE7F,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,kBAAkBN,QAAQ,CAACO,MAAM,MAAMH,SAAS,EAAE,CAAC;IACrE;;IAEA;IACA,MAAMQ,WAAW,GAAGZ,QAAQ,CAACa,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIN,IAAI;IAER,IAAII,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3DP,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;MAC5BX,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEF,IAAI,CAAC;IACrC,CAAC,MAAM;MACLW,IAAI,GAAG,MAAMR,QAAQ,CAACK,IAAI,CAAC,CAAC;MAC5BP,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,IAAI,CAAC;IACpC;IAEA,OAAOW,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdZ,OAAO,CAACY,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IACtC,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}