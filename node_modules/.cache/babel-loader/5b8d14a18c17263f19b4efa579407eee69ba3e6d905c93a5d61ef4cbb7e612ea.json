{"ast":null,"code":"/**\n * File system service for the browse mode\n * \n * This service provides functions to interact with the file system\n * Note: In a real production app, this would make API calls to a backend\n * For this mockup, we're simulating the API responses\n */\n\n// Function to get directory structure\nexport const getDirectoryStructure = async (path = 'src/browse_mode_sample_data') => {\n  // In a real app, this would be an API call to the backend\n  // For the mockup, we'll simulate the API response\n  try {\n    const response = await fetch(`/api/files?path=${encodeURIComponent(path)}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch directory structure: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching directory structure:\", error);\n\n    // For mockup purposes, return simulated directory structure\n    // This would be replaced with actual error handling in production\n    return simulateDirectoryStructure(path);\n  }\n};\n\n// Simulates directory structure for mockup purposes\nconst simulateDirectoryStructure = path => {\n  // Extract folder name from path\n  const parts = path.split('/');\n  const currentFolder = parts[parts.length - 1];\n\n  // Mock data based on the path\n  if (path === 'src/browse_mode_sample_data') {\n    return {\n      id: 'root',\n      name: 'browse_mode_sample_data',\n      type: 'folder',\n      path: path,\n      children: [{\n        id: 'product',\n        name: '상품',\n        type: 'folder',\n        path: `${path}/상품`\n      }]\n    };\n  } else if (path === 'src/browse_mode_sample_data/상품') {\n    return {\n      id: 'product',\n      name: '상품',\n      type: 'folder',\n      path: path,\n      children: [{\n        id: 'coupang',\n        name: '쿠팡.xlsx',\n        type: 'file',\n        path: `${path}/쿠팡.xlsx`,\n        extension: 'xlsx'\n      }]\n    };\n  }\n\n  // Default response for unknown paths\n  return {\n    id: Date.now().toString(),\n    name: currentFolder,\n    type: 'folder',\n    path: path,\n    children: []\n  };\n};\n\n// Function to get file content\nexport const getFileContent = async path => {\n  // In a real app, this would be an API call to the backend\n  try {\n    const response = await fetch(`/api/file-content?path=${encodeURIComponent(path)}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch file content: ${response.statusText}`);\n    }\n    return await response.text();\n  } catch (error) {\n    console.error(\"Error fetching file content:\", error);\n    return \"// Mock file content for \" + path;\n  }\n};","map":{"version":3,"names":["getDirectoryStructure","path","response","fetch","encodeURIComponent","ok","Error","statusText","json","error","console","simulateDirectoryStructure","parts","split","currentFolder","length","id","name","type","children","extension","Date","now","toString","getFileContent","text"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/services/fileSystemService.js"],"sourcesContent":["/**\n * File system service for the browse mode\n * \n * This service provides functions to interact with the file system\n * Note: In a real production app, this would make API calls to a backend\n * For this mockup, we're simulating the API responses\n */\n\n// Function to get directory structure\nexport const getDirectoryStructure = async (path = 'src/browse_mode_sample_data') => {\n  // In a real app, this would be an API call to the backend\n  // For the mockup, we'll simulate the API response\n  try {\n    const response = await fetch(`/api/files?path=${encodeURIComponent(path)}`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch directory structure: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching directory structure:\", error);\n    \n    // For mockup purposes, return simulated directory structure\n    // This would be replaced with actual error handling in production\n    return simulateDirectoryStructure(path);\n  }\n};\n\n// Simulates directory structure for mockup purposes\nconst simulateDirectoryStructure = (path) => {\n  // Extract folder name from path\n  const parts = path.split('/');\n  const currentFolder = parts[parts.length - 1];\n  \n  // Mock data based on the path\n  if (path === 'src/browse_mode_sample_data') {\n    return {\n      id: 'root',\n      name: 'browse_mode_sample_data',\n      type: 'folder',\n      path: path,\n      children: [\n        {\n          id: 'product',\n          name: '상품',\n          type: 'folder',\n          path: `${path}/상품`,\n        }\n      ]\n    };\n  } else if (path === 'src/browse_mode_sample_data/상품') {\n    return {\n      id: 'product',\n      name: '상품',\n      type: 'folder',\n      path: path,\n      children: [\n        {\n          id: 'coupang',\n          name: '쿠팡.xlsx',\n          type: 'file',\n          path: `${path}/쿠팡.xlsx`,\n          extension: 'xlsx'\n        }\n      ]\n    };\n  }\n  \n  // Default response for unknown paths\n  return {\n    id: Date.now().toString(),\n    name: currentFolder,\n    type: 'folder',\n    path: path,\n    children: []\n  };\n};\n\n// Function to get file content\nexport const getFileContent = async (path) => {\n  // In a real app, this would be an API call to the backend\n  try {\n    const response = await fetch(`/api/file-content?path=${encodeURIComponent(path)}`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch file content: ${response.statusText}`);\n    }\n    \n    return await response.text();\n  } catch (error) {\n    console.error(\"Error fetching file content:\", error);\n    return \"// Mock file content for \" + path;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO,MAAMA,qBAAqB,GAAG,MAAAA,CAAOC,IAAI,GAAG,6BAA6B,KAAK;EACnF;EACA;EACA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mBAAmBC,kBAAkB,CAACH,IAAI,CAAC,EAAE,CAAC;IAE3E,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wCAAwCJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IAChF;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;;IAE3D;IACA;IACA,OAAOE,0BAA0B,CAACV,IAAI,CAAC;EACzC;AACF,CAAC;;AAED;AACA,MAAMU,0BAA0B,GAAIV,IAAI,IAAK;EAC3C;EACA,MAAMW,KAAK,GAAGX,IAAI,CAACY,KAAK,CAAC,GAAG,CAAC;EAC7B,MAAMC,aAAa,GAAGF,KAAK,CAACA,KAAK,CAACG,MAAM,GAAG,CAAC,CAAC;;EAE7C;EACA,IAAId,IAAI,KAAK,6BAA6B,EAAE;IAC1C,OAAO;MACLe,EAAE,EAAE,MAAM;MACVC,IAAI,EAAE,yBAAyB;MAC/BC,IAAI,EAAE,QAAQ;MACdjB,IAAI,EAAEA,IAAI;MACVkB,QAAQ,EAAE,CACR;QACEH,EAAE,EAAE,SAAS;QACbC,IAAI,EAAE,IAAI;QACVC,IAAI,EAAE,QAAQ;QACdjB,IAAI,EAAE,GAAGA,IAAI;MACf,CAAC;IAEL,CAAC;EACH,CAAC,MAAM,IAAIA,IAAI,KAAK,gCAAgC,EAAE;IACpD,OAAO;MACLe,EAAE,EAAE,SAAS;MACbC,IAAI,EAAE,IAAI;MACVC,IAAI,EAAE,QAAQ;MACdjB,IAAI,EAAEA,IAAI;MACVkB,QAAQ,EAAE,CACR;QACEH,EAAE,EAAE,SAAS;QACbC,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,MAAM;QACZjB,IAAI,EAAE,GAAGA,IAAI,UAAU;QACvBmB,SAAS,EAAE;MACb,CAAC;IAEL,CAAC;EACH;;EAEA;EACA,OAAO;IACLJ,EAAE,EAAEK,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IACzBN,IAAI,EAAEH,aAAa;IACnBI,IAAI,EAAE,QAAQ;IACdjB,IAAI,EAAEA,IAAI;IACVkB,QAAQ,EAAE;EACZ,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMK,cAAc,GAAG,MAAOvB,IAAI,IAAK;EAC5C;EACA,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0BAA0BC,kBAAkB,CAACH,IAAI,CAAC,EAAE,CAAC;IAElF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACzE;IAEA,OAAO,MAAML,QAAQ,CAACuB,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOhB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,2BAA2B,GAAGR,IAAI;EAC3C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}