{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\";\nimport React from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  groupData\n}) => {\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value is in any group from the substring grouping\n  const isValueInGroups = (value, groups) => {\n    if (!groups) return false;\n\n    // Check each group\n    for (const substring in groups) {\n      if (substring === '__ungrouped__') continue;\n      const group = groups[substring];\n      if (group.includes(value)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, applyGrouping = false) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Check if we should apply grouping colors (when substring grouping is active)\n    if (applyGrouping && groupData && groupData.groups) {\n      const valueText = typeof value === 'string' ? value : value.value;\n      const grouped = isValueInGroups(valueText, groupData.groups);\n      className += grouped ? ' grouped' : ' ungrouped';\n    }\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: className,\n      children: typeof value === 'string' ? value : value.value\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring grouping data\n    if (row.type === 'substring-grouping') {\n      return renderSubstringGroupingView(row);\n    }\n\n    // 부분문자열 그룹화 단계가 활성화 되어 있는지 확인\n    const isSubstringGroupingActive = groupData && groupData.type === 'substring-grouping';\n\n    // Apply grouping colors to the immediate previous pipeline step\n    const applyGrouping = isSubstringGroupingActive && groupData.previous && groupData.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, applyGrouping);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, applyGrouping));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    } else if (row.type === 'delimiter-separation') {\n      // For delimiter separation\n      const elements = [];\n      row.separated.forEach((item, idx) => {\n        elements.push(renderTag(item, item.source || 'text', `delim-${idx}`, applyGrouping));\n      });\n      return elements;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, applyGrouping);\n  };\n\n  // Render substring grouping data with color-coded grouped vs ungrouped items\n  const renderSubstringGroupingView = row => {\n    var _row$ungrouped;\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-grouping-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"debug-info\",\n        style: {\n          marginBottom: '10px',\n          fontSize: '12px',\n          color: '#666'\n        },\n        children: [\"\\uADF8\\uB8F9\\uD654 \\uC815\\uBCF4: \", Object.keys(row.groups || {}).length, \"\\uAC1C \\uADF8\\uB8F9,\", ((_row$ungrouped = row.ungrouped) === null || _row$ungrouped === void 0 ? void 0 : _row$ungrouped.length) || 0, \"\\uAC1C \\uBBF8\\uADF8\\uB8F9\\uD654 \\uD56D\\uBAA9\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), row.previous.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const isGrouped = isValueInGroups(value, row.groups);\n        const groupClass = isGrouped ? 'grouped' : 'ungrouped';\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `value-tag ${groupClass}`,\n          title: isGrouped ? '그룹에 포함됨' : '그룹화되지 않음',\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, applyGrouping) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, applyGrouping));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, applyGrouping));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"enhanced-view\",\n            children: renderEnhancedView(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","groupData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","isValueInGroups","value","groups","group","renderTag","source","key","applyGrouping","valueText","grouped","renderEnhancedView","row","type","renderSubstringGroupingView","isSubstringGroupingActive","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","elements","item","_row$ungrouped","style","marginBottom","fontSize","color","Object","keys","ungrouped","map","isGrouped","groupClass","title","Array","isArray","every","v","val","index","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, groupData }) => {\n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value is in any group from the substring grouping\n  const isValueInGroups = (value, groups) => {\n    if (!groups) return false;\n    \n    // Check each group\n    for (const substring in groups) {\n      if (substring === '__ungrouped__') continue;\n      const group = groups[substring];\n      if (group.includes(value)) {\n        return true;\n      }\n    }\n    \n    return false;\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, applyGrouping = false) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Check if we should apply grouping colors (when substring grouping is active)\n    if (applyGrouping && groupData && groupData.groups) {\n      const valueText = typeof value === 'string' ? value : value.value;\n      const grouped = isValueInGroups(valueText, groupData.groups);\n      className += grouped ? ' grouped' : ' ungrouped';\n    }\n    \n    return (\n      <span key={key} className={className}>\n        {typeof value === 'string' ? value : value.value}\n      </span>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring grouping data\n    if (row.type === 'substring-grouping') {\n      return renderSubstringGroupingView(row);\n    }\n    \n    // 부분문자열 그룹화 단계가 활성화 되어 있는지 확인\n    const isSubstringGroupingActive = groupData && groupData.type === 'substring-grouping';\n    \n    // Apply grouping colors to the immediate previous pipeline step\n    const applyGrouping = isSubstringGroupingActive && groupData.previous && \n                          groupData.previous.type === row.type;\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, applyGrouping);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, applyGrouping)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    } else if (row.type === 'delimiter-separation') {\n      // For delimiter separation\n      const elements = [];\n      \n      row.separated.forEach((item, idx) => {\n        elements.push(renderTag(item, \n                               item.source || 'text', \n                               `delim-${idx}`, \n                               applyGrouping));\n      });\n      \n      return elements;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, applyGrouping);\n  };\n  \n  // Render substring grouping data with color-coded grouped vs ungrouped items\n  const renderSubstringGroupingView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-grouping-view\">\n        <div className=\"debug-info\" style={{marginBottom: '10px', fontSize: '12px', color: '#666'}}>\n          그룹화 정보: {Object.keys(row.groups || {}).length}개 그룹, \n          {row.ungrouped?.length || 0}개 미그룹화 항목\n        </div>\n        \n        {row.previous.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const isGrouped = isValueInGroups(value, row.groups);\n          const groupClass = isGrouped ? 'grouped' : 'ungrouped';\n          \n          return (\n            <span \n              key={idx} \n              className={`value-tag ${groupClass}`}\n              title={isGrouped ? '그룹에 포함됨' : '그룹화되지 않음'}\n            >\n              {value}\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, applyGrouping) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, applyGrouping)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, applyGrouping)\n    );\n  };\n\n  return (\n    <div className=\"data-display\">\n      <table className=\"data-table\">\n        <tbody>\n          {flattenData(processedData).map((row, index) => (\n            <tr key={index}>\n              <td className=\"enhanced-view\">\n                {renderEnhancedView(row)}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}