{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/WorkspaceColumn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './WorkspaceColumn.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst WorkspaceColumn = ({\n  selectedFile,\n  fileContent\n}) => {\n  _s();\n  const [selectedTab, setSelectedTab] = useState('view');\n  const [content, setContent] = useState('');\n  const [tableData, setTableData] = useState({\n    headers: [],\n    rows: []\n  });\n  const [originalTableData, setOriginalTableData] = useState(null);\n  useEffect(() => {\n    // Reset content when file changes\n    if (selectedFile) {\n      if (selectedFile.type === 'xlsx_header') {\n        // Handle XLSX header selection\n        const {\n          sheetData,\n          headerIndex\n        } = selectedFile;\n\n        // Extract the column data for this header\n        const headerName = sheetData.headers[headerIndex];\n        const columnData = sheetData.rows.map(row => row[headerIndex]);\n\n        // Set the table data for display\n        const newTableData = {\n          headers: [headerName],\n          rows: columnData.map(value => [value])\n        };\n        setTableData(newTableData);\n        setOriginalTableData({\n          ...newTableData\n        });\n\n        // Switch to view tab\n        setSelectedTab('view');\n\n        // Set content to empty to use table view instead\n        setContent('');\n      } else if (selectedFile.type === 'file') {\n        // Regular file selected, show file info\n        setContent(JSON.stringify({\n          fileName: selectedFile.name,\n          path: selectedFile.path,\n          type: selectedFile.type\n        }, null, 2));\n\n        // Clear table data\n        setTableData({\n          headers: [],\n          rows: []\n        });\n        setOriginalTableData(null);\n      } else if (selectedFile.type === 'xlsx_sheet') {\n        // Sheet selected, show all data from the sheet\n        const {\n          sheetData\n        } = selectedFile;\n        const newTableData = {\n          headers: sheetData.headers,\n          rows: sheetData.rows\n        };\n        setTableData(newTableData);\n        setOriginalTableData({\n          ...newTableData\n        });\n\n        // Switch to view tab\n        setSelectedTab('view');\n\n        // Set content to empty to use table view instead\n        setContent('');\n      }\n    } else {\n      // No file selected\n      setContent(JSON.stringify({\n        message: \"No file selected\",\n        instruction: \"Select a file or header from the file explorer\"\n      }, null, 2));\n\n      // Clear table data\n      setTableData({\n        headers: [],\n        rows: []\n      });\n      setOriginalTableData(null);\n    }\n  }, [selectedFile]);\n  const handleTabChange = tab => {\n    setSelectedTab(tab);\n  };\n\n  // 분리분류 기능 처리 함수\n  const handleSeparationMagic = () => {\n    if (!tableData.headers.length || !tableData.rows.length) return;\n\n    // 원본 데이터가 있는 경우 활용 (리셋 가능하도록)\n    const dataToProcess = originalTableData ? [...originalTableData.rows] : [...tableData.rows];\n\n    // 중복 제거를 위한 Set 객체들\n    const bracketSet = new Set();\n    const valueSet = new Set();\n\n    // 각 행 처리\n    dataToProcess.forEach(row => {\n      const cellValue = row[0];\n\n      // null, undefined, 빈 문자열 등 건너뛰기\n      if (cellValue === null || cellValue === undefined || String(cellValue).trim() === '') {\n        return;\n      }\n      const cellValueStr = String(cellValue);\n\n      // 1. 괄호 내용 처리 - 다양한 괄호 유형 처리 (소괄호, 대괄호, 중괄호)\n      const bracketContentRegex = /\\(([^)]*)\\)|\\[([^\\]]*)\\]|\\{([^}]*)\\}/g;\n      let textWithoutBrackets = cellValueStr.replace(bracketContentRegex, (match, p1, p2, p3) => {\n        const content = p1 || p2 || p3; // 괄호 종류에 따라 p1, p2, p3 중 하나에 값이 있음\n        if (content && content.trim()) {\n          // 중복 제거를 위해 Set에 추가\n          bracketSet.add(content.trim());\n        }\n        return ' '; // 괄호와 내용을 공백으로 대체\n      });\n\n      // 2. 공백과 쉼표로 분리\n      const separatedValues = textWithoutBrackets.split(/[\\s,]+/) // 공백과 쉼표로 분리\n      .map(value => value.trim()).filter(value => value.length > 0); // 빈 문자열 제거\n\n      // 중복 제거를 위해 Set에 추가\n      separatedValues.forEach(value => {\n        if (value && value.trim()) {\n          valueSet.add(value.trim());\n        }\n      });\n    });\n\n    // 결과 값 배열 생성 (중복 제거된 값들)\n    let bracketValues = Array.from(bracketSet).map(val => `[괄호] ${val}`);\n    let normalValues = Array.from(valueSet);\n\n    // 결과가 없으면 \"분리된 값이 없습니다\" 표시\n    if (bracketValues.length === 0 && normalValues.length === 0) {\n      setTableData({\n        headers: [\"Group\", \"Token\"],\n        rows: [[\"\", \"분리된 값이 없습니다\"]]\n      });\n      return;\n    }\n\n    // 문자열 뒤집기 함수\n    const reverseString = str => str.split('').reverse().join('');\n\n    // 모든 최소 토큰 배열\n    const allMinTokens = [...bracketValues, ...normalValues];\n\n    // 3. 부분문자열 기반 아이템셋 마이닝 (공통 부분 문자열 추출)\n    // 자주 등장하는 부분 문자열 찾기 - 방향성 추가 (앞, 뒤)\n    const findCommonSubstrings = (tokens, minLength = 1, minCount = 2, direction = 'any') => {\n      // 부분 문자열 빈도 카운트\n      const substringFreq = {};\n\n      // 모든 가능한 부분 문자열 추출 및 카운트\n      tokens.forEach(token => {\n        // 괄호 태그 제거\n        const cleanToken = token.replace('[괄호] ', '');\n\n        // 앞에서부터 시작하는 부분 문자열 (접두사)\n        if (direction === 'prefix' || direction === 'any') {\n          for (let len = minLength; len <= cleanToken.length; len++) {\n            const substr = cleanToken.substring(0, len);\n            if (substr.length >= minLength) {\n              if (!substringFreq[substr]) {\n                substringFreq[substr] = {\n                  count: 1,\n                  tokens: [token],\n                  direction: 'prefix'\n                };\n              } else if (!substringFreq[substr].tokens.includes(token)) {\n                substringFreq[substr].count++;\n                substringFreq[substr].tokens.push(token);\n                // 방향 정보 업데이트 (접두사로도 사용됨)\n                if (substringFreq[substr].direction !== 'prefix') {\n                  substringFreq[substr].direction = 'both';\n                }\n              }\n            }\n          }\n        }\n\n        // 뒤에서부터 시작하는 부분 문자열 (접미사)\n        if (direction === 'suffix' || direction === 'any') {\n          for (let len = minLength; len <= cleanToken.length; len++) {\n            const substr = cleanToken.substring(cleanToken.length - len);\n            if (substr.length >= minLength) {\n              if (!substringFreq[substr]) {\n                substringFreq[substr] = {\n                  count: 1,\n                  tokens: [token],\n                  direction: 'suffix'\n                };\n              } else if (!substringFreq[substr].tokens.includes(token)) {\n                substringFreq[substr].count++;\n                substringFreq[substr].tokens.push(token);\n                // 방향 정보 업데이트 (접미사로도 사용됨)\n                if (substringFreq[substr].direction !== 'suffix') {\n                  substringFreq[substr].direction = 'both';\n                }\n              }\n            }\n          }\n        }\n\n        // 일반 부분 문자열 (중간에 있는 것도 포함)\n        if (direction === 'any') {\n          for (let len = minLength; len <= cleanToken.length; len++) {\n            for (let i = 1; i < cleanToken.length - len; i++) {\n              const substr = cleanToken.substring(i, i + len);\n              if (substr.length >= minLength) {\n                if (!substringFreq[substr]) {\n                  substringFreq[substr] = {\n                    count: 1,\n                    tokens: [token],\n                    direction: 'middle'\n                  };\n                } else if (!substringFreq[substr].tokens.includes(token)) {\n                  substringFreq[substr].count++;\n                  substringFreq[substr].tokens.push(token);\n                  // 이미 다른 방향이 있으면 'mixed'로 표시\n                  substringFreq[substr].direction = 'mixed';\n                }\n              }\n            }\n          }\n        }\n      });\n\n      // 빈도에 따라 필터링 및 정렬\n      const commonSubstrings = Object.entries(substringFreq).filter(([substr, data]) => {\n        // 기본 필터: 최소 개수 이상\n        const baseFilter = data.count >= minCount;\n\n        // 한글자인 경우 특별 처리: 더 높은 빈도 요구\n        if (substr.length === 1) {\n          // 한글자는 30%이상 커버해야 함\n          const coverage = data.tokens.length / tokens.length * 100;\n          return baseFilter && (coverage >= 30 || data.count >= 5);\n        }\n        return baseFilter;\n      }).sort((a, b) => {\n        // 1. 토큰 수 내림차순\n        const countDiff = b[1].count - a[1].count;\n        if (countDiff !== 0) return countDiff;\n\n        // 2. 길이 내림차순\n        const lengthDiff = b[0].length - a[0].length;\n        if (lengthDiff !== 0) return lengthDiff;\n\n        // 3. 알파벳 순서\n        return a[0].localeCompare(b[0]);\n      }).map(([substr, data]) => ({\n        substring: substr,\n        count: data.count,\n        tokens: data.tokens,\n        direction: data.direction,\n        percentCoverage: data.tokens.length / tokens.length * 100\n      }));\n      return commonSubstrings;\n    };\n\n    // 복합어 관계 분석 함수\n    const analyzeCompoundRelationships = tokens => {\n      const relationships = [];\n\n      // 모든 토큰 쌍에 대해 검사\n      for (let i = 0; i < tokens.length; i++) {\n        const token1 = tokens[i].replace('[괄호] ', '');\n        for (let j = 0; j < tokens.length; j++) {\n          if (i === j) continue;\n          const token2 = tokens[j].replace('[괄호] ', '');\n\n          // 복합어 관계 확인: token1이 token2의 일부인지\n          if (token2.includes(token1)) {\n            // 단순 포함이 아닌, 경계에 있는지 확인 (단어 경계)\n            const position = token2.indexOf(token1);\n            const beforeChar = position > 0 ? token2[position - 1] : '';\n            const afterChar = position + token1.length < token2.length ? token2[position + token1.length] : '';\n\n            // 단어 경계(띄어쓰기나 문자열 시작/끝)에 있는 경우만 복합어로 간주\n            const isWordBoundary = (position === 0 || beforeChar === ' ' || beforeChar === '-') && (position + token1.length === token2.length || afterChar === ' ' || afterChar === '-');\n            if (isWordBoundary || token1.length >= 2) {\n              relationships.push({\n                parent: tokens[j],\n                // 복합어\n                child: tokens[i],\n                // 부분어\n                position: position // 위치\n              });\n            }\n          }\n        }\n      }\n      return relationships;\n    };\n\n    // 복합어 관계 분석\n    const compoundRelationships = analyzeCompoundRelationships(allMinTokens);\n\n    // 방향별 부분 문자열 추출\n    const prefixSubstrings = findCommonSubstrings(allMinTokens, 1, 2, 'prefix');\n    const suffixSubstrings = findCommonSubstrings(allMinTokens, 1, 2, 'suffix');\n\n    // 중복 제거와 커버리지 최적화를 위한 그리디 알고리즘 - 방향성 고려 추가\n    const selectOptimalSubstrings = (substrings, tokens, compoundRel, maxGroups = 10) => {\n      // 커버리지가 좋은 순서로 정렬 (점수 계산 개선)\n      const sortedSubstrings = [...substrings].sort((a, b) => {\n        // 복합어 관계가 있는 서브스트링에 가중치 부여\n        const hasCompoundA = compoundRel.some(rel => rel.parent.includes(a.substring) || rel.child.includes(a.substring));\n        const hasCompoundB = compoundRel.some(rel => rel.parent.includes(b.substring) || rel.child.includes(b.substring));\n        if (hasCompoundA && !hasCompoundB) return -1;\n        if (!hasCompoundA && hasCompoundB) return 1;\n\n        // 토큰수 * 길이^2로 점수 계산 (더 많은 토큰을 커버하고 더 긴 부분문자열 우선)\n        // 길이에 제곱을 하여 더 긴 부분문자열을 강력히 선호\n        const scoreA = a.count * Math.pow(a.substring.length, 2);\n        const scoreB = b.count * Math.pow(b.substring.length, 2);\n        return scoreB - scoreA;\n      });\n      const selectedSubstrings = [];\n      const coveredTokens = new Set();\n\n      // 그리디 선택 (개선)\n      for (const substr of sortedSubstrings) {\n        // 새로운 토큰을 커버하는지 확인\n        const newCoverage = substr.tokens.some(token => !coveredTokens.has(token));\n\n        // 선택 조건 개선:\n        // 1. 새 토큰을 커버하거나\n        // 2. 중요 서브스트링(2글자 이상 & 3개 이상의 토큰) 또는\n        // 3. 높은 지지도를 가진 한글자 (한글자지만 중요한 의미를 가질 수 있음)\n        const isImportantSubstr = substr.substring.length >= 2 && substr.count >= 3;\n        const isHighSupportSingleChar = substr.substring.length === 1 && substr.count >= Math.max(4, tokens.length * 0.2);\n        if (newCoverage || isImportantSubstr || isHighSupportSingleChar) {\n          selectedSubstrings.push(substr);\n\n          // 커버된 토큰 업데이트\n          substr.tokens.forEach(token => coveredTokens.add(token));\n        }\n\n        // 방향별로 최대 그룹 수 제한\n        if (selectedSubstrings.length >= maxGroups) break;\n      }\n      return selectedSubstrings;\n    };\n\n    // 최적의 부분 문자열 선택 (방향별)\n    const optimalPrefixSubstrings = selectOptimalSubstrings(prefixSubstrings, allMinTokens, compoundRelationships, 8);\n    const optimalSuffixSubstrings = selectOptimalSubstrings(suffixSubstrings, allMinTokens, compoundRelationships, 8);\n\n    // 복합어 관계만으로 그룹 형성\n    const formCompoundGroups = (relationships, tokens) => {\n      // 복합어를 키로 하는 그룹 맵 생성\n      const compoundGroups = {};\n      relationships.forEach(rel => {\n        const parentToken = rel.parent;\n        if (!compoundGroups[parentToken]) {\n          compoundGroups[parentToken] = {\n            parent: parentToken,\n            children: [rel.child],\n            positions: [rel.position]\n          };\n        } else if (!compoundGroups[parentToken].children.includes(rel.child)) {\n          compoundGroups[parentToken].children.push(rel.child);\n          compoundGroups[parentToken].positions.push(rel.position);\n        }\n      });\n\n      // 자식이 많은 순으로 정렬\n      const sortedGroups = Object.values(compoundGroups).sort((a, b) => b.children.length - a.children.length).filter(group => group.children.length >= 2); // 최소 2개 이상의 자식을 가진 그룹만\n\n      return sortedGroups.slice(0, 5); // 상위 5개 그룹만 선택\n    };\n\n    // 복합어 그룹 형성\n    const compoundGroups = formCompoundGroups(compoundRelationships, allMinTokens);\n\n    // 테이블 행 구성\n    const finalRows = [];\n\n    // 1. 접두사(앞글자) 그룹 헤더 추가\n    finalRows.push([\"🌲 접두사 기준 그룹 (앞글자순)\", \"\"]);\n\n    // 접두사 기준 그룹 추가\n    optimalPrefixSubstrings.forEach(group => {\n      finalRows.push([`📌 앞부분: ${group.substring} (${group.count})`, \"\"]);\n\n      // 이 그룹에 속한 모든 토큰 추가\n      const groupTokens = group.tokens.sort((a, b) => {\n        // 괄호 콘텐츠 먼저, 그 다음 알파벳 순\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        return a.localeCompare(b);\n      });\n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n\n      // 그룹 간 구분을 위한 빈 행\n      finalRows.push([\"\", \"\"]);\n    });\n\n    // 2. 접미사(뒷글자) 그룹 헤더 추가\n    finalRows.push([\"🌲 접미사 기준 그룹 (뒷글자순)\", \"\"]);\n\n    // 접미사 기준 그룹 추가\n    optimalSuffixSubstrings.forEach(group => {\n      finalRows.push([`📌 뒷부분: ${group.substring} (${group.count})`, \"\"]);\n\n      // 이 그룹에 속한 모든 토큰 추가\n      const groupTokens = group.tokens.sort((a, b) => {\n        // 괄호 콘텐츠 먼저, 그 다음 알파벳 순\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n\n        // 뒷글자 기준 정렬\n        return reverseString(a.replace('[괄호] ', '')).localeCompare(reverseString(b.replace('[괄호] ', '')));\n      });\n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n\n      // 그룹 간 구분을 위한 빈 행\n      finalRows.push([\"\", \"\"]);\n    });\n\n    // 3. 복합어 관계 그룹 추가\n    if (compoundGroups.length > 0) {\n      finalRows.push([\"🌲 복합어 관계 그룹\", \"\"]);\n      compoundGroups.forEach(group => {\n        finalRows.push([`📌 복합어: ${group.parent.replace('[괄호] ', '')} (${group.children.length})`, group.parent]);\n\n        // 자식 토큰 추가\n        group.children.forEach((child, idx) => {\n          const position = group.positions[idx];\n          const parentClean = group.parent.replace('[괄호] ', '');\n          const childClean = child.replace('[괄호] ', '');\n\n          // 위치 표시 문자열 생성\n          let positionMarker = '';\n          if (position === 0) {\n            positionMarker = '⬅️ 시작 부분';\n          } else if (position + childClean.length === parentClean.length) {\n            positionMarker = '➡️ 끝 부분';\n          } else {\n            positionMarker = '⬇️ 중간 부분';\n          }\n          finalRows.push([`└─ [${positionMarker}]`, child]);\n        });\n\n        // 그룹 간 구분을 위한 빈 행\n        finalRows.push([\"\", \"\"]);\n      });\n    }\n\n    // 4. 그룹에 속하지 않은 토큰 처리\n    const allGroupedTokens = new Set();\n\n    // 모든 그룹의 토큰 수집\n    optimalPrefixSubstrings.forEach(group => group.tokens.forEach(token => allGroupedTokens.add(token)));\n    optimalSuffixSubstrings.forEach(group => group.tokens.forEach(token => allGroupedTokens.add(token)));\n    compoundGroups.forEach(group => {\n      allGroupedTokens.add(group.parent);\n      group.children.forEach(child => allGroupedTokens.add(child));\n    });\n\n    // 그룹에 속하지 않은 토큰 찾기\n    const ungroupedTokens = allMinTokens.filter(token => !allGroupedTokens.has(token)).sort();\n    if (ungroupedTokens.length > 0) {\n      finalRows.push([\"🌲 미분류 토큰\", \"\"]);\n      ungroupedTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n    }\n\n    // 테이블 데이터 업데이트\n    setTableData({\n      headers: [\"Group\", \"Token\"],\n      rows: finalRows\n    });\n  };\n\n  // 원본 데이터로 복원하는 함수\n  const resetToOriginal = () => {\n    if (originalTableData) {\n      setTableData({\n        ...originalTableData\n      });\n    }\n  };\n  const renderTable = () => {\n    if (!tableData.headers.length) return null;\n\n    // 트리 시각화를 위한 변수\n    let currentTreeType = \"\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-table-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [selectedFile === null || selectedFile === void 0 ? void 0 : selectedFile.name, \" - Data View\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: tableData.headers.map((header, idx) => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: header\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 565,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableData.rows.map((row, rowIdx) => {\n            // 주요 그룹 타입 식별\n            const isTreeType = String(row[0]).startsWith('🌲');\n            const isGroupHeader = String(row[0]).startsWith('📌');\n            const isGroupItem = String(row[0]).startsWith('└─');\n\n            // 현재 트리 타입 업데이트\n            if (isTreeType) {\n              currentTreeType = String(row[0]);\n            }\n\n            // 트리 타입에 따른 클래스\n            let treeTypeClass = '';\n            if (currentTreeType.includes('접두사')) {\n              treeTypeClass = 'prefix-tree';\n            } else if (currentTreeType.includes('접미사')) {\n              treeTypeClass = 'suffix-tree';\n            } else if (currentTreeType.includes('복합어')) {\n              treeTypeClass = 'compound-tree';\n            } else if (currentTreeType.includes('미분류')) {\n              treeTypeClass = 'ungrouped-tree';\n            }\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              className: `\n                    ${isTreeType ? 'tree-type' : ''} \n                    ${isGroupHeader ? 'group-header' : ''} \n                    ${isGroupItem ? 'group-item' : ''}\n                    ${treeTypeClass}\n                  `,\n              children: row.map((cell, cellIdx) => {\n                // 괄호 내용 여부 확인\n                const isBracketContent = String(cell).startsWith('[괄호]');\n                let displayContent = cell;\n\n                // 괄호 내용인 경우 특별 처리\n                if (isBracketContent) {\n                  displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"bracket-indicator\",\n                      children: \"\\u2282\\u2283\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 612,\n                      columnNumber: 27\n                    }, this), String(cell).replace('[괄호] ', '')]\n                  }, void 0, true);\n                }\n\n                // 메인 트리 타입인 경우 특별 스타일링\n                if (isTreeType && cellIdx === 0) {\n                  return /*#__PURE__*/_jsxDEV(\"td\", {\n                    colSpan: \"2\",\n                    className: \"tree-type-header\",\n                    children: displayContent\n                  }, cellIdx, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 621,\n                    columnNumber: 25\n                  }, this);\n                }\n\n                // 복합어 그룹의 자식 토큰인 경우 위치 표시 처리\n                const isPositionIndicator = String(cell).includes('⬅️') || String(cell).includes('➡️') || String(cell).includes('⬇️');\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: `\n                          ${isTreeType && cellIdx === 0 ? 'tree-type-cell' : ''} \n                          ${isGroupHeader && cellIdx === 0 ? 'group-header-cell' : ''} \n                          ${isGroupItem && cellIdx === 0 ? 'group-connector-cell' : ''}\n                          ${isBracketContent ? 'bracket-content-cell' : ''}\n                          ${isPositionIndicator ? 'position-indicator-cell' : ''}\n                        `,\n                  children: displayContent\n                }, cellIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 637,\n                  columnNumber: 23\n                }, this);\n              })\n            }, rowIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 594,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column workspace-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'view' ? 'active' : ''}`,\n          onClick: () => handleTabChange('view'),\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'split' ? 'active' : ''}`,\n          onClick: () => handleTabChange('split'),\n          children: \"Split\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'segment' ? 'active' : ''}`,\n          onClick: () => handleTabChange('segment'),\n          children: \"Segment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab ${selectedTab === 'classify' ? 'active' : ''}`,\n          onClick: () => handleTabChange('classify'),\n          children: \"Classify\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 663,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"actions\",\n        children: [tableData.headers.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button magic-button\",\n            title: \"\\uBD84\\uB9AC\\uBD84\\uB958 \\uB9C8\\uBC95 - \\uAD04\\uD638 \\uB0B4\\uC6A9 \\uBD84\\uB9AC \\uBC0F \\uACF5\\uBC31/\\uC27C\\uD45C \\uAE30\\uC900 \\uBD84\\uB9AC\",\n            onClick: handleSeparationMagic,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\u2728\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 697,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"action-button reset-button\",\n            title: \"\\uC6D0\\uBCF8 \\uB370\\uC774\\uD130\\uB85C \\uBCF5\\uC6D0\",\n            onClick: resetToOriginal,\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uD83D\\uDD04\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\u2699\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 709,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"action-button\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uD83D\\uDCBE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: [selectedTab === 'view' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"view-mode\",\n        children: tableData.headers.length > 0 ? renderTable() : /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"json-viewer\",\n          children: content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 11\n      }, this), selectedTab === 'split' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"split-mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Split Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 730,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"split-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Split by:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 733,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Key\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 735,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Value\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 736,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Array elements\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 737,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 734,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Target path:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 741,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"/properties/items\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 742,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-button\",\n            children: \"Apply Split\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 744,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 731,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-area\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: \"Preview\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preview-content\",\n            children: \"Split preview will appear here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 748,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 746,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 729,\n        columnNumber: 11\n      }, this), selectedTab === 'segment' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"segment-mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Segmentation Options\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Configure how to segment your data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Segment method:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 759,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"By structure\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 761,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"By semantic content\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 762,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"By size\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 763,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 760,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-button\",\n            children: \"Apply Segmentation\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 766,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 757,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 11\n      }, this), selectedTab === 'classify' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"classify-mode\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Classification Tools\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Classify data based on rules or patterns\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 774,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"classify-options\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"option\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Classification type:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 777,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Type detection\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Pattern matching\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 780,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                children: \"Semantic grouping\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 781,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 778,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 776,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-button\",\n            children: \"Run Classification\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 784,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 775,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 772,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 717,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 661,\n    columnNumber: 5\n  }, this);\n};\n_s(WorkspaceColumn, \"uKlQxB0JcLKh26/M4onERXj6+yY=\");\n_c = WorkspaceColumn;\nexport default WorkspaceColumn;\nvar _c;\n$RefreshReg$(_c, \"WorkspaceColumn\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","WorkspaceColumn","selectedFile","fileContent","_s","selectedTab","setSelectedTab","content","setContent","tableData","setTableData","headers","rows","originalTableData","setOriginalTableData","type","sheetData","headerIndex","headerName","columnData","map","row","newTableData","value","JSON","stringify","fileName","name","path","message","instruction","handleTabChange","tab","handleSeparationMagic","length","dataToProcess","bracketSet","Set","valueSet","forEach","cellValue","undefined","String","trim","cellValueStr","bracketContentRegex","textWithoutBrackets","replace","match","p1","p2","p3","add","separatedValues","split","filter","bracketValues","Array","from","val","normalValues","reverseString","str","reverse","join","allMinTokens","findCommonSubstrings","tokens","minLength","minCount","direction","substringFreq","token","cleanToken","len","substr","substring","count","includes","push","i","commonSubstrings","Object","entries","data","baseFilter","coverage","sort","a","b","countDiff","lengthDiff","localeCompare","percentCoverage","analyzeCompoundRelationships","relationships","token1","j","token2","position","indexOf","beforeChar","afterChar","isWordBoundary","parent","child","compoundRelationships","prefixSubstrings","suffixSubstrings","selectOptimalSubstrings","substrings","compoundRel","maxGroups","sortedSubstrings","hasCompoundA","some","rel","hasCompoundB","scoreA","Math","pow","scoreB","selectedSubstrings","coveredTokens","newCoverage","has","isImportantSubstr","isHighSupportSingleChar","max","optimalPrefixSubstrings","optimalSuffixSubstrings","formCompoundGroups","compoundGroups","parentToken","children","positions","sortedGroups","values","group","slice","finalRows","groupTokens","aIsBracket","startsWith","bIsBracket","idx","parentClean","childClean","positionMarker","allGroupedTokens","ungroupedTokens","resetToOriginal","renderTable","currentTreeType","className","_jsxFileName","lineNumber","columnNumber","header","rowIdx","isTreeType","isGroupHeader","isGroupItem","treeTypeClass","cell","cellIdx","isBracketContent","displayContent","colSpan","isPositionIndicator","onClick","title","placeholder","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/WorkspaceColumn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './WorkspaceColumn.css';\n\nconst WorkspaceColumn = ({ selectedFile, fileContent }) => {\n  const [selectedTab, setSelectedTab] = useState('view');\n  const [content, setContent] = useState('');\n  const [tableData, setTableData] = useState({\n    headers: [],\n    rows: []\n  });\n  const [originalTableData, setOriginalTableData] = useState(null);\n\n  useEffect(() => {\n    // Reset content when file changes\n    if (selectedFile) {\n      if (selectedFile.type === 'xlsx_header') {\n        // Handle XLSX header selection\n        const { sheetData, headerIndex } = selectedFile;\n        \n        // Extract the column data for this header\n        const headerName = sheetData.headers[headerIndex];\n        const columnData = sheetData.rows.map(row => row[headerIndex]);\n        \n        // Set the table data for display\n        const newTableData = {\n          headers: [headerName],\n          rows: columnData.map(value => [value])\n        };\n        \n        setTableData(newTableData);\n        setOriginalTableData({...newTableData});\n        \n        // Switch to view tab\n        setSelectedTab('view');\n        \n        // Set content to empty to use table view instead\n        setContent('');\n      } else if (selectedFile.type === 'file') {\n        // Regular file selected, show file info\n        setContent(JSON.stringify({\n          fileName: selectedFile.name,\n          path: selectedFile.path,\n          type: selectedFile.type\n        }, null, 2));\n        \n        // Clear table data\n        setTableData({\n          headers: [],\n          rows: []\n        });\n        setOriginalTableData(null);\n      } else if (selectedFile.type === 'xlsx_sheet') {\n        // Sheet selected, show all data from the sheet\n        const { sheetData } = selectedFile;\n        \n        const newTableData = {\n          headers: sheetData.headers,\n          rows: sheetData.rows\n        };\n        \n        setTableData(newTableData);\n        setOriginalTableData({...newTableData});\n        \n        // Switch to view tab\n        setSelectedTab('view');\n        \n        // Set content to empty to use table view instead\n        setContent('');\n      }\n    } else {\n      // No file selected\n      setContent(JSON.stringify({\n        message: \"No file selected\",\n        instruction: \"Select a file or header from the file explorer\"\n      }, null, 2));\n      \n      // Clear table data\n      setTableData({\n        headers: [],\n        rows: []\n      });\n      setOriginalTableData(null);\n    }\n  }, [selectedFile]);\n\n  const handleTabChange = (tab) => {\n    setSelectedTab(tab);\n  };\n\n  // 분리분류 기능 처리 함수\n  const handleSeparationMagic = () => {\n    if (!tableData.headers.length || !tableData.rows.length) return;\n    \n    // 원본 데이터가 있는 경우 활용 (리셋 가능하도록)\n    const dataToProcess = originalTableData ? [...originalTableData.rows] : [...tableData.rows];\n    \n    // 중복 제거를 위한 Set 객체들\n    const bracketSet = new Set();\n    const valueSet = new Set();\n    \n    // 각 행 처리\n    dataToProcess.forEach(row => {\n      const cellValue = row[0];\n      \n      // null, undefined, 빈 문자열 등 건너뛰기\n      if (cellValue === null || cellValue === undefined || String(cellValue).trim() === '') {\n        return;\n      }\n      \n      const cellValueStr = String(cellValue);\n      \n      // 1. 괄호 내용 처리 - 다양한 괄호 유형 처리 (소괄호, 대괄호, 중괄호)\n      const bracketContentRegex = /\\(([^)]*)\\)|\\[([^\\]]*)\\]|\\{([^}]*)\\}/g;\n      let textWithoutBrackets = cellValueStr.replace(bracketContentRegex, (match, p1, p2, p3) => {\n        const content = p1 || p2 || p3; // 괄호 종류에 따라 p1, p2, p3 중 하나에 값이 있음\n        if (content && content.trim()) {\n          // 중복 제거를 위해 Set에 추가\n          bracketSet.add(content.trim());\n        }\n        return ' '; // 괄호와 내용을 공백으로 대체\n      });\n      \n      // 2. 공백과 쉼표로 분리\n      const separatedValues = textWithoutBrackets\n        .split(/[\\s,]+/) // 공백과 쉼표로 분리\n        .map(value => value.trim())\n        .filter(value => value.length > 0); // 빈 문자열 제거\n      \n      // 중복 제거를 위해 Set에 추가\n      separatedValues.forEach(value => {\n        if (value && value.trim()) {\n          valueSet.add(value.trim());\n        }\n      });\n    });\n    \n    // 결과 값 배열 생성 (중복 제거된 값들)\n    let bracketValues = Array.from(bracketSet).map(val => `[괄호] ${val}`);\n    let normalValues = Array.from(valueSet);\n    \n    // 결과가 없으면 \"분리된 값이 없습니다\" 표시\n    if (bracketValues.length === 0 && normalValues.length === 0) {\n      setTableData({\n        headers: [\"Group\", \"Token\"],\n        rows: [[\"\", \"분리된 값이 없습니다\"]]\n      });\n      return;\n    }\n    \n    // 문자열 뒤집기 함수\n    const reverseString = str => str.split('').reverse().join('');\n    \n    // 모든 최소 토큰 배열\n    const allMinTokens = [...bracketValues, ...normalValues];\n    \n    // 3. 부분문자열 기반 아이템셋 마이닝 (공통 부분 문자열 추출)\n    // 자주 등장하는 부분 문자열 찾기 - 방향성 추가 (앞, 뒤)\n    const findCommonSubstrings = (tokens, minLength = 1, minCount = 2, direction = 'any') => {\n      // 부분 문자열 빈도 카운트\n      const substringFreq = {};\n      \n      // 모든 가능한 부분 문자열 추출 및 카운트\n      tokens.forEach(token => {\n        // 괄호 태그 제거\n        const cleanToken = token.replace('[괄호] ', '');\n        \n        // 앞에서부터 시작하는 부분 문자열 (접두사)\n        if (direction === 'prefix' || direction === 'any') {\n          for (let len = minLength; len <= cleanToken.length; len++) {\n            const substr = cleanToken.substring(0, len);\n            if (substr.length >= minLength) {\n              if (!substringFreq[substr]) {\n                substringFreq[substr] = { \n                  count: 1, \n                  tokens: [token],\n                  direction: 'prefix'\n                };\n              } else if (!substringFreq[substr].tokens.includes(token)) {\n                substringFreq[substr].count++;\n                substringFreq[substr].tokens.push(token);\n                // 방향 정보 업데이트 (접두사로도 사용됨)\n                if (substringFreq[substr].direction !== 'prefix') {\n                  substringFreq[substr].direction = 'both';\n                }\n              }\n            }\n          }\n        }\n        \n        // 뒤에서부터 시작하는 부분 문자열 (접미사)\n        if (direction === 'suffix' || direction === 'any') {\n          for (let len = minLength; len <= cleanToken.length; len++) {\n            const substr = cleanToken.substring(cleanToken.length - len);\n            if (substr.length >= minLength) {\n              if (!substringFreq[substr]) {\n                substringFreq[substr] = { \n                  count: 1, \n                  tokens: [token],\n                  direction: 'suffix'\n                };\n              } else if (!substringFreq[substr].tokens.includes(token)) {\n                substringFreq[substr].count++;\n                substringFreq[substr].tokens.push(token);\n                // 방향 정보 업데이트 (접미사로도 사용됨)\n                if (substringFreq[substr].direction !== 'suffix') {\n                  substringFreq[substr].direction = 'both';\n                }\n              }\n            }\n          }\n        }\n        \n        // 일반 부분 문자열 (중간에 있는 것도 포함)\n        if (direction === 'any') {\n          for (let len = minLength; len <= cleanToken.length; len++) {\n            for (let i = 1; i < cleanToken.length - len; i++) {\n              const substr = cleanToken.substring(i, i + len);\n              if (substr.length >= minLength) {\n                if (!substringFreq[substr]) {\n                  substringFreq[substr] = { \n                    count: 1, \n                    tokens: [token],\n                    direction: 'middle'\n                  };\n                } else if (!substringFreq[substr].tokens.includes(token)) {\n                  substringFreq[substr].count++;\n                  substringFreq[substr].tokens.push(token);\n                  // 이미 다른 방향이 있으면 'mixed'로 표시\n                  substringFreq[substr].direction = 'mixed';\n                }\n              }\n            }\n          }\n        }\n      });\n      \n      // 빈도에 따라 필터링 및 정렬\n      const commonSubstrings = Object.entries(substringFreq)\n        .filter(([substr, data]) => {\n          // 기본 필터: 최소 개수 이상\n          const baseFilter = data.count >= minCount;\n          \n          // 한글자인 경우 특별 처리: 더 높은 빈도 요구\n          if (substr.length === 1) {\n            // 한글자는 30%이상 커버해야 함\n            const coverage = (data.tokens.length / tokens.length) * 100;\n            return baseFilter && (coverage >= 30 || data.count >= 5);\n          }\n          \n          return baseFilter;\n        })\n        .sort((a, b) => {\n          // 1. 토큰 수 내림차순\n          const countDiff = b[1].count - a[1].count;\n          if (countDiff !== 0) return countDiff;\n          \n          // 2. 길이 내림차순\n          const lengthDiff = b[0].length - a[0].length;\n          if (lengthDiff !== 0) return lengthDiff;\n          \n          // 3. 알파벳 순서\n          return a[0].localeCompare(b[0]);\n        })\n        .map(([substr, data]) => ({\n          substring: substr,\n          count: data.count,\n          tokens: data.tokens,\n          direction: data.direction,\n          percentCoverage: (data.tokens.length / tokens.length) * 100\n        }));\n      \n      return commonSubstrings;\n    };\n    \n    // 복합어 관계 분석 함수\n    const analyzeCompoundRelationships = (tokens) => {\n      const relationships = [];\n      \n      // 모든 토큰 쌍에 대해 검사\n      for (let i = 0; i < tokens.length; i++) {\n        const token1 = tokens[i].replace('[괄호] ', '');\n        \n        for (let j = 0; j < tokens.length; j++) {\n          if (i === j) continue;\n          \n          const token2 = tokens[j].replace('[괄호] ', '');\n          \n          // 복합어 관계 확인: token1이 token2의 일부인지\n          if (token2.includes(token1)) {\n            // 단순 포함이 아닌, 경계에 있는지 확인 (단어 경계)\n            const position = token2.indexOf(token1);\n            const beforeChar = position > 0 ? token2[position - 1] : '';\n            const afterChar = position + token1.length < token2.length ? token2[position + token1.length] : '';\n            \n            // 단어 경계(띄어쓰기나 문자열 시작/끝)에 있는 경우만 복합어로 간주\n            const isWordBoundary = (position === 0 || beforeChar === ' ' || beforeChar === '-') &&\n                                  (position + token1.length === token2.length || afterChar === ' ' || afterChar === '-');\n            \n            if (isWordBoundary || token1.length >= 2) {\n              relationships.push({\n                parent: tokens[j],   // 복합어\n                child: tokens[i],    // 부분어\n                position: position   // 위치\n              });\n            }\n          }\n        }\n      }\n      \n      return relationships;\n    };\n    \n    // 복합어 관계 분석\n    const compoundRelationships = analyzeCompoundRelationships(allMinTokens);\n    \n    // 방향별 부분 문자열 추출\n    const prefixSubstrings = findCommonSubstrings(allMinTokens, 1, 2, 'prefix');\n    const suffixSubstrings = findCommonSubstrings(allMinTokens, 1, 2, 'suffix');\n    \n    // 중복 제거와 커버리지 최적화를 위한 그리디 알고리즘 - 방향성 고려 추가\n    const selectOptimalSubstrings = (substrings, tokens, compoundRel, maxGroups = 10) => {\n      // 커버리지가 좋은 순서로 정렬 (점수 계산 개선)\n      const sortedSubstrings = [...substrings]\n        .sort((a, b) => {\n          // 복합어 관계가 있는 서브스트링에 가중치 부여\n          const hasCompoundA = compoundRel.some(rel => \n            rel.parent.includes(a.substring) || rel.child.includes(a.substring));\n          const hasCompoundB = compoundRel.some(rel => \n            rel.parent.includes(b.substring) || rel.child.includes(b.substring));\n          \n          if (hasCompoundA && !hasCompoundB) return -1;\n          if (!hasCompoundA && hasCompoundB) return 1;\n          \n          // 토큰수 * 길이^2로 점수 계산 (더 많은 토큰을 커버하고 더 긴 부분문자열 우선)\n          // 길이에 제곱을 하여 더 긴 부분문자열을 강력히 선호\n          const scoreA = a.count * Math.pow(a.substring.length, 2);\n          const scoreB = b.count * Math.pow(b.substring.length, 2);\n          return scoreB - scoreA;\n        });\n      \n      const selectedSubstrings = [];\n      const coveredTokens = new Set();\n      \n      // 그리디 선택 (개선)\n      for (const substr of sortedSubstrings) {\n        // 새로운 토큰을 커버하는지 확인\n        const newCoverage = substr.tokens.some(token => !coveredTokens.has(token));\n        \n        // 선택 조건 개선:\n        // 1. 새 토큰을 커버하거나\n        // 2. 중요 서브스트링(2글자 이상 & 3개 이상의 토큰) 또는\n        // 3. 높은 지지도를 가진 한글자 (한글자지만 중요한 의미를 가질 수 있음)\n        const isImportantSubstr = substr.substring.length >= 2 && substr.count >= 3;\n        const isHighSupportSingleChar = substr.substring.length === 1 && substr.count >= Math.max(4, tokens.length * 0.2);\n        \n        if (newCoverage || isImportantSubstr || isHighSupportSingleChar) {\n          selectedSubstrings.push(substr);\n          \n          // 커버된 토큰 업데이트\n          substr.tokens.forEach(token => coveredTokens.add(token));\n        }\n        \n        // 방향별로 최대 그룹 수 제한\n        if (selectedSubstrings.length >= maxGroups) break;\n      }\n      \n      return selectedSubstrings;\n    };\n    \n    // 최적의 부분 문자열 선택 (방향별)\n    const optimalPrefixSubstrings = selectOptimalSubstrings(prefixSubstrings, allMinTokens, compoundRelationships, 8);\n    const optimalSuffixSubstrings = selectOptimalSubstrings(suffixSubstrings, allMinTokens, compoundRelationships, 8);\n    \n    // 복합어 관계만으로 그룹 형성\n    const formCompoundGroups = (relationships, tokens) => {\n      // 복합어를 키로 하는 그룹 맵 생성\n      const compoundGroups = {};\n      \n      relationships.forEach(rel => {\n        const parentToken = rel.parent;\n        if (!compoundGroups[parentToken]) {\n          compoundGroups[parentToken] = {\n            parent: parentToken,\n            children: [rel.child],\n            positions: [rel.position]\n          };\n        } else if (!compoundGroups[parentToken].children.includes(rel.child)) {\n          compoundGroups[parentToken].children.push(rel.child);\n          compoundGroups[parentToken].positions.push(rel.position);\n        }\n      });\n      \n      // 자식이 많은 순으로 정렬\n      const sortedGroups = Object.values(compoundGroups)\n        .sort((a, b) => b.children.length - a.children.length)\n        .filter(group => group.children.length >= 2); // 최소 2개 이상의 자식을 가진 그룹만\n      \n      return sortedGroups.slice(0, 5); // 상위 5개 그룹만 선택\n    };\n    \n    // 복합어 그룹 형성\n    const compoundGroups = formCompoundGroups(compoundRelationships, allMinTokens);\n    \n    // 테이블 행 구성\n    const finalRows = [];\n    \n    // 1. 접두사(앞글자) 그룹 헤더 추가\n    finalRows.push([\n      \"🌲 접두사 기준 그룹 (앞글자순)\", \n      \"\"\n    ]);\n    \n    // 접두사 기준 그룹 추가\n    optimalPrefixSubstrings.forEach(group => {\n      finalRows.push([\n        `📌 앞부분: ${group.substring} (${group.count})`, \n        \"\"\n      ]);\n      \n      // 이 그룹에 속한 모든 토큰 추가\n      const groupTokens = group.tokens.sort((a, b) => {\n        // 괄호 콘텐츠 먼저, 그 다음 알파벳 순\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        \n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        \n        return a.localeCompare(b);\n      });\n      \n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      \n      // 그룹 간 구분을 위한 빈 행\n      finalRows.push([\"\", \"\"]);\n    });\n    \n    // 2. 접미사(뒷글자) 그룹 헤더 추가\n    finalRows.push([\n      \"🌲 접미사 기준 그룹 (뒷글자순)\", \n      \"\"\n    ]);\n    \n    // 접미사 기준 그룹 추가\n    optimalSuffixSubstrings.forEach(group => {\n      finalRows.push([\n        `📌 뒷부분: ${group.substring} (${group.count})`, \n        \"\"\n      ]);\n      \n      // 이 그룹에 속한 모든 토큰 추가\n      const groupTokens = group.tokens.sort((a, b) => {\n        // 괄호 콘텐츠 먼저, 그 다음 알파벳 순\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        \n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        \n        // 뒷글자 기준 정렬\n        return reverseString(a.replace('[괄호] ', '')).localeCompare(reverseString(b.replace('[괄호] ', '')));\n      });\n      \n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      \n      // 그룹 간 구분을 위한 빈 행\n      finalRows.push([\"\", \"\"]);\n    });\n    \n    // 3. 복합어 관계 그룹 추가\n    if (compoundGroups.length > 0) {\n      finalRows.push([\n        \"🌲 복합어 관계 그룹\", \n        \"\"\n      ]);\n      \n      compoundGroups.forEach(group => {\n        finalRows.push([\n          `📌 복합어: ${group.parent.replace('[괄호] ', '')} (${group.children.length})`, \n          group.parent\n        ]);\n        \n        // 자식 토큰 추가\n        group.children.forEach((child, idx) => {\n          const position = group.positions[idx];\n          const parentClean = group.parent.replace('[괄호] ', '');\n          const childClean = child.replace('[괄호] ', '');\n          \n          // 위치 표시 문자열 생성\n          let positionMarker = '';\n          if (position === 0) {\n            positionMarker = '⬅️ 시작 부분';\n          } else if (position + childClean.length === parentClean.length) {\n            positionMarker = '➡️ 끝 부분';\n          } else {\n            positionMarker = '⬇️ 중간 부분';\n          }\n          \n          finalRows.push([`└─ [${positionMarker}]`, child]);\n        });\n        \n        // 그룹 간 구분을 위한 빈 행\n        finalRows.push([\"\", \"\"]);\n      });\n    }\n    \n    // 4. 그룹에 속하지 않은 토큰 처리\n    const allGroupedTokens = new Set();\n    \n    // 모든 그룹의 토큰 수집\n    optimalPrefixSubstrings.forEach(group => \n      group.tokens.forEach(token => allGroupedTokens.add(token)));\n    \n    optimalSuffixSubstrings.forEach(group => \n      group.tokens.forEach(token => allGroupedTokens.add(token)));\n    \n    compoundGroups.forEach(group => {\n      allGroupedTokens.add(group.parent);\n      group.children.forEach(child => allGroupedTokens.add(child));\n    });\n    \n    // 그룹에 속하지 않은 토큰 찾기\n    const ungroupedTokens = allMinTokens\n      .filter(token => !allGroupedTokens.has(token))\n      .sort();\n    \n    if (ungroupedTokens.length > 0) {\n      finalRows.push([\"🌲 미분류 토큰\", \"\"]);\n      ungroupedTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n    }\n    \n    // 테이블 데이터 업데이트\n    setTableData({\n      headers: [\"Group\", \"Token\"],\n      rows: finalRows\n    });\n  };\n  \n  // 원본 데이터로 복원하는 함수\n  const resetToOriginal = () => {\n    if (originalTableData) {\n      setTableData({...originalTableData});\n    }\n  };\n\n  const renderTable = () => {\n    if (!tableData.headers.length) return null;\n    \n    // 트리 시각화를 위한 변수\n    let currentTreeType = \"\";\n    \n    return (\n      <div className=\"data-table-container\">\n        <h4>{selectedFile?.name} - Data View</h4>\n        <table className=\"data-table\">\n          <thead>\n            <tr>\n              {tableData.headers.map((header, idx) => (\n                <th key={idx}>{header}</th>\n              ))}\n            </tr>\n          </thead>\n          <tbody>\n            {tableData.rows.map((row, rowIdx) => {\n              // 주요 그룹 타입 식별\n              const isTreeType = String(row[0]).startsWith('🌲');\n              const isGroupHeader = String(row[0]).startsWith('📌');\n              const isGroupItem = String(row[0]).startsWith('└─');\n              \n              // 현재 트리 타입 업데이트\n              if (isTreeType) {\n                currentTreeType = String(row[0]);\n              }\n              \n              // 트리 타입에 따른 클래스\n              let treeTypeClass = '';\n              if (currentTreeType.includes('접두사')) {\n                treeTypeClass = 'prefix-tree';\n              } else if (currentTreeType.includes('접미사')) {\n                treeTypeClass = 'suffix-tree';\n              } else if (currentTreeType.includes('복합어')) {\n                treeTypeClass = 'compound-tree';\n              } else if (currentTreeType.includes('미분류')) {\n                treeTypeClass = 'ungrouped-tree';\n              }\n              \n              return (\n                <tr \n                  key={rowIdx} \n                  className={`\n                    ${isTreeType ? 'tree-type' : ''} \n                    ${isGroupHeader ? 'group-header' : ''} \n                    ${isGroupItem ? 'group-item' : ''}\n                    ${treeTypeClass}\n                  `}\n                >\n                  {row.map((cell, cellIdx) => {\n                    // 괄호 내용 여부 확인\n                    const isBracketContent = String(cell).startsWith('[괄호]');\n                    let displayContent = cell;\n                    \n                    // 괄호 내용인 경우 특별 처리\n                    if (isBracketContent) {\n                      displayContent = (\n                        <>\n                          <span className=\"bracket-indicator\">⊂⊃</span>\n                          {String(cell).replace('[괄호] ', '')}\n                        </>\n                      );\n                    }\n                    \n                    // 메인 트리 타입인 경우 특별 스타일링\n                    if (isTreeType && cellIdx === 0) {\n                      return (\n                        <td \n                          key={cellIdx}\n                          colSpan=\"2\" \n                          className=\"tree-type-header\"\n                        >\n                          {displayContent}\n                        </td>\n                      );\n                    }\n                    \n                    // 복합어 그룹의 자식 토큰인 경우 위치 표시 처리\n                    const isPositionIndicator = String(cell).includes('⬅️') || \n                                               String(cell).includes('➡️') || \n                                               String(cell).includes('⬇️');\n                    \n                    return (\n                      <td \n                        key={cellIdx} \n                        className={`\n                          ${isTreeType && cellIdx === 0 ? 'tree-type-cell' : ''} \n                          ${isGroupHeader && cellIdx === 0 ? 'group-header-cell' : ''} \n                          ${isGroupItem && cellIdx === 0 ? 'group-connector-cell' : ''}\n                          ${isBracketContent ? 'bracket-content-cell' : ''}\n                          ${isPositionIndicator ? 'position-indicator-cell' : ''}\n                        `}\n                      >\n                        {displayContent}\n                      </td>\n                    );\n                  })}\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"column workspace-column\">\n      <div className=\"toolbar\">\n        <div className=\"tabs\">\n          <button \n            className={`tab ${selectedTab === 'view' ? 'active' : ''}`} \n            onClick={() => handleTabChange('view')}\n          >\n            View\n          </button>\n          <button \n            className={`tab ${selectedTab === 'split' ? 'active' : ''}`} \n            onClick={() => handleTabChange('split')}\n          >\n            Split\n          </button>\n          <button \n            className={`tab ${selectedTab === 'segment' ? 'active' : ''}`} \n            onClick={() => handleTabChange('segment')}\n          >\n            Segment\n          </button>\n          <button \n            className={`tab ${selectedTab === 'classify' ? 'active' : ''}`} \n            onClick={() => handleTabChange('classify')}\n          >\n            Classify\n          </button>\n        </div>\n        <div className=\"actions\">\n          {tableData.headers.length > 0 && (\n            <>\n              <button \n                className=\"action-button magic-button\" \n                title=\"분리분류 마법 - 괄호 내용 분리 및 공백/쉼표 기준 분리\"\n                onClick={handleSeparationMagic}\n              >\n                <span>✨</span>\n              </button>\n              <button \n                className=\"action-button reset-button\" \n                title=\"원본 데이터로 복원\"\n                onClick={resetToOriginal}\n              >\n                <span>🔄</span>\n              </button>\n            </>\n          )}\n          <button className=\"action-button\">\n            <span>⚙️</span>\n          </button>\n          <button className=\"action-button\">\n            <span>💾</span>\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"content-area\">\n        {selectedTab === 'view' && (\n          <div className=\"view-mode\">\n            {tableData.headers.length > 0 ? (\n              renderTable()\n            ) : (\n              <pre className=\"json-viewer\">{content}</pre>\n            )}\n          </div>\n        )}\n        \n        {selectedTab === 'split' && (\n          <div className=\"split-mode\">\n            <h4>Split Data</h4>\n            <div className=\"split-options\">\n              <div className=\"option\">\n                <label>Split by:</label>\n                <select>\n                  <option>Key</option>\n                  <option>Value</option>\n                  <option>Array elements</option>\n                </select>\n              </div>\n              <div className=\"option\">\n                <label>Target path:</label>\n                <input type=\"text\" placeholder=\"/properties/items\" />\n              </div>\n              <button className=\"apply-button\">Apply Split</button>\n            </div>\n            <div className=\"preview-area\">\n              <h5>Preview</h5>\n              <div className=\"preview-content\">Split preview will appear here</div>\n            </div>\n          </div>\n        )}\n        \n        {selectedTab === 'segment' && (\n          <div className=\"segment-mode\">\n            <h4>Segmentation Options</h4>\n            <p>Configure how to segment your data</p>\n            <div className=\"segment-options\">\n              <div className=\"option\">\n                <label>Segment method:</label>\n                <select>\n                  <option>By structure</option>\n                  <option>By semantic content</option>\n                  <option>By size</option>\n                </select>\n              </div>\n              <button className=\"apply-button\">Apply Segmentation</button>\n            </div>\n          </div>\n        )}\n        \n        {selectedTab === 'classify' && (\n          <div className=\"classify-mode\">\n            <h4>Classification Tools</h4>\n            <p>Classify data based on rules or patterns</p>\n            <div className=\"classify-options\">\n              <div className=\"option\">\n                <label>Classification type:</label>\n                <select>\n                  <option>Type detection</option>\n                  <option>Pattern matching</option>\n                  <option>Semantic grouping</option>\n                </select>\n              </div>\n              <button className=\"apply-button\">Run Classification</button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default WorkspaceColumn; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}