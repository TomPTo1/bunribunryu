{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData,\n  groupingData\n}) => {\n  _s();\n  const [editingGroupId, setEditingGroupId] = useState(null);\n  const [groupNameInput, setGroupNameInput] = useState('');\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if we have grouping data\n  const hasGroupingData = groupingData && groupingData.uniqueValues && Array.isArray(groupingData.uniqueValues);\n\n  // Render grouping interface if we have grouping data\n  const renderGroupingInterface = () => {\n    if (!hasGroupingData) return null;\n    const {\n      uniqueValues,\n      groups\n    } = groupingData;\n\n    // Find values that are not in any group\n    const getAvailableValues = () => {\n      const allGroupItems = groups ? groups.flatMap(group => group.items || []) : [];\n      return uniqueValues.filter(value => !allGroupItems.includes(value));\n    };\n    const availableValues = getAvailableValues();\n\n    // Handle adding a value to a group\n    const handleAddToGroup = (groupId, value) => {\n      if (groupingData.onUpdateGroupName && groups) {\n        // Find the target group\n        const targetGroup = groups.find(group => group.id === groupId);\n        if (targetGroup) {\n          // Update the group with the new value\n          const updatedGroups = groups.map(group => {\n            if (group.id === groupId) {\n              return {\n                ...group,\n                items: [...(group.items || []), value]\n              };\n            }\n            return group;\n          });\n\n          // Update the grouping data\n          if (groupingData.onUpdateConfig) {\n            groupingData.onUpdateConfig({\n              groups: updatedGroups\n            });\n          }\n        }\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouping-interface\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grouping-layout\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segmentation-values-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uBD84\\uC808\\uAC12 \\uBAA9\\uB85D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), availableValues.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"segmentation-values-list\",\n            children: availableValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segmentation-value-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-text\",\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 21\n              }, this), groups && groups.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"add-to-group-buttons\",\n                children: groups.map(group => /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"add-to-group-btn\",\n                  onClick: () => handleAddToGroup(group.id, value),\n                  title: `${group.name}에 추가`,\n                  children: [group.name, \"\\uC5D0 \\uCD94\\uAC00\"]\n                }, group.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"no-values\",\n            children: \"\\uB0A8\\uC740 \\uBD84\\uC808\\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-boxes-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uADF8\\uB8F9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-boxes-list\",\n            children: [groups && groups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group-box\",\n              children: [editingGroupId === group.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"group-name-edit\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: groupNameInput,\n                  onChange: e => setGroupNameInput(e.target.value),\n                  onBlur: () => {\n                    if (groupingData && groupingData.onUpdateGroupName) {\n                      groupingData.onUpdateGroupName(group.id, groupNameInput);\n                    }\n                    setEditingGroupId(null);\n                  },\n                  autoFocus: true\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 21\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"group-box-name\",\n                onClick: () => {\n                  setEditingGroupId(group.id);\n                  setGroupNameInput(group.name);\n                },\n                children: group.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"group-box-content\",\n                children: group.items && group.items.length > 0 ? group.items.map((item, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"group-item\",\n                  children: item\n                }, idx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 25\n                }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"empty-group\",\n                  children: \"\\uBE48 \\uADF8\\uB8F9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 119,\n                columnNumber: 19\n              }, this)]\n            }, group.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 17\n            }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"add-group-button\",\n              onClick: () => {\n                if (groupingData && groupingData.onAddGroup) {\n                  groupingData.onAddGroup();\n                }\n              },\n              children: \"+ \\uC0C8 \\uADF8\\uB8F9 \\uCD94\\uAC00\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Handle whole tag click\n  const handleTagClick = value => {\n    console.log('Whole tag clicked:', value);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${className} tag-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whole-tag-button\",\n          onClick: () => handleTagClick(valueText),\n          title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n          children: valueText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segments-container\",\n          children: segmentation.segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`,\n            onClick: e => handleSegmentClick(segment, e),\n            children: segment.text\n          }, `seg-${segIdx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally but still clickable\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${className} clickable-tag simple-tag-button`,\n      onClick: () => handleTagClick(valueText),\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n        const source = item.source || 'text';\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"whole-tag-button\",\n              onClick: () => handleTagClick(value),\n              title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 334,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segments-container\",\n              children: segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`,\n                onClick: e => handleSegmentClick(segment, e),\n                children: segment.text\n              }, `seg-${segIdx}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n          onClick: () => handleTagClick(value),\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: hasGroupingData ? renderGroupingInterface() : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"enhanced-view\",\n            children: renderEnhancedView(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 390,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"2vjPXktcrv7swcvCzJJu6Y3vRfs=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","segmentationData","groupingData","_s","editingGroupId","setEditingGroupId","groupNameInput","setGroupNameInput","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasGroupingData","uniqueValues","Array","isArray","renderGroupingInterface","groups","getAvailableValues","allGroupItems","flatMap","group","items","filter","value","includes","availableValues","handleAddToGroup","groupId","onUpdateGroupName","targetGroup","find","id","updatedGroups","map","onUpdateConfig","length","index","onClick","title","name","type","onChange","e","target","onBlur","autoFocus","item","idx","onAddGroup","isDuplicatedText","text","halfLength","Math","floor","firstHalf","substring","cleanDuplicatedText","hasSegmentationData","segmentations","some","seg","segments","getSegmentationData","handleSegmentClick","segment","stopPropagation","console","log","handleTagClick","renderTag","source","key","isLastStep","valueText","segmentation","segIdx","isSubstring","renderEnhancedView","row","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","unprocessedText","push","endIndex","every","v","val","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData, groupingData }) => {\n  const [editingGroupId, setEditingGroupId] = useState(null);\n  const [groupNameInput, setGroupNameInput] = useState('');\n  \n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if we have grouping data\n  const hasGroupingData = groupingData && groupingData.uniqueValues && Array.isArray(groupingData.uniqueValues);\n  \n  // Render grouping interface if we have grouping data\n  const renderGroupingInterface = () => {\n    if (!hasGroupingData) return null;\n    \n    const { uniqueValues, groups } = groupingData;\n    \n    // Find values that are not in any group\n    const getAvailableValues = () => {\n      const allGroupItems = groups ? groups.flatMap(group => group.items || []) : [];\n      return uniqueValues.filter(value => !allGroupItems.includes(value));\n    };\n    \n    const availableValues = getAvailableValues();\n    \n    // Handle adding a value to a group\n    const handleAddToGroup = (groupId, value) => {\n      if (groupingData.onUpdateGroupName && groups) {\n        // Find the target group\n        const targetGroup = groups.find(group => group.id === groupId);\n        if (targetGroup) {\n          // Update the group with the new value\n          const updatedGroups = groups.map(group => {\n            if (group.id === groupId) {\n              return {\n                ...group,\n                items: [...(group.items || []), value]\n              };\n            }\n            return group;\n          });\n          \n          // Update the grouping data\n          if (groupingData.onUpdateConfig) {\n            groupingData.onUpdateConfig({ groups: updatedGroups });\n          }\n        }\n      }\n    };\n    \n    return (\n      <div className=\"grouping-interface\">\n        <div className=\"grouping-layout\">\n          {/* Left side - Segmentation values */}\n          <div className=\"segmentation-values-container\">\n            <h4>분절값 목록</h4>\n            {availableValues.length > 0 ? (\n              <div className=\"segmentation-values-list\">\n                {availableValues.map((value, index) => (\n                  <div key={index} className=\"segmentation-value-item\">\n                    <span className=\"value-text\">{value}</span>\n                    {groups && groups.length > 0 && (\n                      <div className=\"add-to-group-buttons\">\n                        {groups.map(group => (\n                          <button \n                            key={group.id} \n                            className=\"add-to-group-btn\"\n                            onClick={() => handleAddToGroup(group.id, value)}\n                            title={`${group.name}에 추가`}\n                          >\n                            {group.name}에 추가\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <p className=\"no-values\">남은 분절값이 없습니다.</p>\n            )}\n          </div>\n          \n          {/* Right side - Group boxes */}\n          <div className=\"group-boxes-container\">\n            <h4>그룹</h4>\n            <div className=\"group-boxes-list\">\n              {groups && groups.map((group) => (\n                <div key={group.id} className=\"group-box\">\n                  {editingGroupId === group.id ? (\n                    <div className=\"group-name-edit\">\n                      <input \n                        type=\"text\" \n                        value={groupNameInput} \n                        onChange={(e) => setGroupNameInput(e.target.value)}\n                        onBlur={() => {\n                          if (groupingData && groupingData.onUpdateGroupName) {\n                            groupingData.onUpdateGroupName(group.id, groupNameInput);\n                          }\n                          setEditingGroupId(null);\n                        }}\n                        autoFocus\n                      />\n                    </div>\n                  ) : (\n                    <div \n                      className=\"group-box-name\"\n                      onClick={() => {\n                        setEditingGroupId(group.id);\n                        setGroupNameInput(group.name);\n                      }}\n                    >\n                      {group.name}\n                    </div>\n                  )}\n                  <div className=\"group-box-content\">\n                    {group.items && group.items.length > 0 ? (\n                      group.items.map((item, idx) => (\n                        <div key={idx} className=\"group-item\">\n                          {item}\n                        </div>\n                      ))\n                    ) : (\n                      <div className=\"empty-group\">빈 그룹</div>\n                    )}\n                  </div>\n                </div>\n              ))}\n              \n              {/* Add new group button */}\n              <button \n                className=\"add-group-button\"\n                onClick={() => {\n                  if (groupingData && groupingData.onAddGroup) {\n                    groupingData.onAddGroup();\n                  }\n                }}\n              >\n                + 새 그룹 추가\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Handle whole tag click\n  const handleTagClick = (value) => {\n    console.log('Whole tag clicked:', value);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <div key={key} className={`${className} tag-container`}>\n          <button \n            className=\"whole-tag-button\" \n            onClick={() => handleTagClick(valueText)}\n            title=\"전체 태그 선택\"\n          >\n            {valueText}\n          </button>\n          <div className=\"segments-container\">\n            {segmentation.segments.map((segment, segIdx) => (\n              <button \n                key={`seg-${segIdx}`} \n                className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`}\n                onClick={(e) => handleSegmentClick(segment, e)}\n              >\n                {segment.text}\n              </button>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    \n    // No segmentation, render normally but still clickable\n    return (\n      <button \n        key={key} \n        className={`${className} clickable-tag simple-tag-button`}\n        onClick={() => handleTagClick(valueText)}\n      >\n        {valueText}\n      </button>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          const source = item.source || 'text';\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <div \n                key={idx} \n                className={`value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n              >\n                <button \n                  className=\"whole-tag-button\" \n                  onClick={() => handleTagClick(value)}\n                  title=\"전체 태그 선택\"\n                >\n                  {value}\n                </button>\n                <div className=\"segments-container\">\n                  {segments.map((segment, segIdx) => (\n                    <button \n                      key={`seg-${segIdx}`} \n                      className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`}\n                      onClick={(e) => handleSegmentClick(segment, e)}\n                    >\n                      {segment.text}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <button \n              key={idx} \n              className={`value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n              onClick={() => handleTagClick(value)}\n            >\n              {value}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n\n  return (\n    <div className=\"data-display\">\n      {hasGroupingData ? (\n        renderGroupingInterface()\n      ) : (\n        <table className=\"data-table\">\n          <tbody>\n            {flattenData(processedData).map((row, index) => (\n              <tr key={index}>\n                <td className=\"enhanced-view\">\n                  {renderEnhancedView(row)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}