{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport HeaderList from './components/HeaderList';\nimport HeaderSimilarityList from './components/HeaderSimilarityList';\nimport HeaderCombinationList from './components/HeaderCombinationList';\nimport HeaderCombinationTextList from './components/HeaderCombinationTextList';\nimport PathNavigation from './components/PathNavigation';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedChannel, setSelectedChannel] = useState(null);\n  const [selectedHeader, setSelectedHeader] = useState(null);\n  const [selectedCombination, setSelectedCombination] = useState(null);\n  const [headerGroups, setHeaderGroups] = useState({}); // 헤더 유사군 그룹 관리\n\n  const handleChannelSelect = channel => {\n    setSelectedChannel(channel);\n    setSelectedHeader(null); // Reset header selection when changing channel\n    setSelectedCombination(null); // Reset combination selection\n    setHeaderGroups({}); // Reset header groups when changing channel\n  };\n  const handleHeaderSelect = header => {\n    setSelectedHeader(header);\n    setSelectedCombination(null); // Reset combination selection when changing header\n  };\n  const handleCombinationSelect = combination => {\n    setSelectedCombination(combination);\n  };\n\n  // 유사군 처리 함수\n  const handleSimilarHeadersGroup = (mainHeader, similarHeaders) => {\n    setHeaderGroups(prev => {\n      // 기존 그룹에서 이미 다른 메인 헤더의 유사어로 지정된 헤더들 제거\n      const updatedGroups = {\n        ...prev\n      };\n\n      // 먼저 다른 그룹에서 현재 선택된 유사어들 제거\n      Object.keys(updatedGroups).forEach(group => {\n        if (group !== mainHeader) {\n          updatedGroups[group] = updatedGroups[group].filter(header => !similarHeaders.includes(header));\n        }\n      });\n\n      // 현재 메인 헤더의 유사어 그룹 업데이트\n      if (similarHeaders.length === 0) {\n        // 유사어가 없으면 그룹 삭제\n        const {\n          [mainHeader]: _,\n          ...rest\n        } = updatedGroups;\n        return rest;\n      } else {\n        // 유사어가 있으면 그룹 업데이트\n        return {\n          ...updatedGroups,\n          [mainHeader]: similarHeaders\n        };\n      }\n    });\n  };\n\n  // 모든 헤더 목록에서 유사어로 지정된 헤더 필터링\n  const filterGroupedHeaders = headers => {\n    if (!headers) return [];\n\n    // 모든 유사어 목록 (다른 헤더의 유사어로 지정된 헤더들)\n    const allGroupedHeaders = Object.values(headerGroups).flat();\n\n    // 유사어로 지정되지 않은 헤더만 반환\n    return headers.filter(header => !allGroupedHeaders.includes(header));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"App-content\",\n      children: [/*#__PURE__*/_jsxDEV(PathNavigation, {\n        selectedChannel: selectedChannel,\n        selectedHeader: selectedHeader,\n        selectedCombination: selectedCombination,\n        onChannelSelect: handleChannelSelect,\n        onHeaderSelect: handleHeaderSelect,\n        onCombinationSelect: handleCombinationSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns-container\",\n        children: [/*#__PURE__*/_jsxDEV(HeaderList, {\n          channel: selectedChannel,\n          onHeaderSelect: handleHeaderSelect,\n          selectedHeader: selectedHeader,\n          headerGroups: headerGroups,\n          filterGroupedHeaders: filterGroupedHeaders\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HeaderSimilarityList, {\n          channel: selectedChannel,\n          selectedHeader: selectedHeader,\n          onSimilarHeadersGroup: handleSimilarHeadersGroup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HeaderCombinationList, {\n          channel: selectedChannel,\n          selectedHeader: selectedHeader,\n          onCombinationSelect: handleCombinationSelect,\n          selectedCombination: selectedCombination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(HeaderCombinationTextList, {\n          channel: selectedChannel,\n          selectedCombination: selectedCombination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"K308k2TOzOsMyJRcVBxxEzS1Ayw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","HeaderList","HeaderSimilarityList","HeaderCombinationList","HeaderCombinationTextList","PathNavigation","jsxDEV","_jsxDEV","App","_s","selectedChannel","setSelectedChannel","selectedHeader","setSelectedHeader","selectedCombination","setSelectedCombination","headerGroups","setHeaderGroups","handleChannelSelect","channel","handleHeaderSelect","header","handleCombinationSelect","combination","handleSimilarHeadersGroup","mainHeader","similarHeaders","prev","updatedGroups","Object","keys","forEach","group","filter","includes","length","_","rest","filterGroupedHeaders","headers","allGroupedHeaders","values","flat","className","children","onChannelSelect","onHeaderSelect","onCombinationSelect","fileName","_jsxFileName","lineNumber","columnNumber","onSimilarHeadersGroup","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport HeaderList from './components/HeaderList';\nimport HeaderSimilarityList from './components/HeaderSimilarityList';\nimport HeaderCombinationList from './components/HeaderCombinationList';\nimport HeaderCombinationTextList from './components/HeaderCombinationTextList';\nimport PathNavigation from './components/PathNavigation';\n\nfunction App() {\n  const [selectedChannel, setSelectedChannel] = useState(null);\n  const [selectedHeader, setSelectedHeader] = useState(null);\n  const [selectedCombination, setSelectedCombination] = useState(null);\n  const [headerGroups, setHeaderGroups] = useState({}); // 헤더 유사군 그룹 관리\n\n  const handleChannelSelect = (channel) => {\n    setSelectedChannel(channel);\n    setSelectedHeader(null); // Reset header selection when changing channel\n    setSelectedCombination(null); // Reset combination selection\n    setHeaderGroups({}); // Reset header groups when changing channel\n  };\n\n  const handleHeaderSelect = (header) => {\n    setSelectedHeader(header);\n    setSelectedCombination(null); // Reset combination selection when changing header\n  };\n\n  const handleCombinationSelect = (combination) => {\n    setSelectedCombination(combination);\n  };\n\n  // 유사군 처리 함수\n  const handleSimilarHeadersGroup = (mainHeader, similarHeaders) => {\n    setHeaderGroups(prev => {\n      // 기존 그룹에서 이미 다른 메인 헤더의 유사어로 지정된 헤더들 제거\n      const updatedGroups = { ...prev };\n      \n      // 먼저 다른 그룹에서 현재 선택된 유사어들 제거\n      Object.keys(updatedGroups).forEach(group => {\n        if (group !== mainHeader) {\n          updatedGroups[group] = updatedGroups[group].filter(\n            header => !similarHeaders.includes(header)\n          );\n        }\n      });\n      \n      // 현재 메인 헤더의 유사어 그룹 업데이트\n      if (similarHeaders.length === 0) {\n        // 유사어가 없으면 그룹 삭제\n        const { [mainHeader]: _, ...rest } = updatedGroups;\n        return rest;\n      } else {\n        // 유사어가 있으면 그룹 업데이트\n        return {\n          ...updatedGroups,\n          [mainHeader]: similarHeaders\n        };\n      }\n    });\n  };\n\n  // 모든 헤더 목록에서 유사어로 지정된 헤더 필터링\n  const filterGroupedHeaders = (headers) => {\n    if (!headers) return [];\n    \n    // 모든 유사어 목록 (다른 헤더의 유사어로 지정된 헤더들)\n    const allGroupedHeaders = Object.values(headerGroups).flat();\n    \n    // 유사어로 지정되지 않은 헤더만 반환\n    return headers.filter(header => !allGroupedHeaders.includes(header));\n  };\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-content\">\n        <PathNavigation \n          selectedChannel={selectedChannel}\n          selectedHeader={selectedHeader}\n          selectedCombination={selectedCombination}\n          onChannelSelect={handleChannelSelect}\n          onHeaderSelect={handleHeaderSelect}\n          onCombinationSelect={handleCombinationSelect}\n        />\n        <div className=\"columns-container\">\n          <HeaderList \n            channel={selectedChannel} \n            onHeaderSelect={handleHeaderSelect} \n            selectedHeader={selectedHeader}\n            headerGroups={headerGroups}\n            filterGroupedHeaders={filterGroupedHeaders}\n          />\n          <HeaderSimilarityList \n            channel={selectedChannel} \n            selectedHeader={selectedHeader}\n            onSimilarHeadersGroup={handleSimilarHeadersGroup}\n          />\n          <HeaderCombinationList \n            channel={selectedChannel} \n            selectedHeader={selectedHeader}\n            onCombinationSelect={handleCombinationSelect}\n            selectedCombination={selectedCombination}\n          />\n          <HeaderCombinationTextList \n            channel={selectedChannel} \n            selectedCombination={selectedCombination} \n          />\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}