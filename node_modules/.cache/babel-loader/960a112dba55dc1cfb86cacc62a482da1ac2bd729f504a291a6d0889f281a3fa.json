{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeparationClassifier = ({\n  data,\n  onReset\n}) => {\n  _s();\n  const [processedData, setProcessedData] = useState(null);\n  const [pipeline, setPipeline] = useState([{\n    id: 'bracket-separation',\n    name: '괄호값 분리',\n    active: true\n  }, {\n    id: 'delimiter-separation',\n    name: '구분자 분리',\n    active: false,\n    config: {\n      delimiters: [',', ' '] // Default delimiters: comma and whitespace\n    }\n  }]);\n  const [selectedStep, setSelectedStep] = useState('bracket-separation');\n\n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Process data through all active pipeline steps\n      let result = {\n        ...data\n      };\n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n          // Add more step processors here in the future\n        }\n      });\n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n    }\n  }, [data, pipeline]);\n  const processBracketSeparation = input => {\n    if (typeof input === 'string') {\n      const bracketRegex = /\\[(.*?)\\]|\\((.*?)\\)|\\{(.*?)\\}/g;\n      const matches = [];\n      const matchDetails = [];\n      let match;\n      while ((match = bracketRegex.exec(input)) !== null) {\n        const value = match[1] || match[2] || match[3];\n        if (value) {\n          matches.push(value);\n\n          // Store metadata about the match\n          matchDetails.push({\n            value,\n            bracketType: match[1] ? 'square' : match[2] ? 'round' : 'curly',\n            fullMatch: match[0],\n            // The full match including brackets\n            startIndex: match.index,\n            endIndex: match.index + match[0].length\n          });\n        }\n      }\n\n      // Clean the original string by removing all brackets\n      const cleanedOriginal = input.replace(/\\[.*?\\]|\\(.*?\\)|\\{.*?\\}/g, '').replace(/\\s+/g, ' ').trim();\n      return {\n        original: input,\n        cleaned: cleanedOriginal,\n        separated: matches,\n        matchDetails: matchDetails,\n        type: 'bracket-separation'\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processBracketSeparation(item));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processBracketSeparation(input[key]);\n      }\n      return result;\n    }\n    return input;\n  };\n  const processDelimiterSeparation = (input, delimiters) => {\n    if (typeof input === 'string') {\n      // Create a regex pattern from the delimiters\n      const delimiterPattern = delimiters.map(d =>\n      // Escape special regex characters in delimiters\n      d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|');\n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n\n      // Split the string by the delimiters and filter out empty strings\n      const parts = input.split(regex).filter(part => part.trim() !== '' && !delimiters.includes(part.trim()));\n      return {\n        original: input,\n        separated: parts.map(part => ({\n          value: part,\n          source: 'delimiter'\n        })),\n        type: 'delimiter-separation'\n      };\n    } else if (input && input.type === 'bracket-separation') {\n      // Process the original text with delimiter separation\n      const delimiterPattern = delimiters.map(d => d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')).join('|');\n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n\n      // Use the cleaned text (without brackets) if available\n      const textToProcess = input.cleaned || input.original;\n\n      // Split the original text and filter\n      const partsFromOriginal = textToProcess.split(regex).filter(part => part.trim() !== '' && !delimiters.includes(part.trim()));\n\n      // Process each bracket value\n      const partsFromBrackets = [];\n      if (input.separated) {\n        input.separated.forEach((val, index) => {\n          const parts = val.split(regex).filter(part => part.trim() !== '' && !delimiters.includes(part.trim()));\n\n          // Add each part with source metadata\n          parts.forEach(part => {\n            partsFromBrackets.push({\n              value: part,\n              source: 'bracket',\n              bracketInfo: input.matchDetails ? input.matchDetails[index] : null\n            });\n          });\n        });\n      }\n\n      // Add clean text parts with source metadata\n      const cleanTextParts = partsFromOriginal.map(part => ({\n        value: part,\n        source: 'clean-text'\n      }));\n\n      // Combine all parts (without deduplication to preserve metadata)\n      const allParts = [...cleanTextParts, ...partsFromBrackets];\n      return {\n        original: input.original,\n        cleaned: input.cleaned,\n        separated: allParts,\n        type: 'delimiter-separation',\n        previous: {\n          type: input.type,\n          separated: input.separated,\n          matchDetails: input.matchDetails\n        }\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processDelimiterSeparation(item, delimiters));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processDelimiterSeparation(input[key], delimiters);\n      }\n      return result;\n    }\n    return input;\n  };\n  const toggleStepActive = stepId => {\n    setPipeline(pipeline.map(step => step.id === stepId ? {\n      ...step,\n      active: !step.active\n    } : step));\n  };\n  const selectStep = stepId => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = delimiterString => {\n    setPipeline(pipeline.map(step => step.id === 'delimiter-separation' ? {\n      ...step,\n      config: {\n        ...step.config,\n        delimiters: delimiterString.split('').filter(d => d) // Split into characters and filter empty\n      }\n    } : step));\n  };\n\n  // Flatten data structure to generate simple rows\n  const flattenData = (data, path = '', rows = []) => {\n    if (!data) return rows;\n    if (data.type === 'bracket-separation' || data.type === 'delimiter-separation') {\n      rows.push({\n        path,\n        original: data.original,\n        separated: data.separated,\n        type: data.type,\n        previous: data.previous\n      });\n    } else if (Array.isArray(data)) {\n      data.forEach((item, index) => {\n        const itemPath = path ? `${path}[${index}]` : `[${index}]`;\n        flattenData(item, itemPath, rows);\n      });\n    } else if (typeof data === 'object' && data !== null) {\n      Object.entries(data).forEach(([key, value]) => {\n        const keyPath = path ? `${path}.${key}` : key;\n        flattenData(value, keyPath, rows);\n      });\n    } else if (path) {\n      // Simple value\n      rows.push({\n        path,\n        original: data,\n        separated: []\n      });\n    }\n    return rows;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"separation-classifier\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"classifier-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-content\",\n          children: processedData ? /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"data-table\",\n            children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"original-cell\",\n                  children: typeof row.original === 'string' ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    dangerouslySetInnerHTML: {\n                      __html: row.original.replace(/(\\[.*?\\]|\\(.*?\\)|\\{.*?\\})/g, '<span class=\"highlight-bracket\">$1</span>')\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 27\n                  }, this) : String(row.original)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 249,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  className: \"separated-cell\",\n                  children: row.separated && row.separated.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"separated-values\",\n                    children: Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string') ?\n                    // Old format (just strings)\n                    row.separated.map((val, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"value-tag\",\n                      children: val\n                    }, idx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 267,\n                      columnNumber: 33\n                    }, this)) :\n                    // New format (with metadata)\n                    row.separated.map((item, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: `value-tag ${item.source === 'bracket' ? 'bracket-source' : item.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                      children: typeof item === 'string' ? item : item.value\n                    }, idx, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 33\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 263,\n                    columnNumber: 27\n                  }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"no-values\",\n                    children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 261,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"no-data\",\n            children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pipeline-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD30C\\uC774\\uD504\\uB77C\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-list\",\n          children: [pipeline.map((step, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `pipeline-step ${step.active ? 'active' : 'inactive'} ${selectedStep === step.id ? 'selected' : ''}`,\n            onClick: () => selectStep(step.id),\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"step-number\",\n              children: index + 1\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"step-details\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"step-title\",\n                children: step.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"step-control\",\n                children: /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"toggle\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"checkbox\",\n                    checked: step.active,\n                    onChange: () => toggleStepActive(step.id),\n                    onClick: e => e.stopPropagation()\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"toggle-track\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 317,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 17\n            }, this), selectedStep === step.id && step.id === 'delimiter-separation' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"step-config\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"config-row\",\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  children: \"\\uAD6C\\uBD84\\uC790:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 324,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  value: step.config.delimiters.join(''),\n                  onChange: e => updateDelimiters(e.target.value),\n                  className: \"delimiter-input\",\n                  placeholder: \"\\uAD6C\\uBD84\\uC790 \\uC785\\uB825 (\\uC608: ,;)\",\n                  onClick: e => e.stopPropagation()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 325,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 323,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"delimiter-help\",\n                children: [\"\\uAC01 \\uBB38\\uC790\\uB294 \\uAC1C\\uBCC4 \\uAD6C\\uBD84\\uC790\\uB85C \\uCC98\\uB9AC\\uB429\\uB2C8\\uB2E4. \\uC608: \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \",\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 47\n                }, this), \" \", /*#__PURE__*/_jsxDEV(\"code\", {\n                  children: \"\\uACF5\\uBC31\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 335,\n                  columnNumber: 62\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 334,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 322,\n              columnNumber: 19\n            }, this)]\n          }, step.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-step\",\n            children: \"+ \\uCC98\\uB9AC \\uB2E8\\uACC4 \\uCD94\\uAC00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: onReset,\n            children: \"\\uCD08\\uAE30\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .separation-classifier {\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .classifier-layout {\n          display: flex;\n          gap: 20px;\n          height: 100%;\n        }\n        \n        /* Data View - left side (wider) */\n        .data-view {\n          flex: 3;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          overflow: auto;\n        }\n        \n        .data-content {\n          height: calc(100% - 40px);\n          overflow: auto;\n        }\n        \n        /* Pipeline Panel - right side (narrower) */\n        .pipeline-panel {\n          flex: 1;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        h3 {\n          margin-top: 0;\n          margin-bottom: 16px;\n          color: #202124;\n          font-size: 16px;\n        }\n        \n        .pipeline-list {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          flex-grow: 1;\n        }\n        \n        .pipeline-step {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          border-radius: 6px;\n          background: #f8f9fa;\n          border: 1px solid #dadce0;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        \n        .pipeline-step:hover {\n          background: #f1f3f4;\n        }\n        \n        .pipeline-step.active {\n          border-color: #4285F4;\n        }\n        \n        .pipeline-step.selected {\n          background: #e8f0fe;\n        }\n        \n        .step-number {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          background: #4285F4;\n          color: white;\n          font-weight: bold;\n          margin-right: 10px;\n        }\n        \n        .pipeline-step.inactive .step-number {\n          background: #dadce0;\n        }\n        \n        .step-details {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .step-title {\n          font-weight: 500;\n        }\n        \n        .step-config {\n          margin-top: 12px;\n          padding-top: 12px;\n          border-top: 1px solid #dadce0;\n        }\n        \n        .config-row {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n          margin-bottom: 8px;\n        }\n        \n        .config-row label {\n          font-size: 14px;\n          color: #5f6368;\n          width: 60px;\n        }\n        \n        .delimiter-input {\n          flex: 1;\n          padding: 6px 8px;\n          border: 1px solid #dadce0;\n          border-radius: 4px;\n          font-size: 14px;\n        }\n        \n        .delimiter-help {\n          font-size: 12px;\n          color: #5f6368;\n          margin-top: 4px;\n        }\n        \n        .add-step {\n          margin-top: 8px;\n          padding: 10px;\n          border: 1px dashed #dadce0;\n          background: none;\n          border-radius: 6px;\n          color: #4285F4;\n          cursor: pointer;\n          text-align: center;\n          font-weight: 500;\n        }\n        \n        .add-step:hover {\n          background: #f8f9fa;\n        }\n        \n        .pipeline-actions {\n          margin-top: 16px;\n        }\n        \n        .reset-button {\n          width: 100%;\n          padding: 8px 16px;\n          background: #4285F4;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n        \n        .reset-button:hover {\n          background: #1a73e8;\n        }\n        \n        /* Toggle Switch */\n        .toggle {\n          position: relative;\n          display: inline-block;\n          width: 32px;\n          height: 16px;\n        }\n        \n        .toggle input {\n          opacity: 0;\n          width: 0;\n          height: 0;\n        }\n        \n        .toggle-track {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: .3s;\n          border-radius: 16px;\n        }\n        \n        .toggle-track:before {\n          position: absolute;\n          content: \"\";\n          height: 12px;\n          width: 12px;\n          left: 2px;\n          bottom: 2px;\n          background-color: white;\n          transition: .3s;\n          border-radius: 50%;\n        }\n        \n        input:checked + .toggle-track {\n          background-color: #4285F4;\n        }\n        \n        input:checked + .toggle-track:before {\n          transform: translateX(16px);\n        }\n        \n        /* Data Table */\n        .data-table {\n          width: 100%;\n          border-collapse: collapse;\n          font-size: 14px;\n        }\n        \n        .data-table th,\n        .data-table td {\n          padding: 10px;\n          text-align: left;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .data-table th {\n          background: #f8f9fa;\n          font-weight: 600;\n          color: #5f6368;\n        }\n        \n        .original-cell {\n          font-family: monospace;\n          color: #202124;\n          max-width: 300px;\n          width: 45%;\n          overflow-wrap: break-word;\n        }\n        \n        .highlight-bracket {\n          background-color: #fce8e6;\n          color: #d93025;\n          border-radius: 2px;\n          padding: 0 2px;\n        }\n        \n        .separated-cell {\n          width: 55%;\n          max-width: 300px;\n        }\n        \n        .separated-values {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 6px;\n        }\n        \n        .value-tag {\n          background: #e8f0fe;\n          color: #1967d2;\n          padding: 3px 8px;\n          border-radius: 16px;\n          font-size: 13px;\n          white-space: nowrap;\n        }\n        \n        .value-tag.bracket-source {\n          background-color: #fce8e6;\n          color: #d93025;\n        }\n        \n        .value-tag.text-source {\n          background-color: #e6f4ea;\n          color: #188038;\n        }\n        \n        .value-tag.delimiter-source {\n          background-color: #e8f0fe;\n          color: #1967d2;\n        }\n        \n        .no-values {\n          color: #5f6368;\n          font-style: italic;\n        }\n        \n        .no-data {\n          color: #5f6368;\n          font-style: italic;\n          padding: 20px;\n          text-align: center;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_s(SeparationClassifier, \"LGPMKhCOnHhQ4FdSMkHAJtAL5mw=\");\n_c = SeparationClassifier;\nexport default SeparationClassifier;\nvar _c;\n$RefreshReg$(_c, \"SeparationClassifier\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SeparationClassifier","data","onReset","_s","processedData","setProcessedData","pipeline","setPipeline","id","name","active","config","delimiters","selectedStep","setSelectedStep","result","forEach","step","processBracketSeparation","processDelimiterSeparation","input","bracketRegex","matches","matchDetails","match","exec","value","push","bracketType","fullMatch","startIndex","index","endIndex","length","cleanedOriginal","replace","trim","original","cleaned","separated","type","Array","isArray","map","item","key","delimiterPattern","d","join","regex","RegExp","parts","split","filter","part","includes","source","textToProcess","partsFromOriginal","partsFromBrackets","val","bracketInfo","cleanTextParts","allParts","previous","toggleStepActive","stepId","selectStep","updateDelimiters","delimiterString","flattenData","path","rows","itemPath","Object","entries","keyPath","className","children","fileName","_jsxFileName","lineNumber","columnNumber","row","dangerouslySetInnerHTML","__html","String","every","v","idx","onClick","checked","onChange","e","stopPropagation","target","placeholder","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SeparationClassifier = ({ data, onReset }) => {\n  const [processedData, setProcessedData] = useState(null);\n  const [pipeline, setPipeline] = useState([\n    { id: 'bracket-separation', name: '괄호값 분리', active: true },\n    { \n      id: 'delimiter-separation', \n      name: '구분자 분리', \n      active: false,\n      config: {\n        delimiters: [',', ' '] // Default delimiters: comma and whitespace\n      }\n    }\n  ]);\n  const [selectedStep, setSelectedStep] = useState('bracket-separation');\n  \n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Process data through all active pipeline steps\n      let result = { ...data };\n      \n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n          // Add more step processors here in the future\n        }\n      });\n      \n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n    }\n  }, [data, pipeline]);\n\n  const processBracketSeparation = (input) => {\n    if (typeof input === 'string') {\n      const bracketRegex = /\\[(.*?)\\]|\\((.*?)\\)|\\{(.*?)\\}/g;\n      const matches = [];\n      const matchDetails = [];\n      let match;\n      \n      while ((match = bracketRegex.exec(input)) !== null) {\n        const value = match[1] || match[2] || match[3];\n        if (value) {\n          matches.push(value);\n          \n          // Store metadata about the match\n          matchDetails.push({\n            value,\n            bracketType: match[1] ? 'square' : match[2] ? 'round' : 'curly',\n            fullMatch: match[0], // The full match including brackets\n            startIndex: match.index,\n            endIndex: match.index + match[0].length\n          });\n        }\n      }\n      \n      // Clean the original string by removing all brackets\n      const cleanedOriginal = input.replace(/\\[.*?\\]|\\(.*?\\)|\\{.*?\\}/g, '').replace(/\\s+/g, ' ').trim();\n      \n      return {\n        original: input,\n        cleaned: cleanedOriginal,\n        separated: matches,\n        matchDetails: matchDetails,\n        type: 'bracket-separation'\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processBracketSeparation(item));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processBracketSeparation(input[key]);\n      }\n      return result;\n    }\n    \n    return input;\n  };\n\n  const processDelimiterSeparation = (input, delimiters) => {\n    if (typeof input === 'string') {\n      // Create a regex pattern from the delimiters\n      const delimiterPattern = delimiters.map(d => \n        // Escape special regex characters in delimiters\n        d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      ).join('|');\n      \n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n      \n      // Split the string by the delimiters and filter out empty strings\n      const parts = input.split(regex).filter(part => \n        part.trim() !== '' && !delimiters.includes(part.trim())\n      );\n      \n      return {\n        original: input,\n        separated: parts.map(part => ({\n          value: part,\n          source: 'delimiter'\n        })),\n        type: 'delimiter-separation'\n      };\n    } else if (input && input.type === 'bracket-separation') {\n      // Process the original text with delimiter separation\n      const delimiterPattern = delimiters.map(d => \n        d.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')\n      ).join('|');\n      \n      const regex = new RegExp(`(${delimiterPattern})`, 'g');\n      \n      // Use the cleaned text (without brackets) if available\n      const textToProcess = input.cleaned || input.original;\n      \n      // Split the original text and filter\n      const partsFromOriginal = textToProcess.split(regex).filter(part => \n        part.trim() !== '' && !delimiters.includes(part.trim())\n      );\n      \n      // Process each bracket value\n      const partsFromBrackets = [];\n      if (input.separated) {\n        input.separated.forEach((val, index) => {\n          const parts = val.split(regex).filter(part => \n            part.trim() !== '' && !delimiters.includes(part.trim())\n          );\n          \n          // Add each part with source metadata\n          parts.forEach(part => {\n            partsFromBrackets.push({\n              value: part,\n              source: 'bracket',\n              bracketInfo: input.matchDetails ? input.matchDetails[index] : null\n            });\n          });\n        });\n      }\n      \n      // Add clean text parts with source metadata\n      const cleanTextParts = partsFromOriginal.map(part => ({\n        value: part,\n        source: 'clean-text'\n      }));\n      \n      // Combine all parts (without deduplication to preserve metadata)\n      const allParts = [...cleanTextParts, ...partsFromBrackets];\n      \n      return {\n        original: input.original,\n        cleaned: input.cleaned,\n        separated: allParts,\n        type: 'delimiter-separation',\n        previous: {\n          type: input.type,\n          separated: input.separated,\n          matchDetails: input.matchDetails\n        }\n      };\n    } else if (Array.isArray(input)) {\n      return input.map(item => processDelimiterSeparation(item, delimiters));\n    } else if (typeof input === 'object' && input !== null) {\n      const result = {};\n      for (const key in input) {\n        result[key] = processDelimiterSeparation(input[key], delimiters);\n      }\n      return result;\n    }\n    \n    return input;\n  };\n\n  const toggleStepActive = (stepId) => {\n    setPipeline(pipeline.map(step => \n      step.id === stepId ? { ...step, active: !step.active } : step\n    ));\n  };\n\n  const selectStep = (stepId) => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = (delimiterString) => {\n    setPipeline(pipeline.map(step => \n      step.id === 'delimiter-separation' \n        ? { \n            ...step, \n            config: { \n              ...step.config, \n              delimiters: delimiterString.split('').filter(d => d) // Split into characters and filter empty\n            } \n          } \n        : step\n    ));\n  };\n\n  // Flatten data structure to generate simple rows\n  const flattenData = (data, path = '', rows = []) => {\n    if (!data) return rows;\n    \n    if (data.type === 'bracket-separation' || data.type === 'delimiter-separation') {\n      rows.push({\n        path,\n        original: data.original,\n        separated: data.separated,\n        type: data.type,\n        previous: data.previous\n      });\n    } else if (Array.isArray(data)) {\n      data.forEach((item, index) => {\n        const itemPath = path ? `${path}[${index}]` : `[${index}]`;\n        flattenData(item, itemPath, rows);\n      });\n    } else if (typeof data === 'object' && data !== null) {\n      Object.entries(data).forEach(([key, value]) => {\n        const keyPath = path ? `${path}.${key}` : key;\n        flattenData(value, keyPath, rows);\n      });\n    } else if (path) {\n      // Simple value\n      rows.push({\n        path,\n        original: data,\n        separated: []\n      });\n    }\n    \n    return rows;\n  };\n\n  return (\n    <div className=\"separation-classifier\">\n      <div className=\"classifier-layout\">\n        {/* Left side - Data View (wider) */}\n        <div className=\"data-view\">\n          <h3>처리된 데이터</h3>\n          <div className=\"data-content\">\n            {processedData ? (\n              <table className=\"data-table\">\n                <tbody>\n                  {flattenData(processedData).map((row, index) => (\n                    <tr key={index}>\n                      <td className=\"original-cell\">\n                        {typeof row.original === 'string' ? (\n                          <div dangerouslySetInnerHTML={{ \n                            __html: row.original.replace(\n                              /(\\[.*?\\]|\\(.*?\\)|\\{.*?\\})/g, \n                              '<span class=\"highlight-bracket\">$1</span>'\n                            )\n                          }} />\n                        ) : (\n                          String(row.original)\n                        )}\n                      </td>\n                      <td className=\"separated-cell\">\n                        {row.separated && row.separated.length > 0 ? (\n                          <div className=\"separated-values\">\n                            {Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string') ? (\n                              // Old format (just strings)\n                              row.separated.map((val, idx) => (\n                                <span key={idx} className=\"value-tag\">{val}</span>\n                              ))\n                            ) : (\n                              // New format (with metadata)\n                              row.separated.map((item, idx) => (\n                                <span \n                                  key={idx} \n                                  className={`value-tag ${item.source === 'bracket' ? 'bracket-source' : \n                                                         item.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n                                >\n                                  {typeof item === 'string' ? item : item.value}\n                                </span>\n                              ))\n                            )}\n                          </div>\n                        ) : (\n                          <span className=\"no-values\">추출된 값 없음</span>\n                        )}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            ) : (\n              <div className=\"no-data\">처리할 데이터가 없습니다</div>\n            )}\n          </div>\n        </div>\n        \n        {/* Right side - Pipeline (narrower) */}\n        <div className=\"pipeline-panel\">\n          <h3>파이프라인</h3>\n          <div className=\"pipeline-list\">\n            {pipeline.map((step, index) => (\n              <div \n                key={step.id}\n                className={`pipeline-step ${step.active ? 'active' : 'inactive'} ${selectedStep === step.id ? 'selected' : ''}`}\n                onClick={() => selectStep(step.id)}\n              >\n                <div className=\"step-number\">{index + 1}</div>\n                <div className=\"step-details\">\n                  <div className=\"step-title\">{step.name}</div>\n                  <div className=\"step-control\">\n                    <label className=\"toggle\">\n                      <input \n                        type=\"checkbox\" \n                        checked={step.active}\n                        onChange={() => toggleStepActive(step.id)}\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                      <span className=\"toggle-track\"></span>\n                    </label>\n                  </div>\n                </div>\n                {selectedStep === step.id && step.id === 'delimiter-separation' && (\n                  <div className=\"step-config\">\n                    <div className=\"config-row\">\n                      <label>구분자:</label>\n                      <input \n                        type=\"text\" \n                        value={step.config.delimiters.join('')}\n                        onChange={(e) => updateDelimiters(e.target.value)}\n                        className=\"delimiter-input\"\n                        placeholder=\"구분자 입력 (예: ,;)\"\n                        onClick={(e) => e.stopPropagation()}\n                      />\n                    </div>\n                    <div className=\"delimiter-help\">\n                      각 문자는 개별 구분자로 처리됩니다. 예: <code>,</code> <code>공백</code>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))}\n            \n            <button className=\"add-step\">\n              + 처리 단계 추가\n            </button>\n          </div>\n          \n          <div className=\"pipeline-actions\">\n            <button className=\"reset-button\" onClick={onReset}>\n              초기화\n            </button>\n          </div>\n        </div>\n      </div>\n      \n      <style jsx>{`\n        .separation-classifier {\n          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n        }\n        \n        .classifier-layout {\n          display: flex;\n          gap: 20px;\n          height: 100%;\n        }\n        \n        /* Data View - left side (wider) */\n        .data-view {\n          flex: 3;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          overflow: auto;\n        }\n        \n        .data-content {\n          height: calc(100% - 40px);\n          overflow: auto;\n        }\n        \n        /* Pipeline Panel - right side (narrower) */\n        .pipeline-panel {\n          flex: 1;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.1);\n          padding: 16px;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        h3 {\n          margin-top: 0;\n          margin-bottom: 16px;\n          color: #202124;\n          font-size: 16px;\n        }\n        \n        .pipeline-list {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          flex-grow: 1;\n        }\n        \n        .pipeline-step {\n          display: flex;\n          flex-direction: column;\n          padding: 10px;\n          border-radius: 6px;\n          background: #f8f9fa;\n          border: 1px solid #dadce0;\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        \n        .pipeline-step:hover {\n          background: #f1f3f4;\n        }\n        \n        .pipeline-step.active {\n          border-color: #4285F4;\n        }\n        \n        .pipeline-step.selected {\n          background: #e8f0fe;\n        }\n        \n        .step-number {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          border-radius: 50%;\n          background: #4285F4;\n          color: white;\n          font-weight: bold;\n          margin-right: 10px;\n        }\n        \n        .pipeline-step.inactive .step-number {\n          background: #dadce0;\n        }\n        \n        .step-details {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        \n        .step-title {\n          font-weight: 500;\n        }\n        \n        .step-config {\n          margin-top: 12px;\n          padding-top: 12px;\n          border-top: 1px solid #dadce0;\n        }\n        \n        .config-row {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n          margin-bottom: 8px;\n        }\n        \n        .config-row label {\n          font-size: 14px;\n          color: #5f6368;\n          width: 60px;\n        }\n        \n        .delimiter-input {\n          flex: 1;\n          padding: 6px 8px;\n          border: 1px solid #dadce0;\n          border-radius: 4px;\n          font-size: 14px;\n        }\n        \n        .delimiter-help {\n          font-size: 12px;\n          color: #5f6368;\n          margin-top: 4px;\n        }\n        \n        .add-step {\n          margin-top: 8px;\n          padding: 10px;\n          border: 1px dashed #dadce0;\n          background: none;\n          border-radius: 6px;\n          color: #4285F4;\n          cursor: pointer;\n          text-align: center;\n          font-weight: 500;\n        }\n        \n        .add-step:hover {\n          background: #f8f9fa;\n        }\n        \n        .pipeline-actions {\n          margin-top: 16px;\n        }\n        \n        .reset-button {\n          width: 100%;\n          padding: 8px 16px;\n          background: #4285F4;\n          color: white;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n          font-weight: 500;\n        }\n        \n        .reset-button:hover {\n          background: #1a73e8;\n        }\n        \n        /* Toggle Switch */\n        .toggle {\n          position: relative;\n          display: inline-block;\n          width: 32px;\n          height: 16px;\n        }\n        \n        .toggle input {\n          opacity: 0;\n          width: 0;\n          height: 0;\n        }\n        \n        .toggle-track {\n          position: absolute;\n          cursor: pointer;\n          top: 0;\n          left: 0;\n          right: 0;\n          bottom: 0;\n          background-color: #ccc;\n          transition: .3s;\n          border-radius: 16px;\n        }\n        \n        .toggle-track:before {\n          position: absolute;\n          content: \"\";\n          height: 12px;\n          width: 12px;\n          left: 2px;\n          bottom: 2px;\n          background-color: white;\n          transition: .3s;\n          border-radius: 50%;\n        }\n        \n        input:checked + .toggle-track {\n          background-color: #4285F4;\n        }\n        \n        input:checked + .toggle-track:before {\n          transform: translateX(16px);\n        }\n        \n        /* Data Table */\n        .data-table {\n          width: 100%;\n          border-collapse: collapse;\n          font-size: 14px;\n        }\n        \n        .data-table th,\n        .data-table td {\n          padding: 10px;\n          text-align: left;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .data-table th {\n          background: #f8f9fa;\n          font-weight: 600;\n          color: #5f6368;\n        }\n        \n        .original-cell {\n          font-family: monospace;\n          color: #202124;\n          max-width: 300px;\n          width: 45%;\n          overflow-wrap: break-word;\n        }\n        \n        .highlight-bracket {\n          background-color: #fce8e6;\n          color: #d93025;\n          border-radius: 2px;\n          padding: 0 2px;\n        }\n        \n        .separated-cell {\n          width: 55%;\n          max-width: 300px;\n        }\n        \n        .separated-values {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 6px;\n        }\n        \n        .value-tag {\n          background: #e8f0fe;\n          color: #1967d2;\n          padding: 3px 8px;\n          border-radius: 16px;\n          font-size: 13px;\n          white-space: nowrap;\n        }\n        \n        .value-tag.bracket-source {\n          background-color: #fce8e6;\n          color: #d93025;\n        }\n        \n        .value-tag.text-source {\n          background-color: #e6f4ea;\n          color: #188038;\n        }\n        \n        .value-tag.delimiter-source {\n          background-color: #e8f0fe;\n          color: #1967d2;\n        }\n        \n        .no-values {\n          color: #5f6368;\n          font-style: italic;\n        }\n        \n        .no-data {\n          color: #5f6368;\n          font-style: italic;\n          padding: 20px;\n          text-align: center;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default SeparationClassifier; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}