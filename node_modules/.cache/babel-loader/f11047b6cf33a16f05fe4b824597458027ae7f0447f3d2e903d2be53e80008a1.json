{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js\";\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupPanel = ({\n  groupData\n}) => {\n  var _s = $RefreshSig$();\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uADF8\\uB8F9\\uD654\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n\n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      var _groupData$groups$ite;\n      // Check if this substring itself appears as a value\n      const isActualValue = (_groupData$groups$ite = groupData.groups[item.substring]) === null || _groupData$groups$ite === void 0 ? void 0 : _groupData$groups$ite.some(value => value === item.substring);\n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null,\n        isActualValue,\n        depth: 0 // Track depth for dendrogram display\n      });\n    });\n\n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        const nodeB = substringMap.get(itemB.substring);\n\n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && itemA.substring.length < itemB.substring.length) {\n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n\n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && substringC !== itemB.substring && substringC.includes(itemA.substring) && itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n\n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n\n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n\n    // Calculate depth for each node (for dendrogram)\n    const calculateDepth = (node, depth = 0) => {\n      node.depth = depth;\n      node.children.forEach(child => calculateDepth(child, depth + 1));\n    };\n\n    // Calculate max depth for proper spacing\n    let maxDepth = 0;\n    const updateMaxDepth = depth => {\n      if (depth > maxDepth) maxDepth = depth;\n    };\n\n    // Sort children nodes by frequency (descending) and then by length (descending)\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring length\n          return b.item.substring.length - a.item.substring.length;\n        });\n      }\n    }\n\n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values()).filter(node => node.parent === null)\n    // Sort root nodes by frequency and length\n    .sort((a, b) => {\n      // First sort by frequency (count)\n      if (b.item.count !== a.item.count) {\n        return b.item.count - a.item.count;\n      }\n      // Then by substring length\n      return b.item.substring.length - a.item.substring.length;\n    });\n\n    // Calculate depths for all nodes\n    rootNodes.forEach(node => calculateDepth(node));\n\n    // Find the maximum depth\n    const findMaxDepth = node => {\n      updateMaxDepth(node.depth);\n      node.children.forEach(findMaxDepth);\n    };\n    rootNodes.forEach(findMaxDepth);\n    return {\n      rootNodes,\n      substringMap,\n      maxDepth\n    };\n  };\n  const {\n    rootNodes,\n    maxDepth\n  } = buildHierarchy();\n\n  // Dendrogram node component\n  const DendrogramNode = ({\n    node,\n    siblingIndex,\n    siblingCount,\n    parentY\n  }) => {\n    _s();\n    var _groupData$groups$ite2;\n    const [expanded, setExpanded] = useState(true);\n    const {\n      item,\n      children,\n      isActualValue,\n      depth\n    } = node;\n    const hasChildren = children && children.length > 0;\n\n    // Toggle expansion state\n    const toggleExpand = () => setExpanded(!expanded);\n\n    // Get group values that are not the substring itself\n    const otherValues = ((_groupData$groups$ite2 = groupData.groups[item.substring]) === null || _groupData$groups$ite2 === void 0 ? void 0 : _groupData$groups$ite2.filter(value => value !== item.substring)) || [];\n\n    // Position variables for dendrogram\n    const isFirstChild = siblingIndex === 0;\n    const isLastChild = siblingIndex === siblingCount - 1;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dendrogram-node\",\n      style: {\n        '--depth': depth,\n        '--max-depth': maxDepth\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dendrogram-connector\",\n        children: [depth > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dendrogram-parent-connector\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dendrogram-horizontal-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dendrogram-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dendrogram-header\",\n          children: [hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `tree-toggle ${expanded ? 'expanded' : 'collapsed'}`,\n            onClick: toggleExpand,\n            children: expanded ? '−' : '+'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 15\n          }, this), isActualValue ? /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value-tag\",\n            children: [item.substring, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tag-count\",\n              children: [\"(\", item.count, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: [item.substring, /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"tag-count\",\n              children: [\"(\", item.count, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), expanded && otherValues.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dendrogram-values\",\n          children: otherValues.map((value, valueIdx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value-tag\",\n            children: value.includes(item.substring) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [value.indexOf(item.substring) > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-prefix\",\n                children: value.substring(0, value.indexOf(item.substring))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-highlight\",\n                children: item.substring\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 23\n              }, this), value.indexOf(item.substring) + item.substring.length < value.length && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-suffix\",\n                children: value.substring(value.indexOf(item.substring) + item.substring.length)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true) : value\n          }, valueIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 13\n        }, this), expanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dendrogram-children\",\n          children: children.map((childNode, idx) => /*#__PURE__*/_jsxDEV(DendrogramNode, {\n            node: childNode,\n            siblingIndex: idx,\n            siblingCount: children.length,\n            parentY: 0 // This would be calculated based on DOM position in a full implementation\n          }, childNode.item.substring, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 부분문자열로 그룹화된 항목들을 덴드로그램 형태로 표시\n  _s(DendrogramNode, \"NZEs4N34I2vU569ODzuIjdsqMlo=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uBD80\\uBD84\\uBB38\\uC790\\uC5F4 \\uADF8\\uB8F9 (\\uB374\\uB4DC\\uB85C\\uADF8\\uB7A8)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dendrogram-container\",\n      children: [groupData.ungrouped && groupData.ungrouped.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ungrouped-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ungrouped-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"group-name\",\n            children: \"\\uADF8\\uB8F9\\uD654\\uB418\\uC9C0 \\uC54A\\uC74C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"group-count\",\n            children: [\"(\", groupData.ungrouped.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ungrouped-values\",\n          children: groupData.ungrouped.map((value, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value-tag\",\n            children: value\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dendrogram-view\",\n        children: rootNodes.map((rootNode, i) => /*#__PURE__*/_jsxDEV(DendrogramNode, {\n          node: rootNode,\n          siblingIndex: i,\n          siblingCount: rootNodes.length,\n          parentY: null\n        }, rootNode.item.substring, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_c = GroupPanel;\nexport default GroupPanel;\nvar _c;\n$RefreshReg$(_c, \"GroupPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupPanel","groupData","_s","$RefreshSig$","substrings","groups","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buildHierarchy","substringMap","Map","forEach","item","_groupData$groups$ite","isActualValue","substring","some","value","set","parent","depth","itemA","nodeA","get","itemB","nodeB","includes","length","moreSpecificParentExists","substringC","nodeC","entries","prevParentChildren","index","indexOf","splice","push","calculateDepth","node","child","maxDepth","updateMaxDepth","values","sort","a","b","count","rootNodes","Array","from","filter","findMaxDepth","DendrogramNode","siblingIndex","siblingCount","parentY","_groupData$groups$ite2","expanded","setExpanded","hasChildren","toggleExpand","otherValues","isFirstChild","isLastChild","style","onClick","map","valueIdx","childNode","idx","ungrouped","rootNode","i","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst GroupPanel = ({ groupData }) => {\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return <div className=\"no-data\">그룹화된 데이터가 없습니다</div>;\n  }\n  \n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n    \n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      // Check if this substring itself appears as a value\n      const isActualValue = groupData.groups[item.substring]?.some(\n        value => value === item.substring\n      );\n      \n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null,\n        isActualValue,\n        depth: 0 // Track depth for dendrogram display\n      });\n    });\n    \n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      \n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        \n        const nodeB = substringMap.get(itemB.substring);\n        \n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && \n            itemA.substring.length < itemB.substring.length) {\n          \n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n          \n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && \n                substringC !== itemB.substring && \n                substringC.includes(itemA.substring) && \n                itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n          \n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n            \n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n    \n    // Calculate depth for each node (for dendrogram)\n    const calculateDepth = (node, depth = 0) => {\n      node.depth = depth;\n      node.children.forEach(child => calculateDepth(child, depth + 1));\n    };\n    \n    // Calculate max depth for proper spacing\n    let maxDepth = 0;\n    const updateMaxDepth = (depth) => {\n      if (depth > maxDepth) maxDepth = depth;\n    };\n    \n    // Sort children nodes by frequency (descending) and then by length (descending)\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring length\n          return b.item.substring.length - a.item.substring.length;\n        });\n      }\n    }\n    \n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values())\n      .filter(node => node.parent === null)\n      // Sort root nodes by frequency and length\n      .sort((a, b) => {\n        // First sort by frequency (count)\n        if (b.item.count !== a.item.count) {\n          return b.item.count - a.item.count;\n        }\n        // Then by substring length\n        return b.item.substring.length - a.item.substring.length;\n      });\n    \n    // Calculate depths for all nodes\n    rootNodes.forEach(node => calculateDepth(node));\n    \n    // Find the maximum depth\n    const findMaxDepth = (node) => {\n      updateMaxDepth(node.depth);\n      node.children.forEach(findMaxDepth);\n    };\n    rootNodes.forEach(findMaxDepth);\n    \n    return { rootNodes, substringMap, maxDepth };\n  };\n  \n  const { rootNodes, maxDepth } = buildHierarchy();\n  \n  // Dendrogram node component\n  const DendrogramNode = ({ node, siblingIndex, siblingCount, parentY }) => {\n    const [expanded, setExpanded] = useState(true);\n    const { item, children, isActualValue, depth } = node;\n    const hasChildren = children && children.length > 0;\n    \n    // Toggle expansion state\n    const toggleExpand = () => setExpanded(!expanded);\n    \n    // Get group values that are not the substring itself\n    const otherValues = groupData.groups[item.substring]?.filter(\n      value => value !== item.substring\n    ) || [];\n    \n    // Position variables for dendrogram\n    const isFirstChild = siblingIndex === 0;\n    const isLastChild = siblingIndex === siblingCount - 1;\n    \n    return (\n      <div className=\"dendrogram-node\" style={{ '--depth': depth, '--max-depth': maxDepth }}>\n        <div className=\"dendrogram-connector\">\n          {/* Vertical stem from parent */}\n          {depth > 0 && <div className=\"dendrogram-parent-connector\" />}\n          \n          {/* Horizontal line */}\n          <div className=\"dendrogram-horizontal-line\" />\n        </div>\n        \n        <div className=\"dendrogram-content\">\n          <div className=\"dendrogram-header\">\n            {/* Toggle control for children */}\n            {hasChildren && (\n              <button \n                className={`tree-toggle ${expanded ? 'expanded' : 'collapsed'}`}\n                onClick={toggleExpand}\n              >\n                {expanded ? '−' : '+'}\n              </button>\n            )}\n            \n            {/* Node label */}\n            {isActualValue ? (\n              <span className=\"value-tag\">\n                {item.substring}\n                <span className=\"tag-count\">({item.count})</span>\n              </span>\n            ) : (\n              <span className=\"unprocessed-tag\">\n                {item.substring}\n                <span className=\"tag-count\">({item.count})</span>\n              </span>\n            )}\n          </div>\n          \n          {/* Show values for this substring */}\n          {expanded && otherValues.length > 0 && (\n            <div className=\"dendrogram-values\">\n              {otherValues.map((value, valueIdx) => (\n                <span key={valueIdx} className=\"value-tag\">\n                  {/* 부분문자열을 강조 표시 */}\n                  {value.includes(item.substring) ? (\n                    <>\n                      {value.indexOf(item.substring) > 0 && (\n                        <span className=\"value-prefix\">\n                          {value.substring(0, value.indexOf(item.substring))}\n                        </span>\n                      )}\n                      <span className=\"value-highlight\">\n                        {item.substring}\n                      </span>\n                      {value.indexOf(item.substring) + item.substring.length < value.length && (\n                        <span className=\"value-suffix\">\n                          {value.substring(value.indexOf(item.substring) + item.substring.length)}\n                        </span>\n                      )}\n                    </>\n                  ) : value}\n                </span>\n              ))}\n            </div>\n          )}\n          \n          {/* Child nodes with dendrogram connector lines */}\n          {expanded && hasChildren && (\n            <div className=\"dendrogram-children\">\n              {children.map((childNode, idx) => (\n                <DendrogramNode \n                  key={childNode.item.substring}\n                  node={childNode}\n                  siblingIndex={idx}\n                  siblingCount={children.length}\n                  parentY={0} // This would be calculated based on DOM position in a full implementation\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // 부분문자열로 그룹화된 항목들을 덴드로그램 형태로 표시\n  return (\n    <div className=\"group-panel\">\n      <h3>부분문자열 그룹 (덴드로그램)</h3>\n      \n      <div className=\"dendrogram-container\">\n        {/* 그룹화되지 않은 항목 */}\n        {groupData.ungrouped && groupData.ungrouped.length > 0 && (\n          <div className=\"ungrouped-section\">\n            <div className=\"ungrouped-header\">\n              <span className=\"group-name\">그룹화되지 않음</span>\n              <span className=\"group-count\">({groupData.ungrouped.length})</span>\n            </div>\n            <div className=\"ungrouped-values\">\n              {groupData.ungrouped.map((value, idx) => (\n                <span key={idx} className=\"value-tag\">{value}</span>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* 부분문자열로 계층적으로 그룹화된 항목들 (덴드로그램) */}\n        <div className=\"dendrogram-view\">\n          {rootNodes.map((rootNode, i) => (\n            <DendrogramNode \n              key={rootNode.item.substring} \n              node={rootNode}\n              siblingIndex={i}\n              siblingCount={rootNodes.length}\n              parentY={null}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}