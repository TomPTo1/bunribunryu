{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationList = ({\n  channel,\n  selectedHeader,\n  onCombinationSelect,\n  selectedCombination\n}) => {\n  _s();\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const svgRef = useRef(null);\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining data for test mode\n          generateMiningData(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining data from actual response\n          generateMiningData(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningData(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (activeTab === 'mining' && miningData && svgRef.current) {\n      renderMiningTreeSvg();\n    }\n  }, [miningData, activeTab, expandedNodes, highlightedPattern]);\n\n  // Function to render the SVG visualization of the mining tree\n  const renderMiningTreeSvg = () => {\n    if (!svgRef.current || !miningData) return;\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    const svgWidth = svg.clientWidth || 300;\n    const nodeHeight = 30;\n    const nodeWidth = svgWidth * 0.8;\n    const levelIndent = 20;\n    const circleRadius = 6;\n\n    // Calculate visible nodes based on expanded state\n    const visibleNodes = [];\n\n    // Add root node\n    visibleNodes.push({\n      id: 'root',\n      name: 'FP-Tree Root',\n      level: 0,\n      x: svgWidth / 2,\n      y: 20,\n      isRoot: true,\n      support: miningData.reduce((sum, node) => sum + node.support, 0)\n    });\n\n    // Add top-level nodes\n    let yOffset = 60;\n    miningData.forEach((node, index) => {\n      const isExpanded = expandedNodes[node.id];\n      const nodeY = yOffset;\n      visibleNodes.push({\n        ...node,\n        level: 1,\n        x: levelIndent + 10,\n        y: nodeY,\n        isExpanded,\n        parent: 'root'\n      });\n      yOffset += nodeHeight;\n\n      // Add children if expanded\n      if (isExpanded && node.children && node.children.length > 0) {\n        node.children.forEach((child, childIndex) => {\n          const childIsExpanded = expandedNodes[child.id];\n          visibleNodes.push({\n            ...child,\n            level: 2,\n            x: levelIndent * 2 + 10,\n            y: yOffset,\n            isExpanded: childIsExpanded,\n            parent: node.id\n          });\n          yOffset += nodeHeight;\n\n          // Add grandchildren if child is expanded\n          if (childIsExpanded && child.children && child.children.length > 0) {\n            child.children.forEach(grandchild => {\n              visibleNodes.push({\n                ...grandchild,\n                level: 3,\n                x: levelIndent * 3 + 10,\n                y: yOffset,\n                isExpanded: false,\n                parent: child.id\n              });\n              yOffset += nodeHeight;\n            });\n          }\n        });\n      }\n    });\n\n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`);\n\n    // Create node connections (links)\n    visibleNodes.forEach(node => {\n      if (node.parent) {\n        const parent = visibleNodes.find(n => n.id === node.parent);\n        if (parent) {\n          // Create path\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n\n          // Define path control points\n          const startX = parent.x + circleRadius;\n          const startY = parent.y;\n          const endX = node.x - circleRadius;\n          const endY = node.y;\n          const controlX = endX - 20;\n\n          // Create curved path\n          const d = `M ${startX} ${startY} C ${controlX} ${startY}, ${controlX} ${endY}, ${endX} ${endY}`;\n          path.setAttribute('d', d);\n          path.setAttribute('stroke', '#ccc');\n          path.setAttribute('stroke-width', '1.5');\n          path.setAttribute('fill', 'none');\n\n          // Highlight path if node is part of highlighted pattern\n          if (highlightedPattern && (highlightedPattern.includes(node.id) || highlightedPattern.includes(parent.id))) {\n            path.setAttribute('stroke', '#ff7f0e');\n            path.setAttribute('stroke-width', '2');\n          }\n          svg.appendChild(path);\n        }\n      }\n    });\n\n    // Create node circles and labels\n    visibleNodes.forEach(node => {\n      const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      group.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n\n      // Node circle\n      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      circle.setAttribute('r', node.isRoot ? circleRadius + 2 : circleRadius);\n      circle.setAttribute('fill', getNodeColor(node, highlightedPattern));\n      circle.setAttribute('stroke', '#fff');\n      circle.setAttribute('stroke-width', '1.5');\n\n      // Make node interactive for expansion if it has children\n      if (node.children && node.children.length > 0 || node.isRoot) {\n        group.style.cursor = 'pointer';\n        group.addEventListener('click', () => {\n          if (!node.isRoot) {\n            toggleNode(node.id);\n          }\n        });\n\n        // Hover effect to highlight patterns\n        group.addEventListener('mouseenter', () => {\n          if (!node.isRoot) {\n            const pattern = getNodePattern(node, visibleNodes);\n            setHighlightedPattern(pattern);\n          }\n        });\n        group.addEventListener('mouseleave', () => {\n          setHighlightedPattern(null);\n        });\n      }\n\n      // Plus/minus indicator for expandable nodes\n      if (!node.isRoot && node.children && node.children.length > 0) {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', -3);\n        indicator.setAttribute('y', 4);\n        indicator.setAttribute('font-size', '10px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#fff');\n        indicator.setAttribute('text-anchor', 'middle');\n        group.appendChild(indicator);\n      }\n\n      // Node label\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', node.isRoot ? 0 : 12);\n      text.setAttribute('y', 4);\n      text.setAttribute('font-size', node.isRoot ? '12px' : '11px');\n      text.setAttribute('fill', '#333');\n\n      // Split text to fit within width\n      const displayText = node.isRoot ? 'FP-Tree Root' : node.name;\n      text.textContent = displayText;\n\n      // Support count label\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', node.isRoot ? 0 : nodeWidth - 30);\n      supportText.setAttribute('y', 4);\n      supportText.setAttribute('font-size', '10px');\n      supportText.setAttribute('fill', '#666');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.textContent = `(${node.support})`;\n      group.appendChild(circle);\n      group.appendChild(text);\n      group.appendChild(supportText);\n      svg.appendChild(group);\n    });\n  };\n\n  // Helper function to get node color based on level and highlight state\n  const getNodeColor = (node, highlightedPattern) => {\n    if (node.isRoot) return '#4682b4';\n    const colors = ['#7b68ee', '#3cb371', '#ff7f50', '#da70d6'];\n    const baseColor = colors[(node.level - 1) % colors.length];\n\n    // Highlight if node is part of highlighted pattern\n    if (highlightedPattern && highlightedPattern.includes(node.id)) {\n      return '#ff7f0e';\n    }\n    return baseColor;\n  };\n\n  // Helper function to get the full pattern for a node (all ancestors)\n  const getNodePattern = (node, visibleNodes) => {\n    const pattern = [node.id];\n    let currentNode = node;\n    while (currentNode.parent && currentNode.parent !== 'root') {\n      const parentNode = visibleNodes.find(n => n.id === currentNode.parent);\n      if (parentNode) {\n        pattern.push(parentNode.id);\n        currentNode = parentNode;\n      } else {\n        break;\n      }\n    }\n    return pattern;\n  };\n\n  // Function to generate mining data from header combinations\n  const generateMiningData = combinationData => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Step 3: Filter low frequency items and sort by frequency\n    const minSupport = Math.max(2, Math.floor(transactions.length * 0.1)); // At least 10% support\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupport).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Step 4: Find frequent patterns and their support\n    const patterns = {};\n\n    // First add single items\n    frequentItems.forEach(item => {\n      patterns[item] = {\n        support: itemCounts[item],\n        items: [item],\n        children: {}\n      };\n    });\n\n    // Then find frequent pairs\n    for (let i = 0; i < frequentItems.length; i++) {\n      const item1 = frequentItems[i];\n      for (let j = i + 1; j < frequentItems.length; j++) {\n        const item2 = frequentItems[j];\n        let pairCount = 0;\n\n        // Count co-occurrences\n        transactions.forEach(transaction => {\n          if (transaction.includes(item1) && transaction.includes(item2)) {\n            pairCount++;\n          }\n        });\n\n        // Add if frequent enough\n        if (pairCount >= minSupport) {\n          // Add as child of item1\n          patterns[item1].children[item2] = {\n            support: pairCount,\n            items: [item1, item2],\n            children: {}\n          };\n\n          // Find frequent triplets with this pair\n          for (let k = j + 1; k < frequentItems.length; k++) {\n            const item3 = frequentItems[k];\n            let tripletCount = 0;\n\n            // Count co-occurrences\n            transactions.forEach(transaction => {\n              if (transaction.includes(item1) && transaction.includes(item2) && transaction.includes(item3)) {\n                tripletCount++;\n              }\n            });\n\n            // Add if frequent enough\n            if (tripletCount >= minSupport) {\n              patterns[item1].children[item2].children[item3] = {\n                support: tripletCount,\n                items: [item1, item2, item3],\n                children: {}\n              };\n            }\n          }\n        }\n      }\n    }\n\n    // Convert to array format for rendering\n    const result = frequentItems.map(item => ({\n      id: item,\n      name: item,\n      support: itemCounts[item],\n      children: Object.keys(patterns[item].children).map(child => ({\n        id: `${item}-${child}`,\n        name: child,\n        support: patterns[item].children[child].support,\n        children: Object.keys(patterns[item].children[child].children || {}).map(grandchild => ({\n          id: `${item}-${child}-${grandchild}`,\n          name: grandchild,\n          support: patterns[item].children[child].children[grandchild].support,\n          children: []\n        }))\n      }))\n    }));\n    setMiningData(result);\n\n    // Initialize expanded state for top-level nodes\n    const initialExpanded = {};\n    result.slice(0, 3).forEach(node => {\n      initialExpanded[node.id] = true;\n    });\n    setExpandedNodes(initialExpanded);\n  };\n  const handleCombinationClick = combination => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = headerGroup => {\n    if (!headerGroup) return null;\n    const headers = headerGroup.split('|');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-tags\",\n      children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"similarity-tag\",\n        children: header\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n\n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n\n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningData(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-title\",\n        children: !testMode && selectedHeader ? `헤더명 조합 목록: ${selectedHeader}` : '헤더명 조합 목록'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-mode-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Test Mode \", testMode ? 'ON' : 'OFF']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 462,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: testMode,\n            onChange: toggleTestMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 463,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'combination' ? 'active' : ''}`,\n        onClick: () => setActiveTab('combination'),\n        children: \"\\uC870\\uD569\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'mining' ? 'active' : ''}`,\n        onClick: () => setActiveTab('mining'),\n        children: \"\\uB9C8\\uC774\\uB2DD\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this), activeTab === 'combination' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 13\n      }, this) : combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-content\",\n        children: combinationHeaders.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column-item ${selectedCombination === item.header_group ? 'selected' : ''}`,\n          onClick: () => handleCombinationClick(item.header_group),\n          children: renderHeaderGroupAsTags(item.header_group)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"테스트 모드가 활성화되었습니다.\" : \"채널과 헤더를 선택해주세요.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 507,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 13\n      }, this) : miningData ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-tree-legend\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#4682b4'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uB8E8\\uD2B8 \\uB178\\uB4DC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 525,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#7b68ee'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"\\uB2E8\\uC77C \\uD56D\\uBAA9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 527,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#3cb371'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"2\\uAC1C \\uD56D\\uBAA9 \\uC870\\uD569\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"legend-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"legend-color\",\n              style: {\n                backgroundColor: '#ff7f50'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"3\\uAC1C \\uD56D\\uBAA9 \\uC870\\uD569\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 537,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 535,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-tree-svg-container\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            className: \"mining-tree-svg\",\n            ref: svgRef,\n            width: \"100%\",\n            height: \"400\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-explanation\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"FP Growth \\uB9C8\\uC774\\uB2DD \\uD2B8\\uB9AC \\uC2DC\\uAC01\\uD654:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 551,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uB178\\uB4DC\\uB97C \\uD074\\uB9AD\\uD558\\uC5EC \\uD558\\uC704 \\uD328\\uD134 \\uD655\\uC7A5/\\uCD95\\uC18C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 553,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uB178\\uB4DC\\uC5D0 \\uB9C8\\uC6B0\\uC2A4\\uB97C \\uC62C\\uB9AC\\uBA74 \\uD328\\uD134 \\uD558\\uC774\\uB77C\\uC774\\uD2B8\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 554,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uAD04\\uD638 \\uC548\\uC758 \\uC22B\\uC790\\uB294 \\uD574\\uB2F9 \\uD328\\uD134\\uC758 \\uBC1C\\uC0DD \\uBE48\\uB3C4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 555,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 552,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 FP Growth 마이닝 결과가 표시됩니다.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-tree-legend {\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n          margin-bottom: 8px;\n          border-bottom: 1px solid #eee;\n          font-size: 11px;\n        }\n        \n        .legend-item {\n          display: flex;\n          align-items: center;\n          margin-right: 8px;\n        }\n        \n        .legend-color {\n          display: inline-block;\n          width: 10px;\n          height: 10px;\n          border-radius: 50%;\n          margin-right: 4px;\n        }\n        \n        .mining-tree-svg-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #fafafa;\n          flex-grow: 1;\n          min-height: 300px;\n        }\n        \n        .mining-explanation {\n          margin-top: 16px;\n          font-size: 12px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 8px 12px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 20px;\n          margin: 8px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 569,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationList, \"xhxohX6cfNoNdVAOfnUH+0/h2Y4=\");\n_c = HeaderCombinationList;\nexport default HeaderCombinationList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchHeaderCombinationList","jsxDEV","_jsxDEV","HeaderCombinationList","channel","selectedHeader","onCombinationSelect","selectedCombination","_s","combinationHeaders","setCombinationHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","testMode","setTestMode","miningData","setMiningData","expandedNodes","setExpandedNodes","highlightedPattern","setHighlightedPattern","svgRef","getCombinationHeaders","response","console","log","list","generateMiningData","headers","Array","isArray","err","message","current","renderMiningTreeSvg","svg","firstChild","removeChild","svgWidth","clientWidth","nodeHeight","nodeWidth","levelIndent","circleRadius","visibleNodes","push","id","name","level","x","y","isRoot","support","reduce","sum","node","yOffset","forEach","index","isExpanded","nodeY","parent","children","length","child","childIndex","childIsExpanded","grandchild","setAttribute","find","n","path","document","createElementNS","startX","startY","endX","endY","controlX","d","includes","appendChild","group","circle","getNodeColor","style","cursor","addEventListener","toggleNode","pattern","getNodePattern","indicator","textContent","text","displayText","supportText","colors","baseColor","currentNode","parentNode","combinationData","transactions","filter","item","header_group","map","split","itemCounts","transaction","minSupport","Math","max","floor","frequentItems","Object","keys","sort","a","b","patterns","items","i","item1","j","item2","pairCount","k","item3","tripletCount","result","initialExpanded","slice","handleCombinationClick","combination","nodeId","prev","renderHeaderGroupAsTags","headerGroup","className","header","fileName","_jsxFileName","lineNumber","columnNumber","toggleTestMode","newTestMode","type","checked","onChange","onClick","backgroundColor","ref","width","height","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\n\nconst HeaderCombinationList = ({ channel, selectedHeader, onCombinationSelect, selectedCombination }) => {\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const svgRef = useRef(null);\n\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      \n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining data for test mode\n          generateMiningData(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining data from actual response\n          generateMiningData(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningData(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningData(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (activeTab === 'mining' && miningData && svgRef.current) {\n      renderMiningTreeSvg();\n    }\n  }, [miningData, activeTab, expandedNodes, highlightedPattern]);\n\n  // Function to render the SVG visualization of the mining tree\n  const renderMiningTreeSvg = () => {\n    if (!svgRef.current || !miningData) return;\n\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n\n    const svgWidth = svg.clientWidth || 300;\n    const nodeHeight = 30;\n    const nodeWidth = svgWidth * 0.8;\n    const levelIndent = 20;\n    const circleRadius = 6;\n    \n    // Calculate visible nodes based on expanded state\n    const visibleNodes = [];\n    \n    // Add root node\n    visibleNodes.push({\n      id: 'root',\n      name: 'FP-Tree Root',\n      level: 0,\n      x: svgWidth / 2,\n      y: 20,\n      isRoot: true,\n      support: miningData.reduce((sum, node) => sum + node.support, 0)\n    });\n    \n    // Add top-level nodes\n    let yOffset = 60;\n    miningData.forEach((node, index) => {\n      const isExpanded = expandedNodes[node.id];\n      const nodeY = yOffset;\n      \n      visibleNodes.push({\n        ...node,\n        level: 1,\n        x: levelIndent + 10,\n        y: nodeY,\n        isExpanded,\n        parent: 'root'\n      });\n      \n      yOffset += nodeHeight;\n      \n      // Add children if expanded\n      if (isExpanded && node.children && node.children.length > 0) {\n        node.children.forEach((child, childIndex) => {\n          const childIsExpanded = expandedNodes[child.id];\n          \n          visibleNodes.push({\n            ...child,\n            level: 2,\n            x: levelIndent * 2 + 10,\n            y: yOffset,\n            isExpanded: childIsExpanded,\n            parent: node.id\n          });\n          \n          yOffset += nodeHeight;\n          \n          // Add grandchildren if child is expanded\n          if (childIsExpanded && child.children && child.children.length > 0) {\n            child.children.forEach((grandchild) => {\n              visibleNodes.push({\n                ...grandchild,\n                level: 3,\n                x: levelIndent * 3 + 10,\n                y: yOffset,\n                isExpanded: false,\n                parent: child.id\n              });\n              \n              yOffset += nodeHeight;\n            });\n          }\n        });\n      }\n    });\n    \n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`);\n    \n    // Create node connections (links)\n    visibleNodes.forEach(node => {\n      if (node.parent) {\n        const parent = visibleNodes.find(n => n.id === node.parent);\n        if (parent) {\n          // Create path\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          \n          // Define path control points\n          const startX = parent.x + circleRadius;\n          const startY = parent.y;\n          const endX = node.x - circleRadius;\n          const endY = node.y;\n          const controlX = endX - 20;\n          \n          // Create curved path\n          const d = `M ${startX} ${startY} C ${controlX} ${startY}, ${controlX} ${endY}, ${endX} ${endY}`;\n          \n          path.setAttribute('d', d);\n          path.setAttribute('stroke', '#ccc');\n          path.setAttribute('stroke-width', '1.5');\n          path.setAttribute('fill', 'none');\n          \n          // Highlight path if node is part of highlighted pattern\n          if (highlightedPattern && \n              (highlightedPattern.includes(node.id) || \n               highlightedPattern.includes(parent.id))) {\n            path.setAttribute('stroke', '#ff7f0e');\n            path.setAttribute('stroke-width', '2');\n          }\n          \n          svg.appendChild(path);\n        }\n      }\n    });\n    \n    // Create node circles and labels\n    visibleNodes.forEach(node => {\n      const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      group.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n      \n      // Node circle\n      const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');\n      circle.setAttribute('r', node.isRoot ? circleRadius + 2 : circleRadius);\n      circle.setAttribute('fill', getNodeColor(node, highlightedPattern));\n      circle.setAttribute('stroke', '#fff');\n      circle.setAttribute('stroke-width', '1.5');\n      \n      // Make node interactive for expansion if it has children\n      if ((node.children && node.children.length > 0) || node.isRoot) {\n        group.style.cursor = 'pointer';\n        group.addEventListener('click', () => {\n          if (!node.isRoot) {\n            toggleNode(node.id);\n          }\n        });\n        \n        // Hover effect to highlight patterns\n        group.addEventListener('mouseenter', () => {\n          if (!node.isRoot) {\n            const pattern = getNodePattern(node, visibleNodes);\n            setHighlightedPattern(pattern);\n          }\n        });\n        \n        group.addEventListener('mouseleave', () => {\n          setHighlightedPattern(null);\n        });\n      }\n      \n      // Plus/minus indicator for expandable nodes\n      if (!node.isRoot && node.children && node.children.length > 0) {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', -3);\n        indicator.setAttribute('y', 4);\n        indicator.setAttribute('font-size', '10px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#fff');\n        indicator.setAttribute('text-anchor', 'middle');\n        group.appendChild(indicator);\n      }\n      \n      // Node label\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', node.isRoot ? 0 : 12);\n      text.setAttribute('y', 4);\n      text.setAttribute('font-size', node.isRoot ? '12px' : '11px');\n      text.setAttribute('fill', '#333');\n      \n      // Split text to fit within width\n      const displayText = node.isRoot ? 'FP-Tree Root' : node.name;\n      text.textContent = displayText;\n      \n      // Support count label\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', node.isRoot ? 0 : nodeWidth - 30);\n      supportText.setAttribute('y', 4);\n      supportText.setAttribute('font-size', '10px');\n      supportText.setAttribute('fill', '#666');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.textContent = `(${node.support})`;\n      \n      group.appendChild(circle);\n      group.appendChild(text);\n      group.appendChild(supportText);\n      svg.appendChild(group);\n    });\n  };\n  \n  // Helper function to get node color based on level and highlight state\n  const getNodeColor = (node, highlightedPattern) => {\n    if (node.isRoot) return '#4682b4';\n    \n    const colors = ['#7b68ee', '#3cb371', '#ff7f50', '#da70d6'];\n    const baseColor = colors[(node.level - 1) % colors.length];\n    \n    // Highlight if node is part of highlighted pattern\n    if (highlightedPattern && highlightedPattern.includes(node.id)) {\n      return '#ff7f0e';\n    }\n    \n    return baseColor;\n  };\n  \n  // Helper function to get the full pattern for a node (all ancestors)\n  const getNodePattern = (node, visibleNodes) => {\n    const pattern = [node.id];\n    let currentNode = node;\n    \n    while (currentNode.parent && currentNode.parent !== 'root') {\n      const parentNode = visibleNodes.find(n => n.id === currentNode.parent);\n      if (parentNode) {\n        pattern.push(parentNode.id);\n        currentNode = parentNode;\n      } else {\n        break;\n      }\n    }\n    \n    return pattern;\n  };\n\n  // Function to generate mining data from header combinations\n  const generateMiningData = (combinationData) => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Step 3: Filter low frequency items and sort by frequency\n    const minSupport = Math.max(2, Math.floor(transactions.length * 0.1)); // At least 10% support\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupport)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Step 4: Find frequent patterns and their support\n    const patterns = {};\n    \n    // First add single items\n    frequentItems.forEach(item => {\n      patterns[item] = {\n        support: itemCounts[item],\n        items: [item],\n        children: {}\n      };\n    });\n    \n    // Then find frequent pairs\n    for (let i = 0; i < frequentItems.length; i++) {\n      const item1 = frequentItems[i];\n      \n      for (let j = i + 1; j < frequentItems.length; j++) {\n        const item2 = frequentItems[j];\n        let pairCount = 0;\n        \n        // Count co-occurrences\n        transactions.forEach(transaction => {\n          if (transaction.includes(item1) && transaction.includes(item2)) {\n            pairCount++;\n          }\n        });\n        \n        // Add if frequent enough\n        if (pairCount >= minSupport) {\n          // Add as child of item1\n          patterns[item1].children[item2] = {\n            support: pairCount,\n            items: [item1, item2],\n            children: {}\n          };\n          \n          // Find frequent triplets with this pair\n          for (let k = j + 1; k < frequentItems.length; k++) {\n            const item3 = frequentItems[k];\n            let tripletCount = 0;\n            \n            // Count co-occurrences\n            transactions.forEach(transaction => {\n              if (transaction.includes(item1) && \n                  transaction.includes(item2) && \n                  transaction.includes(item3)) {\n                tripletCount++;\n              }\n            });\n            \n            // Add if frequent enough\n            if (tripletCount >= minSupport) {\n              patterns[item1].children[item2].children[item3] = {\n                support: tripletCount,\n                items: [item1, item2, item3],\n                children: {}\n              };\n            }\n          }\n        }\n      }\n    }\n    \n    // Convert to array format for rendering\n    const result = frequentItems.map(item => ({\n      id: item,\n      name: item,\n      support: itemCounts[item],\n      children: Object.keys(patterns[item].children).map(child => ({\n        id: `${item}-${child}`,\n        name: child,\n        support: patterns[item].children[child].support,\n        children: Object.keys(patterns[item].children[child].children || {}).map(grandchild => ({\n          id: `${item}-${child}-${grandchild}`,\n          name: grandchild,\n          support: patterns[item].children[child].children[grandchild].support,\n          children: []\n        }))\n      }))\n    }));\n    \n    setMiningData(result);\n    \n    // Initialize expanded state for top-level nodes\n    const initialExpanded = {};\n    result.slice(0, 3).forEach(node => {\n      initialExpanded[node.id] = true;\n    });\n    setExpandedNodes(initialExpanded);\n  };\n\n  const handleCombinationClick = (combination) => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = (headerGroup) => {\n    if (!headerGroup) return null;\n    \n    const headers = headerGroup.split('|');\n    return (\n      <div className=\"header-tags\">\n        {headers.map((header, index) => (\n          <span key={index} className=\"similarity-tag\">{header}</span>\n        ))}\n      </div>\n    );\n  };\n\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n    \n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n    \n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningData(null);\n    }\n  };\n\n  return (\n    <div className=\"column-container\">\n      <div className=\"column-title-container\">\n        <h2 className=\"column-title\">\n          {!testMode && selectedHeader \n            ? `헤더명 조합 목록: ${selectedHeader}` \n            : '헤더명 조합 목록'}\n        </h2>\n        <div className=\"test-mode-toggle\">\n          <label className=\"toggle-label\">\n            <span>Test Mode {testMode ? 'ON' : 'OFF'}</span>\n            <input \n              type=\"checkbox\" \n              checked={testMode}\n              onChange={toggleTestMode}\n            />\n            <span className=\"toggle-slider\"></span>\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'combination' ? 'active' : ''}`}\n          onClick={() => setActiveTab('combination')}\n        >\n          조합뷰\n        </button>\n        <button \n          className={`tab ${activeTab === 'mining' ? 'active' : ''}`}\n          onClick={() => setActiveTab('mining')}\n        >\n          마이닝뷰\n        </button>\n      </div>\n      \n      {activeTab === 'combination' ? (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationHeaders.length > 0 ? (\n            <div className=\"column-content\">\n              {combinationHeaders.map((item, index) => (\n                <div\n                  key={index}\n                  className={`column-item ${selectedCombination === item.header_group ? 'selected' : ''}`}\n                  onClick={() => handleCombinationClick(item.header_group)}\n                >\n                  {renderHeaderGroupAsTags(item.header_group)}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"테스트 모드가 활성화되었습니다.\" \n                : \"채널과 헤더를 선택해주세요.\"}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : miningData ? (\n            <div className=\"mining-view\">\n              <div className=\"mining-tree-legend\">\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#4682b4' }}></span>\n                  <span>루트 노드</span>\n                </div>\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#7b68ee' }}></span>\n                  <span>단일 항목</span>\n                </div>\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#3cb371' }}></span>\n                  <span>2개 항목 조합</span>\n                </div>\n                <div className=\"legend-item\">\n                  <span className=\"legend-color\" style={{ backgroundColor: '#ff7f50' }}></span>\n                  <span>3개 항목 조합</span>\n                </div>\n              </div>\n              \n              <div className=\"mining-tree-svg-container\">\n                <svg \n                  className=\"mining-tree-svg\" \n                  ref={svgRef} \n                  width=\"100%\" \n                  height=\"400\"\n                ></svg>\n              </div>\n              \n              <div className=\"mining-explanation\">\n                <p>FP Growth 마이닝 트리 시각화:</p>\n                <ul>\n                  <li>노드를 클릭하여 하위 패턴 확장/축소</li>\n                  <li>노드에 마우스를 올리면 패턴 하이라이트</li>\n                  <li>괄호 안의 숫자는 해당 패턴의 발생 빈도</li>\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"마이닝 데이터를 로딩 중입니다...\" \n                : \"채널과 헤더를 선택하면 FP Growth 마이닝 결과가 표시됩니다.\"}\n            </div>\n          )}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-tree-legend {\n          display: flex;\n          justify-content: space-between;\n          padding: 8px;\n          margin-bottom: 8px;\n          border-bottom: 1px solid #eee;\n          font-size: 11px;\n        }\n        \n        .legend-item {\n          display: flex;\n          align-items: center;\n          margin-right: 8px;\n        }\n        \n        .legend-color {\n          display: inline-block;\n          width: 10px;\n          height: 10px;\n          border-radius: 50%;\n          margin-right: 4px;\n        }\n        \n        .mining-tree-svg-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #fafafa;\n          flex-grow: 1;\n          min-height: 300px;\n        }\n        \n        .mining-explanation {\n          margin-top: 16px;\n          font-size: 12px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 8px 12px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 20px;\n          margin: 8px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default HeaderCombinationList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}