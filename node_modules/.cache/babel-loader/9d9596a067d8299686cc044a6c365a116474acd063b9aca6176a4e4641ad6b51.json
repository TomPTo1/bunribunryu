{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MiningView = ({\n  combinationHeaders,\n  loading,\n  error,\n  testMode\n}) => {\n  _s();\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('eclat'); // 'eclat' or 'fpgrowth'\n  const [minSupport, setMinSupport] = useState(0.1); // 10% default\n  const [minConfidence, setMinConfidence] = useState(0.5); // 50% default\n  const [maxDepth, setMaxDepth] = useState(8); // 패턴 깊이 제한 - 더 깊은 패턴 탐색을 위해 증가\n  const svgRef = useRef(null);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (miningData && svgRef.current) {\n      renderMiningTree();\n    }\n  }, [miningData, expandedNodes, highlightedPattern]);\n\n  // Function to render a unified hierarchical tree visualization\n  const renderMiningTree = () => {\n    if (!svgRef.current || !miningData) return;\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    const CONTAINER_WIDTH = svg.clientWidth || 300;\n    const NODE_HEIGHT = 26;\n    const NODE_SPACING = 2;\n    const LEVEL_INDENT = 20;\n\n    // Calculate tree structure based on expanded nodes\n    const treeNodes = [];\n    let yOffset = 20; // Initial top padding\n\n    // Add root node first\n    treeNodes.push({\n      id: 'root',\n      name: '전체 패턴',\n      support: miningData.reduce((sum, item) => sum + item.support, 0),\n      confidence: 1,\n      level: 0,\n      x: 10,\n      y: yOffset,\n      isExpanded: true,\n      parent: null\n    });\n    yOffset += NODE_HEIGHT + NODE_SPACING;\n\n    // Recursive function to add child nodes\n    const addNodesRecursively = (nodes, parentId, level, isVisible) => {\n      if (!nodes || nodes.length === 0) return;\n\n      // Sort nodes by support for better visualization\n      const sortedNodes = [...nodes].sort((a, b) => b.support - a.support);\n      sortedNodes.forEach(node => {\n        // Skip if parent is collapsed\n        if (!isVisible) return;\n        const isExpanded = expandedNodes[node.id] || false;\n\n        // Add current node\n        treeNodes.push({\n          ...node,\n          level,\n          x: 10 + level * LEVEL_INDENT,\n          y: yOffset,\n          isExpanded,\n          parent: parentId\n        });\n\n        // Increment y-position for next node\n        yOffset += NODE_HEIGHT + NODE_SPACING;\n\n        // Process children if any\n        if (node.children && node.children.length > 0) {\n          addNodesRecursively(node.children, node.id, level + 1, isVisible && isExpanded);\n        }\n      });\n    };\n\n    // Add all nodes from mining data starting from the root\n    addNodesRecursively(miningData, 'root', 1, true);\n\n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`); // Add bottom padding\n\n    // Create a container for the SVG elements\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(container);\n\n    // Draw connections between nodes\n    treeNodes.forEach(node => {\n      if (node.parent) {\n        const parent = treeNodes.find(n => n.id === node.parent);\n        if (parent) {\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          const startX = parent.x + 8; // Start from parent indentation + offset\n          const startY = parent.y + NODE_HEIGHT / 2;\n          const endX = node.x;\n          const endY = node.y + NODE_HEIGHT / 2;\n\n          // Create an elbow connector (straight lines with 90-degree turn)\n          const d = `M ${startX} ${startY} L ${startX + 5} ${startY} L ${startX + 5} ${endY} L ${endX} ${endY}`;\n          path.setAttribute('d', d);\n          path.setAttribute('fill', 'none');\n\n          // Highlight path if node is part of highlighted pattern\n          const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id) && highlightedPattern.includes(parent.id);\n          path.setAttribute('stroke', isHighlighted ? '#ff7f0e' : '#ccc');\n          path.setAttribute('stroke-width', isHighlighted ? '2' : '1.5');\n          container.appendChild(path);\n        }\n      }\n    });\n\n    // Draw nodes\n    treeNodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n\n      // Node background (rectangle)\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n\n      // Calculate width based on content and level\n      const baseWidth = CONTAINER_WIDTH - node.x - 30;\n      const width = Math.min(baseWidth, 220); // Limit max width\n\n      rect.setAttribute('width', width);\n      rect.setAttribute('height', NODE_HEIGHT);\n      rect.setAttribute('rx', 4); // Rounded corners\n\n      // Determine fill color based on level and highlight state\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n      const levelColors = ['#e9f5fe', '#f0f0ff', '#f8f0ff', '#fff0f8', '#fff8f0', '#f0fff8', '#fff0f0', '#f8f8ff', '#fffff0'];\n      let fillColor = levelColors[Math.min(node.level, levelColors.length - 1)];\n      if (isHighlighted) {\n        fillColor = '#fff0e0';\n      }\n      rect.setAttribute('fill', fillColor);\n      rect.setAttribute('stroke', isHighlighted ? '#ff7f0e' : '#ddd');\n      rect.setAttribute('stroke-width', isHighlighted ? '2' : '1');\n\n      // Make nodes interactive\n      if (node.children && node.children.length > 0 || node.id === 'root') {\n        nodeGroup.style.cursor = 'pointer';\n\n        // Toggle expansion on click\n        nodeGroup.addEventListener('click', () => {\n          toggleNode(node.id);\n        });\n      }\n\n      // Hover effect for highlighting patterns\n      nodeGroup.addEventListener('mouseenter', () => {\n        // Find all ancestors and highlight the path\n        const pattern = [node.id];\n        let currentNode = node;\n        while (currentNode.parent) {\n          pattern.push(currentNode.parent);\n          currentNode = treeNodes.find(n => n.id === currentNode.parent);\n          if (!currentNode) break;\n        }\n        setHighlightedPattern(pattern);\n      });\n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n      });\n\n      // Add expansion indicator if node has children\n      if (node.children && node.children.length > 0 || node.id === 'root') {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', width - 15);\n        indicator.setAttribute('y', NODE_HEIGHT / 2 + 4);\n        indicator.setAttribute('font-size', '12px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#999');\n        nodeGroup.appendChild(indicator);\n      }\n\n      // Node label - truncate if needed\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 8);\n      text.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      text.setAttribute('font-size', node.id === 'root' ? '12px' : '11px');\n      text.setAttribute('font-weight', node.id === 'root' ? 'bold' : 'normal');\n      text.setAttribute('fill', '#333');\n\n      // For root, show the name directly\n      if (node.id === 'root') {\n        text.textContent = node.name;\n      } else {\n        // For regular nodes, make sure text fits\n        const maxTextWidth = width - 60; // Leave room for support and indicator\n        let displayText = node.name;\n        if (displayText.length > 20) {\n          displayText = displayText.substring(0, 18) + '...';\n        }\n        text.textContent = displayText;\n      }\n\n      // Support count\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', width - 30);\n      supportText.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      supportText.setAttribute('font-size', '11px');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.setAttribute('fill', '#666');\n      supportText.textContent = node.support;\n      nodeGroup.appendChild(rect);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      container.appendChild(nodeGroup);\n    });\n  };\n\n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n\n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n\n      // Step 2: Find frequent itemsets using ECLAT recursion\n      const frequentItemsets = {};\n\n      // Initialize with single items\n      frequentItems.forEach(item => {\n        const support = tidLists[item].size;\n        frequentItemsets[item] = {\n          support,\n          confidence: support / totalTransactions,\n          tids: tidLists[item],\n          children: {}\n        };\n      });\n\n      // Recursive function to find frequent itemsets (allowing deeper patterns)\n      const eclat = (prefix, tidList, level, parent) => {\n        if (level > maxDepth) return; // 더 깊은 패턴 탐색을 위해 깊이 제한 증가\n\n        // Find extensions with all items that come after the prefix's last item\n        const lastItem = prefix[prefix.length - 1];\n        const lastItemIndex = frequentItems.indexOf(lastItem);\n        for (let i = lastItemIndex + 1; i < frequentItems.length; i++) {\n          const item = frequentItems[i];\n          const itemTids = tidLists[item];\n\n          // Compute intersection\n          const intersection = new Set([...tidList].filter(tid => itemTids.has(tid)));\n          const support = intersection.size;\n\n          // If support is high enough, add to frequent itemsets\n          if (support >= minSupportCount) {\n            const newPrefix = [...prefix, item];\n            const newPrefixStr = item; // Just use the extension item as key\n\n            // Calculate confidence (support of extended pattern / support of prefix)\n            const confidence = support / tidList.size;\n\n            // Add only if confidence meets threshold\n            if (confidence >= minConfidence) {\n              parent.children[newPrefixStr] = {\n                support,\n                confidence,\n                tids: intersection,\n                children: {}\n              };\n\n              // Recursively find extensions of this new prefix\n              eclat(newPrefix, intersection, level + 1, parent.children[newPrefixStr]);\n            }\n          }\n        }\n      };\n\n      // Start ECLAT recursion for each single item\n      frequentItems.forEach(item => {\n        eclat([item], tidLists[item], 1, frequentItemsets[item]);\n      });\n\n      // Convert to array format for visualization\n      const buildDeepNestedTree = itemsets => {\n        const result = [];\n        frequentItems.forEach(item => {\n          const itemData = {\n            id: item,\n            name: item,\n            support: tidLists[item].size,\n            confidence: tidLists[item].size / totalTransactions,\n            children: []\n          };\n\n          // 재귀적으로 모든 자식 노드를 추가하는 함수\n          const addChildrenRecursively = (parentId, parentNode, currentItemset) => {\n            const children = currentItemset.children || {};\n            Object.entries(children).forEach(([childKey, childValue]) => {\n              const childId = `${parentId}-${childKey}`;\n              const childNode = {\n                id: childId,\n                name: childKey,\n                support: childValue.support,\n                confidence: childValue.confidence,\n                children: []\n              };\n              parentNode.children.push(childNode);\n\n              // 재귀적으로 손자 노드 처리\n              addChildrenRecursively(childId, childNode, childValue);\n            });\n          };\n\n          // 첫 레벨 자식 노드 추가\n          addChildrenRecursively(item, itemData, frequentItemsets[item]);\n          result.push(itemData);\n        });\n        return result;\n      };\n      const result = buildDeepNestedTree(frequentItemsets);\n      setMiningData(result);\n    } else {\n      // FP GROWTH ALGORITHM - UNIFIED TREE IMPLEMENTATION\n\n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n\n      // Step 4: Build unified FP-Tree\n      const fpTree = {\n        name: \"root\",\n        count: 0,\n        children: {},\n        nodeLinks: {} // Header table node links\n      };\n\n      // Initialize header table\n      const headerTable = {};\n      frequentItems.forEach(item => {\n        headerTable[item] = {\n          count: itemCounts[item],\n          nodeLink: null\n        };\n      });\n\n      // Insert a transaction into the FP-Tree\n      const insertTransaction = (transaction, tree, count = 1) => {\n        if (transaction.length === 0) return;\n        const item = transaction[0];\n\n        // Create node if it doesn't exist\n        if (!tree.children[item]) {\n          tree.children[item] = {\n            name: item,\n            count: 0,\n            children: {},\n            parent: tree,\n            nextSameItem: null\n          };\n\n          // Update header table node links\n          if (!headerTable[item].nodeLink) {\n            headerTable[item].nodeLink = tree.children[item];\n          } else {\n            let current = headerTable[item].nodeLink;\n            while (current.nextSameItem) {\n              current = current.nextSameItem;\n            }\n            current.nextSameItem = tree.children[item];\n          }\n        }\n\n        // Increment count\n        tree.children[item].count += count;\n\n        // Insert remaining items\n        if (transaction.length > 1) {\n          insertTransaction(transaction.slice(1), tree.children[item], count);\n        }\n      };\n\n      // Insert all transactions\n      orderedTransactions.forEach(transaction => {\n        insertTransaction(transaction, fpTree);\n      });\n\n      // Step 5: Mine patterns using FP-Growth\n      const patterns = {};\n\n      // Mine patterns with a suffix\n      const minePatterns = (headerTable, conditionalBase, suffix = [], parentSupport = totalTransactions) => {\n        // Get items in descending order of frequency\n        const items = Object.keys(headerTable).sort((a, b) => headerTable[b].count - headerTable[a].count);\n        for (const item of items) {\n          // New frequent itemset found\n          const newSuffix = [item, ...suffix];\n          const supportCount = headerTable[item].count;\n\n          // Calculate confidence for patterns with len > 1\n          const confidence = newSuffix.length > 1 ? supportCount / parentSupport : supportCount / totalTransactions;\n\n          // Only include if confidence meets threshold\n          if (confidence >= minConfidence) {\n            // Store pattern\n            const patternKey = newSuffix.join('-');\n            patterns[patternKey] = {\n              items: newSuffix,\n              support: supportCount,\n              confidence: confidence\n            };\n\n            // Build conditional pattern base\n            const conditionalPatternBase = [];\n            let node = headerTable[item].nodeLink;\n            while (node) {\n              // Traverse upward to get the path\n              const path = [];\n              let prefixSupport = node.count;\n              let parent = node.parent;\n              while (parent && parent.name !== \"root\") {\n                path.unshift(parent.name);\n                parent = parent.parent;\n              }\n              if (path.length > 0) {\n                conditionalPatternBase.push({\n                  path,\n                  count: prefixSupport\n                });\n              }\n              node = node.nextSameItem;\n            }\n\n            // Build conditional FP-Tree\n            if (conditionalPatternBase.length > 0) {\n              const newConditionalBase = {};\n\n              // Count items in the conditional pattern base\n              conditionalPatternBase.forEach(({\n                path,\n                count\n              }) => {\n                path.forEach(pathItem => {\n                  newConditionalBase[pathItem] = (newConditionalBase[pathItem] || 0) + count;\n                });\n              });\n\n              // Filter items by minimum support\n              const newHeaderTable = {};\n              Object.keys(newConditionalBase).forEach(item => {\n                if (newConditionalBase[item] >= minSupportCount) {\n                  newHeaderTable[item] = {\n                    count: newConditionalBase[item],\n                    nodeLink: null\n                  };\n                }\n              });\n\n              // Recursively mine with the new conditional tree, up to more depth\n              if (Object.keys(newHeaderTable).length > 0 && newSuffix.length < maxDepth) {\n                minePatterns(newHeaderTable, conditionalPatternBase, newSuffix, supportCount);\n              }\n            }\n          }\n        }\n      };\n\n      // Start mining\n      minePatterns(headerTable, []);\n\n      // Build tree from patterns\n      const buildTree = patterns => {\n        const result = [];\n        const itemMap = {};\n\n        // Group by first item\n        Object.values(patterns).forEach(pattern => {\n          if (pattern.items.length > 0) {\n            const firstItem = pattern.items[0];\n            if (!itemMap[firstItem]) {\n              itemMap[firstItem] = {\n                id: firstItem,\n                name: firstItem,\n                support: itemCounts[firstItem],\n                confidence: itemCounts[firstItem] / totalTransactions,\n                children: []\n              };\n              result.push(itemMap[firstItem]);\n            }\n\n            // Add subsequent items as children\n            if (pattern.items.length > 1) {\n              let currentNode = itemMap[firstItem];\n              let currentPath = firstItem;\n              for (let i = 1; i < pattern.items.length; i++) {\n                const currentItem = pattern.items[i];\n                currentPath = `${currentPath}-${currentItem}`;\n\n                // Check if child already exists\n                let childNode = currentNode.children.find(child => child.name === currentItem);\n                if (!childNode) {\n                  childNode = {\n                    id: currentPath,\n                    name: currentItem,\n                    support: pattern.support,\n                    confidence: pattern.confidence,\n                    children: []\n                  };\n                  currentNode.children.push(childNode);\n                }\n                currentNode = childNode;\n              }\n            }\n          }\n        });\n        return result;\n      };\n      const result = buildTree(patterns);\n      setMiningData(result);\n    }\n\n    // Initialize expanded state for visualization\n    const initialExpanded = {\n      'root': true\n    };\n    // Auto-expand some top nodes for better initial view\n    if (miningData && miningData.length > 0) {\n      // Expand first 3 level 1 nodes\n      miningData.slice(0, 3).forEach(node => {\n        initialExpanded[node.id] = true;\n      });\n    }\n    setExpandedNodes(initialExpanded);\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = algo => {\n    setAlgorithm(algo);\n  };\n\n  // Change minimum support threshold\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  // Change minimum confidence threshold\n  const handleConfidenceChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n\n  // Change maximum depth\n  const handleDepthChange = e => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"\\uC5D0\\uB7EC: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 662,\n      columnNumber: 9\n    }, this) : combinationHeaders && combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"algorithm-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `algorithm-btn ${algorithm === 'eclat' ? 'active' : ''}`,\n            onClick: () => switchAlgorithm('eclat'),\n            children: \"Eclat \\uC54C\\uACE0\\uB9AC\\uC998\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `algorithm-btn ${algorithm === 'fpgrowth' ? 'active' : ''}`,\n            onClick: () => switchAlgorithm('fpgrowth'),\n            children: \"FP-Growth \\uC54C\\uACE0\\uB9AC\\uC998\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 673,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"thresholds-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4: \", (minSupport * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 682,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.05\",\n              max: \"0.5\",\n              step: \"0.05\",\n              value: minSupport,\n              onChange: handleSupportChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 683,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 681,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uC18C \\uC2E0\\uB8B0\\uB3C4: \", (minConfidence * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 693,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.1\",\n              max: \"0.9\",\n              step: \"0.1\",\n              value: minConfidence,\n              onChange: handleConfidenceChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 694,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 692,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uB300 \\uD328\\uD134 \\uAE4A\\uC774: \", maxDepth]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 704,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"3\",\n              max: \"12\",\n              step: \"1\",\n              value: maxDepth,\n              onChange: handleDepthChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 705,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-tree-container\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"mining-tree-svg\",\n          ref: svgRef,\n          width: \"100%\",\n          height: \"400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 717,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-explanation\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [algorithm === 'eclat' ? 'Eclat' : 'FP-Growth', \" \\uC54C\\uACE0\\uB9AC\\uC998 \\uD328\\uD134 \\uC2DC\\uAC01\\uD654:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD328\\uD134 \\uD074\\uB9AD: \\uD558\\uC704 \\uD328\\uD134 \\uD655\\uC7A5/\\uCD95\\uC18C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uB9C8\\uC6B0\\uC2A4 \\uC624\\uBC84: \\uD328\\uD134 \\uACBD\\uB85C \\uD558\\uC774\\uB77C\\uC774\\uD2B8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 730,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uC22B\\uC790: \\uD328\\uD134 \\uBC1C\\uC0DD \\uBE48\\uB3C4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 731,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uB2E8\\uACC4\\uBCC4 \\uC0C9\\uC0C1: \\uD328\\uD134\\uC758 \\uAE4A\\uC774(\\uD56D\\uBAA9 \\uAC1C\\uC218)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 732,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 728,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 726,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 664,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-empty\",\n      children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 737,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          margin-bottom: 12px;\n          background-color: #f8f8f8;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .algorithm-selector {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .algorithm-btn {\n          background: #f0f0f0;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 12px;\n          cursor: pointer;\n        }\n        \n        .algorithm-btn.active {\n          background: #4682b4;\n          color: white;\n          border-color: #4682b4;\n        }\n        \n        .thresholds-control {\n          display: flex;\n          flex-direction: column;\n          gap: 6px;\n        }\n        \n        .threshold-item {\n          display: flex;\n          flex-direction: column;\n          font-size: 11px;\n        }\n        \n        .threshold-item label {\n          margin-bottom: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .mining-tree-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #fafafa;\n          flex-grow: 1;\n          min-height: 300px;\n        }\n        \n        .mining-explanation {\n          margin-top: 10px;\n          font-size: 11px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 6px 10px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 16px;\n          margin: 4px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n        \n        .mining-explanation li {\n          margin-bottom: 2px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 658,\n    columnNumber: 5\n  }, this);\n};\n_s(MiningView, \"jBxrqhttlOzo4HFiaeTNVduA0vQ=\");\n_c = MiningView;\nexport default MiningView;\nvar _c;\n$RefreshReg$(_c, \"MiningView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MiningView","combinationHeaders","loading","error","testMode","_s","miningData","setMiningData","expandedNodes","setExpandedNodes","highlightedPattern","setHighlightedPattern","algorithm","setAlgorithm","minSupport","setMinSupport","minConfidence","setMinConfidence","maxDepth","setMaxDepth","svgRef","length","generateMiningData","current","renderMiningTree","svg","firstChild","removeChild","CONTAINER_WIDTH","clientWidth","NODE_HEIGHT","NODE_SPACING","LEVEL_INDENT","treeNodes","yOffset","push","id","name","support","reduce","sum","item","confidence","level","x","y","isExpanded","parent","addNodesRecursively","nodes","parentId","isVisible","sortedNodes","sort","a","b","forEach","node","children","setAttribute","container","document","createElementNS","appendChild","find","n","path","startX","startY","endX","endY","d","isHighlighted","includes","nodeGroup","rect","baseWidth","width","Math","min","levelColors","fillColor","style","cursor","addEventListener","toggleNode","pattern","currentNode","indicator","textContent","text","maxTextWidth","displayText","substring","supportText","combinationData","algo","transactions","filter","header_group","map","split","itemCounts","totalTransactions","transaction","minSupportCount","max","floor","frequentItems","Object","keys","tidLists","Set","tid","add","frequentItemsets","size","tids","eclat","prefix","tidList","lastItem","lastItemIndex","indexOf","i","itemTids","intersection","has","newPrefix","newPrefixStr","buildDeepNestedTree","itemsets","result","itemData","addChildrenRecursively","parentNode","currentItemset","entries","childKey","childValue","childId","childNode","orderedTransactions","fpTree","count","nodeLinks","headerTable","nodeLink","insertTransaction","tree","nextSameItem","slice","patterns","minePatterns","conditionalBase","suffix","parentSupport","items","newSuffix","supportCount","patternKey","join","conditionalPatternBase","prefixSupport","unshift","newConditionalBase","pathItem","newHeaderTable","buildTree","itemMap","values","firstItem","currentPath","currentItem","child","initialExpanded","switchAlgorithm","handleSupportChange","e","value","parseFloat","target","isNaN","handleConfidenceChange","handleDepthChange","parseInt","nodeId","prev","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toFixed","type","step","onChange","ref","height","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst MiningView = ({ combinationHeaders, loading, error, testMode }) => {\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('eclat'); // 'eclat' or 'fpgrowth'\n  const [minSupport, setMinSupport] = useState(0.1); // 10% default\n  const [minConfidence, setMinConfidence] = useState(0.5); // 50% default\n  const [maxDepth, setMaxDepth] = useState(8); // 패턴 깊이 제한 - 더 깊은 패턴 탐색을 위해 증가\n  const svgRef = useRef(null);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (miningData && svgRef.current) {\n      renderMiningTree();\n    }\n  }, [miningData, expandedNodes, highlightedPattern]);\n\n  // Function to render a unified hierarchical tree visualization\n  const renderMiningTree = () => {\n    if (!svgRef.current || !miningData) return;\n\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n\n    const CONTAINER_WIDTH = svg.clientWidth || 300;\n    const NODE_HEIGHT = 26;\n    const NODE_SPACING = 2;\n    const LEVEL_INDENT = 20;\n    \n    // Calculate tree structure based on expanded nodes\n    const treeNodes = [];\n    let yOffset = 20;  // Initial top padding\n    \n    // Add root node first\n    treeNodes.push({\n      id: 'root',\n      name: '전체 패턴',\n      support: miningData.reduce((sum, item) => sum + item.support, 0),\n      confidence: 1,\n      level: 0,\n      x: 10,\n      y: yOffset,\n      isExpanded: true,\n      parent: null\n    });\n    \n    yOffset += NODE_HEIGHT + NODE_SPACING;\n    \n    // Recursive function to add child nodes\n    const addNodesRecursively = (nodes, parentId, level, isVisible) => {\n      if (!nodes || nodes.length === 0) return;\n      \n      // Sort nodes by support for better visualization\n      const sortedNodes = [...nodes].sort((a, b) => b.support - a.support);\n      \n      sortedNodes.forEach(node => {\n        // Skip if parent is collapsed\n        if (!isVisible) return;\n        \n        const isExpanded = expandedNodes[node.id] || false;\n        \n        // Add current node\n        treeNodes.push({\n          ...node,\n          level,\n          x: 10 + (level * LEVEL_INDENT),\n          y: yOffset,\n          isExpanded,\n          parent: parentId\n        });\n        \n        // Increment y-position for next node\n        yOffset += NODE_HEIGHT + NODE_SPACING;\n        \n        // Process children if any\n        if (node.children && node.children.length > 0) {\n          addNodesRecursively(node.children, node.id, level + 1, isVisible && isExpanded);\n        }\n      });\n    };\n    \n    // Add all nodes from mining data starting from the root\n    addNodesRecursively(miningData, 'root', 1, true);\n    \n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`);  // Add bottom padding\n    \n    // Create a container for the SVG elements\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(container);\n    \n    // Draw connections between nodes\n    treeNodes.forEach(node => {\n      if (node.parent) {\n        const parent = treeNodes.find(n => n.id === node.parent);\n        if (parent) {\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          \n          const startX = parent.x + 8;  // Start from parent indentation + offset\n          const startY = parent.y + (NODE_HEIGHT / 2);\n          const endX = node.x;\n          const endY = node.y + (NODE_HEIGHT / 2);\n          \n          // Create an elbow connector (straight lines with 90-degree turn)\n          const d = `M ${startX} ${startY} L ${startX + 5} ${startY} L ${startX + 5} ${endY} L ${endX} ${endY}`;\n          \n          path.setAttribute('d', d);\n          path.setAttribute('fill', 'none');\n          \n          // Highlight path if node is part of highlighted pattern\n          const isHighlighted = highlightedPattern && (\n            highlightedPattern.includes(node.id) && highlightedPattern.includes(parent.id)\n          );\n          \n          path.setAttribute('stroke', isHighlighted ? '#ff7f0e' : '#ccc');\n          path.setAttribute('stroke-width', isHighlighted ? '2' : '1.5');\n          \n          container.appendChild(path);\n        }\n      }\n    });\n    \n    // Draw nodes\n    treeNodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n      \n      // Node background (rectangle)\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      \n      // Calculate width based on content and level\n      const baseWidth = CONTAINER_WIDTH - node.x - 30;\n      const width = Math.min(baseWidth, 220);  // Limit max width\n      \n      rect.setAttribute('width', width);\n      rect.setAttribute('height', NODE_HEIGHT);\n      rect.setAttribute('rx', 4);  // Rounded corners\n      \n      // Determine fill color based on level and highlight state\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n      const levelColors = ['#e9f5fe', '#f0f0ff', '#f8f0ff', '#fff0f8', '#fff8f0', '#f0fff8', '#fff0f0', '#f8f8ff', '#fffff0'];\n      let fillColor = levelColors[Math.min(node.level, levelColors.length - 1)];\n      \n      if (isHighlighted) {\n        fillColor = '#fff0e0';\n      }\n      \n      rect.setAttribute('fill', fillColor);\n      rect.setAttribute('stroke', isHighlighted ? '#ff7f0e' : '#ddd');\n      rect.setAttribute('stroke-width', isHighlighted ? '2' : '1');\n      \n      // Make nodes interactive\n      if ((node.children && node.children.length > 0) || node.id === 'root') {\n        nodeGroup.style.cursor = 'pointer';\n        \n        // Toggle expansion on click\n        nodeGroup.addEventListener('click', () => {\n          toggleNode(node.id);\n        });\n      }\n      \n      // Hover effect for highlighting patterns\n      nodeGroup.addEventListener('mouseenter', () => {\n        // Find all ancestors and highlight the path\n        const pattern = [node.id];\n        let currentNode = node;\n        \n        while (currentNode.parent) {\n          pattern.push(currentNode.parent);\n          currentNode = treeNodes.find(n => n.id === currentNode.parent);\n          if (!currentNode) break;\n        }\n        \n        setHighlightedPattern(pattern);\n      });\n      \n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n      });\n      \n      // Add expansion indicator if node has children\n      if ((node.children && node.children.length > 0) || node.id === 'root') {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', width - 15);\n        indicator.setAttribute('y', NODE_HEIGHT / 2 + 4);\n        indicator.setAttribute('font-size', '12px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#999');\n        nodeGroup.appendChild(indicator);\n      }\n      \n      // Node label - truncate if needed\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 8);\n      text.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      text.setAttribute('font-size', node.id === 'root' ? '12px' : '11px');\n      text.setAttribute('font-weight', node.id === 'root' ? 'bold' : 'normal');\n      text.setAttribute('fill', '#333');\n      \n      // For root, show the name directly\n      if (node.id === 'root') {\n        text.textContent = node.name;\n      } else {\n        // For regular nodes, make sure text fits\n        const maxTextWidth = width - 60;  // Leave room for support and indicator\n        let displayText = node.name;\n        \n        if (displayText.length > 20) {\n          displayText = displayText.substring(0, 18) + '...';\n        }\n        \n        text.textContent = displayText;\n      }\n      \n      // Support count\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', width - 30);\n      supportText.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      supportText.setAttribute('font-size', '11px');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.setAttribute('fill', '#666');\n      supportText.textContent = node.support;\n      \n      nodeGroup.appendChild(rect);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      container.appendChild(nodeGroup);\n    });\n  };\n  \n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    \n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    \n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n      \n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      \n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n      \n      // Step 2: Find frequent itemsets using ECLAT recursion\n      const frequentItemsets = {};\n      \n      // Initialize with single items\n      frequentItems.forEach(item => {\n        const support = tidLists[item].size;\n        frequentItemsets[item] = {\n          support,\n          confidence: support / totalTransactions,\n          tids: tidLists[item],\n          children: {}\n        };\n      });\n      \n      // Recursive function to find frequent itemsets (allowing deeper patterns)\n      const eclat = (prefix, tidList, level, parent) => {\n        if (level > maxDepth) return; // 더 깊은 패턴 탐색을 위해 깊이 제한 증가\n        \n        // Find extensions with all items that come after the prefix's last item\n        const lastItem = prefix[prefix.length - 1];\n        const lastItemIndex = frequentItems.indexOf(lastItem);\n        \n        for (let i = lastItemIndex + 1; i < frequentItems.length; i++) {\n          const item = frequentItems[i];\n          const itemTids = tidLists[item];\n          \n          // Compute intersection\n          const intersection = new Set([...tidList].filter(tid => itemTids.has(tid)));\n          const support = intersection.size;\n          \n          // If support is high enough, add to frequent itemsets\n          if (support >= minSupportCount) {\n            const newPrefix = [...prefix, item];\n            const newPrefixStr = item; // Just use the extension item as key\n            \n            // Calculate confidence (support of extended pattern / support of prefix)\n            const confidence = support / tidList.size;\n            \n            // Add only if confidence meets threshold\n            if (confidence >= minConfidence) {\n              parent.children[newPrefixStr] = {\n                support,\n                confidence,\n                tids: intersection,\n                children: {}\n              };\n              \n              // Recursively find extensions of this new prefix\n              eclat(newPrefix, intersection, level + 1, parent.children[newPrefixStr]);\n            }\n          }\n        }\n      };\n      \n      // Start ECLAT recursion for each single item\n      frequentItems.forEach(item => {\n        eclat([item], tidLists[item], 1, frequentItemsets[item]);\n      });\n      \n      // Convert to array format for visualization\n      const buildDeepNestedTree = (itemsets) => {\n        const result = [];\n        \n        frequentItems.forEach(item => {\n          const itemData = {\n            id: item,\n            name: item,\n            support: tidLists[item].size,\n            confidence: tidLists[item].size / totalTransactions,\n            children: []\n          };\n          \n          // 재귀적으로 모든 자식 노드를 추가하는 함수\n          const addChildrenRecursively = (parentId, parentNode, currentItemset) => {\n            const children = currentItemset.children || {};\n            \n            Object.entries(children).forEach(([childKey, childValue]) => {\n              const childId = `${parentId}-${childKey}`;\n              const childNode = {\n                id: childId,\n                name: childKey,\n                support: childValue.support,\n                confidence: childValue.confidence,\n                children: []\n              };\n              \n              parentNode.children.push(childNode);\n              \n              // 재귀적으로 손자 노드 처리\n              addChildrenRecursively(childId, childNode, childValue);\n            });\n          };\n          \n          // 첫 레벨 자식 노드 추가\n          addChildrenRecursively(item, itemData, frequentItemsets[item]);\n          \n          result.push(itemData);\n        });\n        \n        return result;\n      };\n      \n      const result = buildDeepNestedTree(frequentItemsets);\n      setMiningData(result);\n      \n    } else {\n      // FP GROWTH ALGORITHM - UNIFIED TREE IMPLEMENTATION\n      \n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction\n          .filter(item => frequentItems.includes(item))\n          .sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n      \n      // Step 4: Build unified FP-Tree\n      const fpTree = { \n        name: \"root\", \n        count: 0,\n        children: {},\n        nodeLinks: {} // Header table node links\n      };\n      \n      // Initialize header table\n      const headerTable = {};\n      frequentItems.forEach(item => {\n        headerTable[item] = {\n          count: itemCounts[item],\n          nodeLink: null\n        };\n      });\n      \n      // Insert a transaction into the FP-Tree\n      const insertTransaction = (transaction, tree, count = 1) => {\n        if (transaction.length === 0) return;\n        \n        const item = transaction[0];\n        \n        // Create node if it doesn't exist\n        if (!tree.children[item]) {\n          tree.children[item] = {\n            name: item,\n            count: 0,\n            children: {},\n            parent: tree,\n            nextSameItem: null\n          };\n          \n          // Update header table node links\n          if (!headerTable[item].nodeLink) {\n            headerTable[item].nodeLink = tree.children[item];\n          } else {\n            let current = headerTable[item].nodeLink;\n            while (current.nextSameItem) {\n              current = current.nextSameItem;\n            }\n            current.nextSameItem = tree.children[item];\n          }\n        }\n        \n        // Increment count\n        tree.children[item].count += count;\n        \n        // Insert remaining items\n        if (transaction.length > 1) {\n          insertTransaction(transaction.slice(1), tree.children[item], count);\n        }\n      };\n      \n      // Insert all transactions\n      orderedTransactions.forEach(transaction => {\n        insertTransaction(transaction, fpTree);\n      });\n      \n      // Step 5: Mine patterns using FP-Growth\n      const patterns = {};\n      \n      // Mine patterns with a suffix\n      const minePatterns = (headerTable, conditionalBase, suffix = [], parentSupport = totalTransactions) => {\n        // Get items in descending order of frequency\n        const items = Object.keys(headerTable).sort((a, b) => headerTable[b].count - headerTable[a].count);\n        \n        for (const item of items) {\n          // New frequent itemset found\n          const newSuffix = [item, ...suffix];\n          const supportCount = headerTable[item].count;\n          \n          // Calculate confidence for patterns with len > 1\n          const confidence = newSuffix.length > 1 ? supportCount / parentSupport : supportCount / totalTransactions;\n          \n          // Only include if confidence meets threshold\n          if (confidence >= minConfidence) {\n            // Store pattern\n            const patternKey = newSuffix.join('-');\n            patterns[patternKey] = {\n              items: newSuffix,\n              support: supportCount,\n              confidence: confidence\n            };\n            \n            // Build conditional pattern base\n            const conditionalPatternBase = [];\n            let node = headerTable[item].nodeLink;\n            \n            while (node) {\n              // Traverse upward to get the path\n              const path = [];\n              let prefixSupport = node.count;\n              let parent = node.parent;\n              \n              while (parent && parent.name !== \"root\") {\n                path.unshift(parent.name);\n                parent = parent.parent;\n              }\n              \n              if (path.length > 0) {\n                conditionalPatternBase.push({\n                  path,\n                  count: prefixSupport\n                });\n              }\n              \n              node = node.nextSameItem;\n            }\n            \n            // Build conditional FP-Tree\n            if (conditionalPatternBase.length > 0) {\n              const newConditionalBase = {};\n              \n              // Count items in the conditional pattern base\n              conditionalPatternBase.forEach(({path, count}) => {\n                path.forEach(pathItem => {\n                  newConditionalBase[pathItem] = (newConditionalBase[pathItem] || 0) + count;\n                });\n              });\n              \n              // Filter items by minimum support\n              const newHeaderTable = {};\n              Object.keys(newConditionalBase).forEach(item => {\n                if (newConditionalBase[item] >= minSupportCount) {\n                  newHeaderTable[item] = {\n                    count: newConditionalBase[item],\n                    nodeLink: null\n                  };\n                }\n              });\n              \n              // Recursively mine with the new conditional tree, up to more depth\n              if (Object.keys(newHeaderTable).length > 0 && newSuffix.length < maxDepth) {\n                minePatterns(newHeaderTable, conditionalPatternBase, newSuffix, supportCount);\n              }\n            }\n          }\n        }\n      };\n      \n      // Start mining\n      minePatterns(headerTable, []);\n      \n      // Build tree from patterns\n      const buildTree = (patterns) => {\n        const result = [];\n        const itemMap = {};\n        \n        // Group by first item\n        Object.values(patterns).forEach(pattern => {\n          if (pattern.items.length > 0) {\n            const firstItem = pattern.items[0];\n            if (!itemMap[firstItem]) {\n              itemMap[firstItem] = {\n                id: firstItem,\n                name: firstItem,\n                support: itemCounts[firstItem],\n                confidence: itemCounts[firstItem] / totalTransactions,\n                children: []\n              };\n              result.push(itemMap[firstItem]);\n            }\n            \n            // Add subsequent items as children\n            if (pattern.items.length > 1) {\n              let currentNode = itemMap[firstItem];\n              let currentPath = firstItem;\n              \n              for (let i = 1; i < pattern.items.length; i++) {\n                const currentItem = pattern.items[i];\n                currentPath = `${currentPath}-${currentItem}`;\n                \n                // Check if child already exists\n                let childNode = currentNode.children.find(child => child.name === currentItem);\n                \n                if (!childNode) {\n                  childNode = {\n                    id: currentPath,\n                    name: currentItem,\n                    support: pattern.support,\n                    confidence: pattern.confidence,\n                    children: []\n                  };\n                  currentNode.children.push(childNode);\n                }\n                \n                currentNode = childNode;\n              }\n            }\n          }\n        });\n        \n        return result;\n      };\n      \n      const result = buildTree(patterns);\n      setMiningData(result);\n    }\n    \n    // Initialize expanded state for visualization\n    const initialExpanded = { 'root': true };\n    // Auto-expand some top nodes for better initial view\n    if (miningData && miningData.length > 0) {\n      // Expand first 3 level 1 nodes\n      miningData.slice(0, 3).forEach(node => {\n        initialExpanded[node.id] = true;\n      });\n    }\n    setExpandedNodes(initialExpanded);\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = (algo) => {\n    setAlgorithm(algo);\n  };\n  \n  // Change minimum support threshold\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  \n  // Change minimum confidence threshold\n  const handleConfidenceChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n  \n  // Change maximum depth\n  const handleDepthChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  return (\n    <div className=\"tab-content\">\n      {loading ? (\n        <div className=\"loading\">로딩 중...</div>\n      ) : error ? (\n        <div className=\"error\">에러: {error}</div>\n      ) : combinationHeaders && combinationHeaders.length > 0 ? (\n        <div className=\"mining-view\">\n          <div className=\"mining-controls\">\n            <div className=\"algorithm-selector\">\n              <button \n                className={`algorithm-btn ${algorithm === 'eclat' ? 'active' : ''}`} \n                onClick={() => switchAlgorithm('eclat')}\n              >\n                Eclat 알고리즘\n              </button>\n              <button \n                className={`algorithm-btn ${algorithm === 'fpgrowth' ? 'active' : ''}`} \n                onClick={() => switchAlgorithm('fpgrowth')}\n              >\n                FP-Growth 알고리즘\n              </button>\n            </div>\n            <div className=\"thresholds-control\">\n              <div className=\"threshold-item\">\n                <label>최소 지지도: {(minSupport * 100).toFixed(0)}%</label>\n                <input \n                  type=\"range\" \n                  min=\"0.05\" \n                  max=\"0.5\" \n                  step=\"0.05\" \n                  value={minSupport}\n                  onChange={handleSupportChange}\n                />\n              </div>\n              <div className=\"threshold-item\">\n                <label>최소 신뢰도: {(minConfidence * 100).toFixed(0)}%</label>\n                <input \n                  type=\"range\" \n                  min=\"0.1\" \n                  max=\"0.9\" \n                  step=\"0.1\" \n                  value={minConfidence}\n                  onChange={handleConfidenceChange}\n                />\n              </div>\n              <div className=\"threshold-item\">\n                <label>최대 패턴 깊이: {maxDepth}</label>\n                <input \n                  type=\"range\" \n                  min=\"3\" \n                  max=\"12\" \n                  step=\"1\" \n                  value={maxDepth}\n                  onChange={handleDepthChange}\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mining-tree-container\">\n            <svg \n              className=\"mining-tree-svg\" \n              ref={svgRef} \n              width=\"100%\" \n              height=\"400\"\n            ></svg>\n          </div>\n          \n          <div className=\"mining-explanation\">\n            <p>{algorithm === 'eclat' ? 'Eclat' : 'FP-Growth'} 알고리즘 패턴 시각화:</p>\n            <ul>\n              <li>패턴 클릭: 하위 패턴 확장/축소</li>\n              <li>마우스 오버: 패턴 경로 하이라이트</li>\n              <li>숫자: 패턴 발생 빈도</li>\n              <li>단계별 색상: 패턴의 깊이(항목 개수)</li>\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <div className=\"column-empty\">\n          {testMode \n            ? \"마이닝 데이터를 로딩 중입니다...\" \n            : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          margin-bottom: 12px;\n          background-color: #f8f8f8;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .algorithm-selector {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .algorithm-btn {\n          background: #f0f0f0;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 12px;\n          cursor: pointer;\n        }\n        \n        .algorithm-btn.active {\n          background: #4682b4;\n          color: white;\n          border-color: #4682b4;\n        }\n        \n        .thresholds-control {\n          display: flex;\n          flex-direction: column;\n          gap: 6px;\n        }\n        \n        .threshold-item {\n          display: flex;\n          flex-direction: column;\n          font-size: 11px;\n        }\n        \n        .threshold-item label {\n          margin-bottom: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .mining-tree-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #fafafa;\n          flex-grow: 1;\n          min-height: 300px;\n        }\n        \n        .mining-explanation {\n          margin-top: 10px;\n          font-size: 11px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 6px 10px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 16px;\n          margin: 4px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n        \n        .mining-explanation li {\n          margin-bottom: 2px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default MiningView; "],"mappings":"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AOyM,GAAG;MAAA9I,QAAA,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAAO;MAAAmI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV,CAAC;AAAC3L,EAAA,CAh0BIL,UAAU;AAAAyM,EAAA,GAAVzM,UAAU;AAk0BhB,eAAeA,UAAU;AAAC,IAAAyM,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}