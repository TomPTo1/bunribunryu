{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js\";\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupPanel = ({\n  groupData\n}) => {\n  var _s = $RefreshSig$();\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uADF8\\uB8F9\\uD654\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n\n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      var _groupData$groups$ite;\n      // Check if this substring itself appears as a value\n      const isActualValue = (_groupData$groups$ite = groupData.groups[item.substring]) === null || _groupData$groups$ite === void 0 ? void 0 : _groupData$groups$ite.some(value => value === item.substring);\n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null,\n        isActualValue\n      });\n    });\n\n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        const nodeB = substringMap.get(itemB.substring);\n\n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && itemA.substring.length < itemB.substring.length) {\n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n\n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && substringC !== itemB.substring && substringC.includes(itemA.substring) && itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n\n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n\n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n\n    // Sort children nodes by frequency (descending) and then by length (descending)\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring length\n          return b.item.substring.length - a.item.substring.length;\n        });\n      }\n    }\n\n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values()).filter(node => node.parent === null)\n    // Sort root nodes by frequency and length\n    .sort((a, b) => {\n      // First sort by frequency (count)\n      if (b.item.count !== a.item.count) {\n        return b.item.count - a.item.count;\n      }\n      // Then by substring length\n      return b.item.substring.length - a.item.substring.length;\n    });\n    return {\n      rootNodes,\n      substringMap\n    };\n  };\n  const {\n    rootNodes\n  } = buildHierarchy();\n\n  // TreeNode component for each substring item\n  const TreeNode = ({\n    node,\n    isLast,\n    level\n  }) => {\n    _s();\n    var _groupData$groups$ite2;\n    const [expanded, setExpanded] = useState(true);\n    const {\n      item,\n      children,\n      isActualValue\n    } = node;\n    const hasChildren = children && children.length > 0;\n\n    // Toggle expansion state\n    const toggleExpand = () => setExpanded(!expanded);\n\n    // Get group values that are not the substring itself\n    const otherValues = ((_groupData$groups$ite2 = groupData.groups[item.substring]) === null || _groupData$groups$ite2 === void 0 ? void 0 : _groupData$groups$ite2.filter(value => value !== item.substring)) || [];\n\n    // Show the containment relationship more clearly\n    const highlightContainment = (text, substring) => {\n      if (!text.includes(substring)) return text;\n      const start = text.indexOf(substring);\n      const end = start + substring.length;\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [start > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-context\",\n          children: text.substring(0, start)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-match\",\n          children: substring\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), end < text.length && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-context\",\n          children: text.substring(end)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true);\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tree-node ${hasChildren ? 'has-children' : ''}`,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-node-line\",\n        children: [level > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [Array(level).fill().map((_, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tree-vline ${i === level - 1 ? isLast ? 'last' : '' : ''}`\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tree-hline ${isLast ? 'last' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-node-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-node-header\",\n            children: [hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `tree-toggle ${expanded ? 'expanded' : 'collapsed'}`,\n              onClick: toggleExpand,\n              children: expanded ? '−' : '+'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `substring-container ${hasChildren ? 'is-parent' : ''}`,\n              children: [isActualValue ? /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-tag\",\n                children: [item.substring, /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"tag-count\",\n                  children: [\"(\", item.count, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 175,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"unprocessed-tag\",\n                children: [item.substring, /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"tag-count\",\n                  children: [\"(\", item.count, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 180,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 178,\n                columnNumber: 19\n              }, this), hasChildren && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"inclusion-indicator\",\n                children: [\"\\uD3EC\\uD568\\uD558\\uB294 \\uBD80\\uBD84\\uBB38\\uC790\\uC5F4 \", children.length, \"\\uAC1C\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 186,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this), expanded && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-details\",\n            children: [otherValues.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"values-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"values-header\",\n                children: \"\\uD3EC\\uD568\\uD558\\uB294 \\uAC12\\uB4E4:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"tree-values\",\n                children: otherValues.map((value, valueIdx) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"tree-value-item\",\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"value-tag\",\n                    children: highlightContainment(value, item.substring)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 203,\n                    columnNumber: 27\n                  }, this)\n                }, valueIdx, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 202,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 19\n            }, this), expanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"children-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"children-header\",\n                children: \"\\uD3EC\\uD568\\uB41C \\uBD80\\uBD84\\uBB38\\uC790\\uC5F4:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"tree-node-children\",\n                children: children.map((childNode, i) => /*#__PURE__*/_jsxDEV(TreeNode, {\n                  node: childNode,\n                  isLast: i === children.length - 1,\n                  level: level + 1\n                }, childNode.item.substring, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 218,\n                  columnNumber: 25\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 부분문자열로 그룹화된 항목들을 계층적 트리뷰 형태로 표시\n  _s(TreeNode, \"NZEs4N34I2vU569ODzuIjdsqMlo=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uBD80\\uBD84\\uBB38\\uC790\\uC5F4 \\uACC4\\uCE35\\uAD6C\\uC870\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"hierarchy-legend\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-example value-tag\",\n          children: \"\\uD14D\\uC2A4\\uD2B8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-description\",\n          children: \"\\uC2E4\\uC81C \\uB370\\uC774\\uD130\\uAC12\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-example unprocessed-tag\",\n          children: \"\\uD14D\\uC2A4\\uD2B8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-description\",\n          children: \"\\uAC00\\uC0C1 \\uBD80\\uBD84\\uBB38\\uC790\\uC5F4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"legend-description\",\n          children: \"\\uD3EC\\uD568\\uAD00\\uACC4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"clean-tree-view\",\n      children: [groupData.ungrouped && groupData.ungrouped.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ungrouped-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ungrouped-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"group-name\",\n            children: \"\\uADF8\\uB8F9\\uD654\\uB418\\uC9C0 \\uC54A\\uC74C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"group-count\",\n            children: [\"(\", groupData.ungrouped.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"ungrouped-values\",\n          children: groupData.ungrouped.map((value, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"ungrouped-item\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"value-tag\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 19\n            }, this)\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-root\",\n        children: rootNodes.map((rootNode, i) => /*#__PURE__*/_jsxDEV(TreeNode, {\n          node: rootNode,\n          isLast: i === rootNodes.length - 1,\n          level: 0\n        }, rootNode.item.substring, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 238,\n    columnNumber: 5\n  }, this);\n};\n_c = GroupPanel;\nexport default GroupPanel;\nvar _c;\n$RefreshReg$(_c, \"GroupPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupPanel","groupData","_s","$RefreshSig$","substrings","groups","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buildHierarchy","substringMap","Map","forEach","item","_groupData$groups$ite","isActualValue","substring","some","value","set","parent","itemA","nodeA","get","itemB","nodeB","includes","length","moreSpecificParentExists","substringC","nodeC","entries","prevParentChildren","index","indexOf","splice","push","node","values","sort","a","b","count","rootNodes","Array","from","filter","TreeNode","isLast","level","_groupData$groups$ite2","expanded","setExpanded","hasChildren","toggleExpand","otherValues","highlightContainment","text","start","end","fill","map","_","i","onClick","valueIdx","childNode","ungrouped","idx","rootNode","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst GroupPanel = ({ groupData }) => {\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return <div className=\"no-data\">그룹화된 데이터가 없습니다</div>;\n  }\n  \n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n    \n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      // Check if this substring itself appears as a value\n      const isActualValue = groupData.groups[item.substring]?.some(\n        value => value === item.substring\n      );\n      \n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null,\n        isActualValue\n      });\n    });\n    \n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      \n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        \n        const nodeB = substringMap.get(itemB.substring);\n        \n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && \n            itemA.substring.length < itemB.substring.length) {\n          \n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n          \n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && \n                substringC !== itemB.substring && \n                substringC.includes(itemA.substring) && \n                itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n          \n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n            \n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n    \n    // Sort children nodes by frequency (descending) and then by length (descending)\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring length\n          return b.item.substring.length - a.item.substring.length;\n        });\n      }\n    }\n    \n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values())\n      .filter(node => node.parent === null)\n      // Sort root nodes by frequency and length\n      .sort((a, b) => {\n        // First sort by frequency (count)\n        if (b.item.count !== a.item.count) {\n          return b.item.count - a.item.count;\n        }\n        // Then by substring length\n        return b.item.substring.length - a.item.substring.length;\n      });\n    \n    return { rootNodes, substringMap };\n  };\n  \n  const { rootNodes } = buildHierarchy();\n  \n  // TreeNode component for each substring item\n  const TreeNode = ({ node, isLast, level }) => {\n    const [expanded, setExpanded] = useState(true);\n    const { item, children, isActualValue } = node;\n    const hasChildren = children && children.length > 0;\n    \n    // Toggle expansion state\n    const toggleExpand = () => setExpanded(!expanded);\n    \n    // Get group values that are not the substring itself\n    const otherValues = groupData.groups[item.substring]?.filter(\n      value => value !== item.substring\n    ) || [];\n    \n    // Show the containment relationship more clearly\n    const highlightContainment = (text, substring) => {\n      if (!text.includes(substring)) return text;\n      \n      const start = text.indexOf(substring);\n      const end = start + substring.length;\n      \n      return (\n        <>\n          {start > 0 && <span className=\"value-context\">{text.substring(0, start)}</span>}\n          <span className=\"value-match\">{substring}</span>\n          {end < text.length && <span className=\"value-context\">{text.substring(end)}</span>}\n        </>\n      );\n    };\n    \n    return (\n      <div className={`tree-node ${hasChildren ? 'has-children' : ''}`}>\n        {/* Tree connector and expand/collapse control */}\n        <div className=\"tree-node-line\">\n          {level > 0 && (\n            <>\n              {Array(level).fill().map((_, i) => (\n                <span \n                  key={i} \n                  className={`tree-vline ${i === level - 1 ? (isLast ? 'last' : '') : ''}`}\n                />\n              ))}\n              <span className={`tree-hline ${isLast ? 'last' : ''}`} />\n            </>\n          )}\n          \n          {/* Node content */}\n          <div className=\"tree-node-content\">\n            <div className=\"tree-node-header\">\n              {/* Expand/collapse control integrated with header */}\n              {hasChildren && (\n                <button \n                  className={`tree-toggle ${expanded ? 'expanded' : 'collapsed'}`}\n                  onClick={toggleExpand}\n                >\n                  {expanded ? '−' : '+'}\n                </button>\n              )}\n              \n              {/* Show substring as a tag with appropriate styling */}\n              <div className={`substring-container ${hasChildren ? 'is-parent' : ''}`}>\n                {isActualValue ? (\n                  <span className=\"value-tag\">\n                    {item.substring}\n                    <span className=\"tag-count\">({item.count})</span>\n                  </span>\n                ) : (\n                  <span className=\"unprocessed-tag\">\n                    {item.substring}\n                    <span className=\"tag-count\">({item.count})</span>\n                  </span>\n                )}\n                \n                {/* Show inclusion indicator if this is a parent */}\n                {hasChildren && (\n                  <span className=\"inclusion-indicator\">\n                    포함하는 부분문자열 {children.length}개\n                  </span>\n                )}\n              </div>\n            </div>\n            \n            {/* Show values for this substring with clearer match highlighting */}\n            {expanded && (\n              <div className=\"node-details\">\n                {/* Values containing this substring */}\n                {otherValues.length > 0 && (\n                  <div className=\"values-section\">\n                    <div className=\"values-header\">포함하는 값들:</div>\n                    <ul className=\"tree-values\">\n                      {otherValues.map((value, valueIdx) => (\n                        <li key={valueIdx} className=\"tree-value-item\">\n                          <span className=\"value-tag\">\n                            {highlightContainment(value, item.substring)}\n                          </span>\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n                \n                {/* Child nodes */}\n                {expanded && hasChildren && (\n                  <div className=\"children-section\">\n                    <div className=\"children-header\">포함된 부분문자열:</div>\n                    <div className=\"tree-node-children\">\n                      {children.map((childNode, i) => (\n                        <TreeNode \n                          key={childNode.item.substring}\n                          node={childNode}\n                          isLast={i === children.length - 1}\n                          level={level + 1}\n                        />\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  };\n  \n  // 부분문자열로 그룹화된 항목들을 계층적 트리뷰 형태로 표시\n  return (\n    <div className=\"group-panel\">\n      <h3>부분문자열 계층구조</h3>\n      \n      <div className=\"hierarchy-legend\">\n        <div className=\"legend-item\">\n          <span className=\"legend-example value-tag\">텍스트</span>\n          <span className=\"legend-description\">실제 데이터값</span>\n        </div>\n        <div className=\"legend-item\">\n          <span className=\"legend-example unprocessed-tag\">텍스트</span>\n          <span className=\"legend-description\">가상 부분문자열</span>\n        </div>\n        <div className=\"legend-item\">\n          <span className=\"legend-line\"></span>\n          <span className=\"legend-description\">포함관계</span>\n        </div>\n      </div>\n      \n      <div className=\"clean-tree-view\">\n        {/* 그룹화되지 않은 항목 */}\n        {groupData.ungrouped && groupData.ungrouped.length > 0 && (\n          <div className=\"ungrouped-section\">\n            <div className=\"ungrouped-header\">\n              <span className=\"group-name\">그룹화되지 않음</span>\n              <span className=\"group-count\">({groupData.ungrouped.length})</span>\n            </div>\n            <ul className=\"ungrouped-values\">\n              {groupData.ungrouped.map((value, idx) => (\n                <li key={idx} className=\"ungrouped-item\">\n                  <span className=\"value-tag\">{value}</span>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n        \n        {/* 부분문자열로 계층적으로 그룹화된 항목들 */}\n        <div className=\"tree-root\">\n          {rootNodes.map((rootNode, i) => (\n            <TreeNode \n              key={rootNode.item.substring} \n              node={rootNode}\n              isLast={i === rootNodes.length - 1}\n              level={0}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}