{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PipelineStep from './PipelineStep';\nimport DataDisplay from './DataDisplay';\nimport { processBracketSeparation, processDelimiterSeparation, processSubstringSegmentation, flattenData } from './dataProcessors';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeparationClassifier = ({\n  data,\n  onReset\n}) => {\n  _s();\n  var _pipeline$find;\n  const [processedData, setProcessedData] = useState(null);\n  const [segmentationData, setSegmentationData] = useState(null);\n  const [previousStepData, setPreviousStepData] = useState(null); // Store data from previous steps\n  const [groupingData, setGroupingData] = useState(null); // Store grouped data\n\n  const [pipeline, setPipeline] = useState([{\n    id: 'bracket-separation',\n    name: '괄호값 분리',\n    active: true\n  }, {\n    id: 'delimiter-separation',\n    name: '구분자 분리',\n    active: true,\n    config: {\n      delimiters: [{\n        value: ',',\n        enabled: true,\n        order: 1\n      }, {\n        value: ' ',\n        enabled: true,\n        order: 2\n      }]\n    }\n  }, {\n    id: 'substring-segmentation',\n    name: '상호부분문자열 분절',\n    active: true,\n    config: {\n      minSubstringLength: 2,\n      minOccurrence: 2\n    }\n  }, {\n    id: 'grouping',\n    name: '그룹핑',\n    active: true,\n    config: {\n      removeDuplicates: true\n    }\n  }]);\n  const [selectedStep, setSelectedStep] = useState('delimiter-separation');\n\n  // Check if substring segmentation is active\n  const isSubstringSegmentationActive = ((_pipeline$find = pipeline.find(step => step.id === 'substring-segmentation')) === null || _pipeline$find === void 0 ? void 0 : _pipeline$find.active) || false;\n\n  // Process grouping data - removes duplicates from segmentation data\n  const processGrouping = segData => {\n    if (!segData) return null;\n\n    // Create a new object to hold grouped data\n    const grouped = {};\n\n    // Process each key in segmentation data\n    for (const key in segData) {\n      const segments = segData[key];\n      if (Array.isArray(segments)) {\n        // Collect all segments and sub-segments\n        const allSegments = [];\n\n        // Add top-level segments\n        segments.forEach(segment => {\n          if (typeof segment === 'string') {\n            allSegments.push(segment);\n          } else if (segment && segment.value) {\n            allSegments.push(segment.value);\n\n            // Add sub-segments if they exist\n            if (segment.segments && Array.isArray(segment.segments)) {\n              segment.segments.forEach(subSeg => {\n                if (typeof subSeg === 'string') {\n                  allSegments.push(subSeg);\n                } else if (subSeg && subSeg.value) {\n                  allSegments.push(subSeg.value);\n                } else if (subSeg && subSeg.text) {\n                  // Add segments with 'text' property (sub-segments in the segmentation view)\n                  allSegments.push(subSeg.text);\n                }\n              });\n            }\n          }\n        });\n\n        // Remove duplicates\n        const uniqueSegments = [...new Set(allSegments)];\n        grouped[key] = uniqueSegments;\n      } else {\n        grouped[key] = segments;\n      }\n    }\n    return grouped;\n  };\n\n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Clean up duplicated data before processing\n      let cleanedData = {\n        ...data\n      };\n\n      // Check if data is already a processed result with duplicate content\n      const isDuplicated = input => {\n        if (typeof input === 'string') {\n          const halfLength = Math.floor(input.length / 2);\n          for (let i = 1; i <= halfLength; i++) {\n            if (input.substring(0, i) === input.substring(i, i * 2)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n\n      // Clean up data if it's duplicated\n      const cleanData = input => {\n        if (typeof input === 'string' && isDuplicated(input)) {\n          // Try to find a reasonable split point\n          const halfLength = Math.floor(input.length / 2);\n          return input.substring(0, halfLength);\n        } else if (Array.isArray(input)) {\n          return input.map(cleanData);\n        } else if (typeof input === 'object' && input !== null) {\n          const result = {};\n          for (const key in input) {\n            result[key] = cleanData(input[key]);\n          }\n          return result;\n        }\n        return input;\n      };\n\n      // Only clean if it appears to be duplicated\n      if (Object.values(cleanedData).some(val => typeof val === 'string' && isDuplicated(val))) {\n        cleanedData = cleanData(cleanedData);\n      }\n\n      // Process data through pipeline steps\n      let result = {\n        ...cleanedData\n      };\n\n      // Process bracket and delimiter steps\n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n        }\n      });\n\n      // Store data after bracket and delimiter processing\n      setPreviousStepData(result);\n\n      // Process substring segmentation separately if active\n      let segmentResult = null;\n      const segmentationStep = pipeline.find(step => step.id === 'substring-segmentation');\n      if (segmentationStep && segmentationStep.active) {\n        segmentResult = processSubstringSegmentation(result, segmentationStep.config);\n        setSegmentationData(segmentResult);\n      } else {\n        setSegmentationData(null);\n      }\n\n      // Process grouping if active and segmentation data exists\n      const groupingStep = pipeline.find(step => step.id === 'grouping');\n      if (groupingStep && groupingStep.active && segmentResult) {\n        const groupedResult = processGrouping(segmentResult);\n        setGroupingData(groupedResult);\n      } else {\n        setGroupingData(null);\n      }\n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n      setSegmentationData(null);\n      setPreviousStepData(null);\n      setGroupingData(null);\n    }\n  }, [data, pipeline]);\n  const toggleStepActive = stepId => {\n    setPipeline(pipeline.map(step => step.id === stepId ? {\n      ...step,\n      active: !step.active\n    } : step));\n  };\n  const selectStep = stepId => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = delimitersInput => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'delimiter-separation') {\n        // If input is a string, convert to delimiter objects\n        if (typeof delimitersInput === 'string') {\n          const delimiters = delimitersInput.split('').map((char, idx) => ({\n            value: char,\n            enabled: true,\n            order: idx + 1\n          }));\n          return {\n            ...step,\n            config: {\n              ...step.config,\n              delimiters\n            }\n          };\n        }\n\n        // Input is already an array of delimiter objects\n        return {\n          ...step,\n          config: {\n            ...step.config,\n            delimiters: delimitersInput\n          }\n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update substring segmentation configuration\n  const updateSegmentationConfig = configUpdate => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'substring-segmentation') {\n        return {\n          ...step,\n          config: {\n            ...step.config,\n            ...configUpdate\n          }\n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update grouping configuration\n  const updateGroupingConfig = configUpdate => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'grouping') {\n        return {\n          ...step,\n          config: {\n            ...step.config,\n            ...configUpdate\n          }\n        };\n      }\n      return step;\n    }));\n  };\n\n  // Prepare pipeline steps with callbacks\n  const preparedPipeline = pipeline.map(step => {\n    if (step.id === 'delimiter-separation') {\n      return {\n        ...step,\n        onUpdateDelimiters: updateDelimiters\n      };\n    } else if (step.id === 'substring-segmentation') {\n      return {\n        ...step,\n        onUpdateConfig: updateSegmentationConfig\n      };\n    } else if (step.id === 'grouping') {\n      return {\n        ...step,\n        onUpdateConfig: updateGroupingConfig\n      };\n    }\n    return step;\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"separation-classifier\",\n    style: {\n      height: '100%',\n      overflow: 'hidden'\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"classifier-layout\",\n      style: {\n        height: '100%',\n        display: 'flex'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"data-view\",\n        style: {\n          flex: 1,\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130 (\\uD68C\\uC0C9: \\uBBF8\\uCC98\\uB9AC \\uC601\\uC5ED)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"data-content\",\n          style: {\n            flex: 1,\n            overflow: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(DataDisplay, {\n            processedData: processedData,\n            flattenData: flattenData,\n            segmentationData: segmentationData,\n            groupingData: groupingData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pipeline-panel\",\n        style: {\n          width: '300px',\n          overflow: 'hidden',\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uD30C\\uC774\\uD504\\uB77C\\uC778\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-list\",\n          style: {\n            flex: 1,\n            overflow: 'auto'\n          },\n          children: [preparedPipeline.map((step, index) => /*#__PURE__*/_jsxDEV(PipelineStep, {\n            step: step,\n            index: index,\n            isSelected: selectedStep === step.id,\n            onSelect: selectStep,\n            onToggle: toggleStepActive\n          }, step.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 304,\n            columnNumber: 15\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"add-step\",\n            children: \"+ \\uCC98\\uB9AC \\uB2E8\\uACC4 \\uCD94\\uAC00\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pipeline-actions\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: onReset,\n            children: \"\\uCD08\\uAE30\\uD654\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n_s(SeparationClassifier, \"jevS3nuoNYblFiCvKrodqZng5eM=\");\n_c = SeparationClassifier;\nexport default SeparationClassifier;\nvar _c;\n$RefreshReg$(_c, \"SeparationClassifier\");","map":{"version":3,"names":["React","useState","useEffect","PipelineStep","DataDisplay","processBracketSeparation","processDelimiterSeparation","processSubstringSegmentation","flattenData","jsxDEV","_jsxDEV","SeparationClassifier","data","onReset","_s","_pipeline$find","processedData","setProcessedData","segmentationData","setSegmentationData","previousStepData","setPreviousStepData","groupingData","setGroupingData","pipeline","setPipeline","id","name","active","config","delimiters","value","enabled","order","minSubstringLength","minOccurrence","removeDuplicates","selectedStep","setSelectedStep","isSubstringSegmentationActive","find","step","processGrouping","segData","grouped","key","segments","Array","isArray","allSegments","forEach","segment","push","subSeg","text","uniqueSegments","Set","cleanedData","isDuplicated","input","halfLength","Math","floor","length","i","substring","cleanData","map","result","Object","values","some","val","segmentResult","segmentationStep","groupingStep","groupedResult","toggleStepActive","stepId","selectStep","updateDelimiters","delimitersInput","split","char","idx","updateSegmentationConfig","configUpdate","updateGroupingConfig","preparedPipeline","onUpdateDelimiters","onUpdateConfig","className","style","height","overflow","children","display","flex","flexDirection","fileName","_jsxFileName","lineNumber","columnNumber","width","index","isSelected","onSelect","onToggle","onClick","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PipelineStep from './PipelineStep';\nimport DataDisplay from './DataDisplay';\nimport { processBracketSeparation, processDelimiterSeparation, processSubstringSegmentation, flattenData } from './dataProcessors';\nimport './SeparationClassifier.css';\n\nconst SeparationClassifier = ({ data, onReset }) => {\n  const [processedData, setProcessedData] = useState(null);\n  const [segmentationData, setSegmentationData] = useState(null);\n  const [previousStepData, setPreviousStepData] = useState(null); // Store data from previous steps\n  const [groupingData, setGroupingData] = useState(null); // Store grouped data\n\n  const [pipeline, setPipeline] = useState([\n    { id: 'bracket-separation', name: '괄호값 분리', active: true },\n    { \n      id: 'delimiter-separation', \n      name: '구분자 분리', \n      active: true,\n      config: {\n        delimiters: [\n          { value: ',', enabled: true, order: 1 },\n          { value: ' ', enabled: true, order: 2 }\n        ]\n      }\n    },\n    {\n      id: 'substring-segmentation',\n      name: '상호부분문자열 분절',\n      active: true,\n      config: {\n        minSubstringLength: 2,\n        minOccurrence: 2\n      }\n    },\n    {\n      id: 'grouping',\n      name: '그룹핑',\n      active: true,\n      config: {\n        removeDuplicates: true\n      }\n    }\n  ]);\n  const [selectedStep, setSelectedStep] = useState('delimiter-separation');\n  \n  // Check if substring segmentation is active\n  const isSubstringSegmentationActive = pipeline.find(step => step.id === 'substring-segmentation')?.active || false;\n  \n  // Process grouping data - removes duplicates from segmentation data\n  const processGrouping = (segData) => {\n    if (!segData) return null;\n    \n    // Create a new object to hold grouped data\n    const grouped = {};\n    \n    // Process each key in segmentation data\n    for (const key in segData) {\n      const segments = segData[key];\n      if (Array.isArray(segments)) {\n        // Collect all segments and sub-segments\n        const allSegments = [];\n        \n        // Add top-level segments\n        segments.forEach(segment => {\n          if (typeof segment === 'string') {\n            allSegments.push(segment);\n          } else if (segment && segment.value) {\n            allSegments.push(segment.value);\n            \n            // Add sub-segments if they exist\n            if (segment.segments && Array.isArray(segment.segments)) {\n              segment.segments.forEach(subSeg => {\n                if (typeof subSeg === 'string') {\n                  allSegments.push(subSeg);\n                } else if (subSeg && subSeg.value) {\n                  allSegments.push(subSeg.value);\n                } else if (subSeg && subSeg.text) {\n                  // Add segments with 'text' property (sub-segments in the segmentation view)\n                  allSegments.push(subSeg.text);\n                }\n              });\n            }\n          }\n        });\n        \n        // Remove duplicates\n        const uniqueSegments = [...new Set(allSegments)];\n        grouped[key] = uniqueSegments;\n      } else {\n        grouped[key] = segments;\n      }\n    }\n    \n    return grouped;\n  };\n  \n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // Clean up duplicated data before processing\n      let cleanedData = { ...data };\n      \n      // Check if data is already a processed result with duplicate content\n      const isDuplicated = (input) => {\n        if (typeof input === 'string') {\n          const halfLength = Math.floor(input.length / 2);\n          for (let i = 1; i <= halfLength; i++) {\n            if (input.substring(0, i) === input.substring(i, i * 2)) {\n              return true;\n            }\n          }\n        }\n        return false;\n      };\n\n      // Clean up data if it's duplicated\n      const cleanData = (input) => {\n        if (typeof input === 'string' && isDuplicated(input)) {\n          // Try to find a reasonable split point\n          const halfLength = Math.floor(input.length / 2);\n          return input.substring(0, halfLength);\n        } else if (Array.isArray(input)) {\n          return input.map(cleanData);\n        } else if (typeof input === 'object' && input !== null) {\n          const result = {};\n          for (const key in input) {\n            result[key] = cleanData(input[key]);\n          }\n          return result;\n        }\n        return input;\n      };\n      \n      // Only clean if it appears to be duplicated\n      if (Object.values(cleanedData).some(val => \n        typeof val === 'string' && isDuplicated(val)\n      )) {\n        cleanedData = cleanData(cleanedData);\n      }\n      \n      // Process data through pipeline steps\n      let result = { ...cleanedData };\n      \n      // Process bracket and delimiter steps\n      pipeline.forEach(step => {\n        if (step.active) {\n          if (step.id === 'bracket-separation') {\n            result = processBracketSeparation(result);\n          } else if (step.id === 'delimiter-separation') {\n            result = processDelimiterSeparation(result, step.config.delimiters);\n          }\n        }\n      });\n      \n      // Store data after bracket and delimiter processing\n      setPreviousStepData(result);\n      \n      // Process substring segmentation separately if active\n      let segmentResult = null;\n      const segmentationStep = pipeline.find(step => step.id === 'substring-segmentation');\n      if (segmentationStep && segmentationStep.active) {\n        segmentResult = processSubstringSegmentation(result, segmentationStep.config);\n        setSegmentationData(segmentResult);\n      } else {\n        setSegmentationData(null);\n      }\n      \n      // Process grouping if active and segmentation data exists\n      const groupingStep = pipeline.find(step => step.id === 'grouping');\n      if (groupingStep && groupingStep.active && segmentResult) {\n        const groupedResult = processGrouping(segmentResult);\n        setGroupingData(groupedResult);\n      } else {\n        setGroupingData(null);\n      }\n      \n      setProcessedData(result);\n    } else {\n      setProcessedData(null);\n      setSegmentationData(null);\n      setPreviousStepData(null);\n      setGroupingData(null);\n    }\n  }, [data, pipeline]);\n\n  const toggleStepActive = (stepId) => {\n    setPipeline(pipeline.map(step => \n      step.id === stepId ? { ...step, active: !step.active } : step\n    ));\n  };\n\n  const selectStep = (stepId) => {\n    setSelectedStep(stepId);\n  };\n\n  // Update delimiter configuration\n  const updateDelimiters = (delimitersInput) => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'delimiter-separation') {\n        // If input is a string, convert to delimiter objects\n        if (typeof delimitersInput === 'string') {\n          const delimiters = delimitersInput.split('').map((char, idx) => ({\n            value: char,\n            enabled: true,\n            order: idx + 1\n          }));\n          \n          return { \n            ...step, \n            config: { \n              ...step.config, \n              delimiters\n            } \n          };\n        }\n        \n        // Input is already an array of delimiter objects\n        return { \n          ...step, \n          config: { \n            ...step.config, \n            delimiters: delimitersInput\n          } \n        };\n      }\n      return step;\n    }));\n  };\n\n  // Update substring segmentation configuration\n  const updateSegmentationConfig = (configUpdate) => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'substring-segmentation') {\n        return { \n          ...step, \n          config: { \n            ...step.config, \n            ...configUpdate \n          } \n        };\n      }\n      return step;\n    }));\n  };\n  \n  // Update grouping configuration\n  const updateGroupingConfig = (configUpdate) => {\n    setPipeline(pipeline.map(step => {\n      if (step.id === 'grouping') {\n        return { \n          ...step, \n          config: { \n            ...step.config, \n            ...configUpdate \n          } \n        };\n      }\n      return step;\n    }));\n  };\n\n  // Prepare pipeline steps with callbacks\n  const preparedPipeline = pipeline.map(step => {\n    if (step.id === 'delimiter-separation') {\n      return {\n        ...step,\n        onUpdateDelimiters: updateDelimiters\n      };\n    } else if (step.id === 'substring-segmentation') {\n      return {\n        ...step,\n        onUpdateConfig: updateSegmentationConfig\n      };\n    } else if (step.id === 'grouping') {\n      return {\n        ...step,\n        onUpdateConfig: updateGroupingConfig\n      };\n    }\n    return step;\n  });\n\n  return (\n    <div className=\"separation-classifier\" style={{ height: '100%', overflow: 'hidden' }}>\n      <div className=\"classifier-layout\" style={{ height: '100%', display: 'flex' }}>\n        {/* Data View */}\n        <div className=\"data-view\" style={{ flex: 1, overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n          <h3>처리된 데이터 (회색: 미처리 영역)</h3>\n          <div className=\"data-content\" style={{ flex: 1, overflow: 'auto' }}>\n            <DataDisplay \n              processedData={processedData} \n              flattenData={flattenData}\n              segmentationData={segmentationData}\n              groupingData={groupingData}\n            />\n          </div>\n        </div>\n\n        {/* Right side - Pipeline */}\n        <div className=\"pipeline-panel\" style={{ width: '300px', overflow: 'hidden', display: 'flex', flexDirection: 'column' }}>\n          <h3>파이프라인</h3>\n          <div className=\"pipeline-list\" style={{ flex: 1, overflow: 'auto' }}>\n            {preparedPipeline.map((step, index) => (\n              <PipelineStep \n                key={step.id}\n                step={step}\n                index={index}\n                isSelected={selectedStep === step.id}\n                onSelect={selectStep}\n                onToggle={toggleStepActive}\n              />\n            ))}\n            \n            <button className=\"add-step\">\n              + 처리 단계 추가\n            </button>\n          </div>\n          \n          <div className=\"pipeline-actions\">\n            <button className=\"reset-button\" onClick={onReset}>\n              초기화\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SeparationClassifier; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}