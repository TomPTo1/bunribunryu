{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\nimport * as d3 from 'd3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationList = ({\n  channel,\n  selectedHeader,\n  onCombinationSelect,\n  selectedCombination\n}) => {\n  _s();\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningTree, setMiningTree] = useState(null);\n  const [layoutType, setLayoutType] = useState('vertical'); // 'vertical' or 'radial'\n  const treeContainer = useRef(null);\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate FP Growth mining tree data for test mode\n          generateFPGrowthTree(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate FP Growth mining tree data from actual response\n          generateFPGrowthTree(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningTree(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningTree(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Effect to render the D3 tree whenever miningTree data, active tab, or layout changes\n  useEffect(() => {\n    if (activeTab === 'mining' && miningTree && treeContainer.current) {\n      renderD3Tree();\n    }\n  }, [miningTree, activeTab, layoutType]);\n\n  // Function to render the D3 tree visualization\n  const renderD3Tree = () => {\n    if (!treeContainer.current || !miningTree) return;\n\n    // Clear any existing SVG\n    d3.select(treeContainer.current).selectAll(\"*\").remove();\n    const containerWidth = treeContainer.current.clientWidth || 400;\n    const containerHeight = 500;\n\n    // Create the SVG container\n    const svg = d3.select(treeContainer.current).append(\"svg\").attr(\"width\", \"100%\").attr(\"height\", containerHeight).attr(\"viewBox\", `0 0 ${containerWidth} ${containerHeight}`).attr(\"preserveAspectRatio\", \"xMidYMid meet\").append(\"g\");\n\n    // Create the root node using d3.hierarchy\n    const root = d3.hierarchy(miningTree);\n    if (layoutType === 'vertical') {\n      // VERTICAL LAYOUT\n      const margin = {\n        top: 40,\n        right: 30,\n        bottom: 50,\n        left: 30\n      };\n      const innerWidth = containerWidth - margin.left - margin.right;\n      const innerHeight = containerHeight - margin.top - margin.bottom;\n      svg.attr(\"transform\", `translate(${margin.left},${margin.top})`);\n\n      // Create a vertical-oriented tree layout\n      const treeLayout = d3.tree().size([innerWidth, innerHeight]).nodeSize([50, 70]); // Adjust node sizing for better spacing\n\n      const treeData = treeLayout(root);\n\n      // Add links between nodes\n      svg.selectAll(\".link\").data(treeData.links()).enter().append(\"path\").attr(\"class\", \"link\").attr(\"d\", d3.linkVertical().x(d => d.x).y(d => d.y)).style(\"fill\", \"none\").style(\"stroke\", \"#ccc\").style(\"stroke-width\", 1.5);\n\n      // Create node groups\n      const node = svg.selectAll(\".node\").data(treeData.descendants()).enter().append(\"g\").attr(\"class\", d => `node ${d.children ? \"node--internal\" : \"node--leaf\"}`).attr(\"transform\", d => `translate(${d.x},${d.y})`);\n\n      // Add circles for each node\n      node.append(\"circle\").attr(\"r\", d => {\n        // Size based on count\n        const minSize = 4;\n        const maxSize = 15;\n        return d.data.count ? minSize + Math.min(d.data.count / 10, maxSize) : minSize;\n      }).style(\"fill\", d => {\n        // Color based on depth\n        const colors = [\"#4682b4\", \"#7b68ee\", \"#3cb371\", \"#ff7f50\", \"#da70d6\"];\n        return colors[d.depth % colors.length];\n      }).style(\"stroke\", \"#fff\").style(\"stroke-width\", 1.5);\n\n      // Add text labels\n      node.append(\"text\").attr(\"dy\", d => d.children ? -10 : 15).attr(\"x\", 0).attr(\"text-anchor\", \"middle\").text(d => d.data.name).style(\"font-size\", \"10px\").style(\"fill\", \"#333\");\n\n      // Add count labels\n      node.append(\"text\").attr(\"dy\", d => d.children ? -25 : 30).attr(\"x\", 0).attr(\"text-anchor\", \"middle\").text(d => d.data.count ? `(${d.data.count})` : \"\").style(\"font-size\", \"9px\").style(\"fill\", \"#666\");\n\n      // Add title for the tree visualization\n      svg.append(\"text\").attr(\"x\", innerWidth / 2).attr(\"y\", -20).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\").style(\"font-weight\", \"bold\").text(\"FP Growth Mining Tree\");\n    } else {\n      // RADIAL LAYOUT\n      const radius = Math.min(containerWidth, containerHeight) / 2 - 80;\n\n      // Center the visualization\n      svg.attr(\"transform\", `translate(${containerWidth / 2},${containerHeight / 2})`);\n\n      // Create a radial tree layout\n      const treeLayout = d3.tree().size([2 * Math.PI, radius]).separation((a, b) => (a.parent === b.parent ? 1 : 2) / a.depth);\n      const treeData = treeLayout(root);\n\n      // Add links between nodes\n      svg.selectAll(\".link\").data(treeData.links()).enter().append(\"path\").attr(\"class\", \"link\").attr(\"d\", d3.linkRadial().angle(d => d.x).radius(d => d.y)).style(\"fill\", \"none\").style(\"stroke\", \"#ccc\").style(\"stroke-width\", 1.5);\n\n      // Create node groups\n      const node = svg.selectAll(\".node\").data(treeData.descendants()).enter().append(\"g\").attr(\"class\", d => `node ${d.children ? \"node--internal\" : \"node--leaf\"}`).attr(\"transform\", d => `translate(${radialPoint(d.x, d.y)})`);\n\n      // Add circles for each node\n      node.append(\"circle\").attr(\"r\", d => {\n        // Size based on count\n        const minSize = 4;\n        const maxSize = 15;\n        return d.data.count ? minSize + Math.min(d.data.count / 10, maxSize) : minSize;\n      }).style(\"fill\", d => {\n        // Color based on depth\n        const colors = [\"#4682b4\", \"#7b68ee\", \"#3cb371\", \"#ff7f50\", \"#da70d6\"];\n        return colors[d.depth % colors.length];\n      }).style(\"stroke\", \"#fff\").style(\"stroke-width\", 1.5);\n\n      // Add text labels with rotation\n      node.append(\"text\").attr(\"dy\", \"0.31em\").attr(\"x\", d => d.x < Math.PI ? 10 : -10).attr(\"text-anchor\", d => d.x < Math.PI ? \"start\" : \"end\").attr(\"transform\", d => d.x >= Math.PI ? \"rotate(180)\" : null).text(d => d.data.name).style(\"font-size\", \"9px\").style(\"fill\", \"#333\");\n\n      // Add count labels\n      node.append(\"text\").attr(\"dy\", \"1.2em\").attr(\"x\", d => d.x < Math.PI ? 10 : -10).attr(\"text-anchor\", d => d.x < Math.PI ? \"start\" : \"end\").attr(\"transform\", d => d.x >= Math.PI ? \"rotate(180)\" : null).text(d => d.data.count ? `(${d.data.count})` : \"\").style(\"font-size\", \"8px\").style(\"fill\", \"#666\");\n\n      // Add title for the tree visualization\n      svg.append(\"text\").attr(\"y\", -radius - 20).attr(\"text-anchor\", \"middle\").style(\"font-size\", \"14px\").style(\"font-weight\", \"bold\").text(\"FP Growth Mining Tree\");\n    }\n  };\n\n  // Helper function for radial coordinates\n  const radialPoint = (x, y) => [y * Math.cos(x), y * Math.sin(x)];\n\n  // Function to generate a more complete FP Growth tree\n  const generateFPGrowthTree = combinationData => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningTree(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Step 3: Sort by frequency (descending) and filter low frequency items\n    const minSupport = Math.max(2, Math.floor(transactions.length * 0.1)); // At least 10% support\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupport).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Step 4: Reorder transactions based on frequency\n    const orderedTransactions = transactions.map(transaction => {\n      return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n    }).filter(transaction => transaction.length > 0);\n\n    // Step 5: Build the FP Tree\n    const root = {\n      name: \"Root\",\n      children: [],\n      count: transactions.length,\n      itemCounts: {}\n    };\n\n    // Helper function to insert a transaction into the tree\n    const insertPath = (node, path, index = 0) => {\n      if (index >= path.length) return;\n      const item = path[index];\n      let child = node.children.find(c => c.name === item);\n      if (!child) {\n        child = {\n          name: item,\n          count: 1,\n          children: []\n        };\n        node.children.push(child);\n      } else {\n        child.count++;\n      }\n      insertPath(child, path, index + 1);\n    };\n\n    // Insert all transactions into the tree\n    orderedTransactions.forEach(transaction => {\n      insertPath(root, transaction);\n    });\n\n    // Step 6: Prune the tree to avoid overwhelming visualization\n    const pruneTree = (node, maxDepth = 4, currentDepth = 0) => {\n      if (currentDepth >= maxDepth) {\n        node.children = [];\n        return;\n      }\n\n      // Sort children by count\n      node.children.sort((a, b) => b.count - a.count);\n\n      // Limit number of children per node for visualization clarity\n      if (node.children.length > 5) {\n        node.children = node.children.slice(0, 5);\n      }\n\n      // Recursively prune children\n      node.children.forEach(child => pruneTree(child, maxDepth, currentDepth + 1));\n    };\n    pruneTree(root);\n    setMiningTree(root);\n  };\n  const handleCombinationClick = combination => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = headerGroup => {\n    if (!headerGroup) return null;\n    const headers = headerGroup.split('|');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-tags\",\n      children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"similarity-tag\",\n        children: header\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n\n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n\n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningTree(null);\n    }\n  };\n\n  // Toggle between vertical and radial layout\n  const toggleLayout = () => {\n    setLayoutType(layoutType === 'vertical' ? 'radial' : 'vertical');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-title\",\n        children: !testMode && selectedHeader ? `헤더명 조합 목록: ${selectedHeader}` : '헤더명 조합 목록'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-mode-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Test Mode \", testMode ? 'ON' : 'OFF']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: testMode,\n            onChange: toggleTestMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'combination' ? 'active' : ''}`,\n        onClick: () => setActiveTab('combination'),\n        children: \"\\uC870\\uD569\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'mining' ? 'active' : ''}`,\n        onClick: () => setActiveTab('mining'),\n        children: \"\\uB9C8\\uC774\\uB2DD\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this), activeTab === 'combination' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 13\n      }, this) : combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-content\",\n        children: combinationHeaders.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column-item ${selectedCombination === item.header_group ? 'selected' : ''}`,\n          onClick: () => handleCombinationClick(item.header_group),\n          children: renderHeaderGroupAsTags(item.header_group)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"테스트 모드가 활성화되었습니다.\" : \"채널과 헤더를 선택해주세요.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 417,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 13\n      }, this) : miningTree ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-view\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-view-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"layout-toggle\",\n            onClick: toggleLayout,\n            children: layoutType === 'vertical' ? '방사형 보기' : '수직형 보기'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-tree-container\",\n          ref: treeContainer,\n          style: {\n            width: '100%',\n            height: '500px',\n            overflow: 'hidden'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-explanation\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uC774 \\uD2B8\\uB9AC\\uB294 FP Growth \\uC54C\\uACE0\\uB9AC\\uC998 \\uAE30\\uBC18\\uC73C\\uB85C \\uD5E4\\uB354 \\uC870\\uD569 \\uD328\\uD134\\uC744 \\uC2DC\\uAC01\\uD654\\uD55C \\uAC83\\uC785\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uC6D0\\uC758 \\uD06C\\uAE30\\uB294 \\uD574\\uB2F9 \\uD5E4\\uB354\\uC758 \\uBE48\\uB3C4\\uB97C \\uB098\\uD0C0\\uB0C5\\uB2C8\\uB2E4.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uC0C9\\uC0C1\\uC740 \\uD2B8\\uB9AC\\uC758 \\uAE4A\\uC774\\uB97C \\uAD6C\\uBD84\\uD569\\uB2C8\\uB2E4.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"\\uACBD\\uB85C\\uB294 \\uC790\\uC8FC \\uD568\\uAED8 \\uB098\\uD0C0\\uB098\\uB294 \\uD5E4\\uB354 \\uD328\\uD134\\uC744 \\uBCF4\\uC5EC\\uC90D\\uB2C8\\uB2E4.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 FP Growth 마이닝 트리가 표시됩니다.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationList, \"+cOYVbzenn2ovH7TR2MxQ15a4Dk=\");\n_c = HeaderCombinationList;\nexport default HeaderCombinationList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchHeaderCombinationList","d3","jsxDEV","_jsxDEV","HeaderCombinationList","channel","selectedHeader","onCombinationSelect","selectedCombination","_s","combinationHeaders","setCombinationHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","testMode","setTestMode","miningTree","setMiningTree","layoutType","setLayoutType","treeContainer","getCombinationHeaders","response","console","log","list","generateFPGrowthTree","headers","Array","isArray","err","message","current","renderD3Tree","select","selectAll","remove","containerWidth","clientWidth","containerHeight","svg","append","attr","root","hierarchy","margin","top","right","bottom","left","innerWidth","innerHeight","treeLayout","tree","size","nodeSize","treeData","data","links","enter","linkVertical","x","d","y","style","node","descendants","children","minSize","maxSize","count","Math","min","colors","depth","length","text","name","radius","PI","separation","a","b","parent","linkRadial","angle","radialPoint","cos","sin","combinationData","transactions","filter","item","header_group","map","split","itemCounts","forEach","transaction","minSupport","max","floor","frequentItems","Object","keys","sort","orderedTransactions","includes","insertPath","path","index","child","find","c","push","pruneTree","maxDepth","currentDepth","slice","handleCombinationClick","combination","renderHeaderGroupAsTags","headerGroup","className","header","fileName","_jsxFileName","lineNumber","columnNumber","toggleTestMode","newTestMode","toggleLayout","type","checked","onChange","onClick","ref","width","height","overflow","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\nimport * as d3 from 'd3';\n\nconst HeaderCombinationList = ({ channel, selectedHeader, onCombinationSelect, selectedCombination }) => {\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningTree, setMiningTree] = useState(null);\n  const [layoutType, setLayoutType] = useState('vertical'); // 'vertical' or 'radial'\n  const treeContainer = useRef(null);\n\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      \n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate FP Growth mining tree data for test mode\n          generateFPGrowthTree(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate FP Growth mining tree data from actual response\n          generateFPGrowthTree(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningTree(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningTree(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Effect to render the D3 tree whenever miningTree data, active tab, or layout changes\n  useEffect(() => {\n    if (activeTab === 'mining' && miningTree && treeContainer.current) {\n      renderD3Tree();\n    }\n  }, [miningTree, activeTab, layoutType]);\n\n  // Function to render the D3 tree visualization\n  const renderD3Tree = () => {\n    if (!treeContainer.current || !miningTree) return;\n\n    // Clear any existing SVG\n    d3.select(treeContainer.current).selectAll(\"*\").remove();\n\n    const containerWidth = treeContainer.current.clientWidth || 400;\n    const containerHeight = 500;\n    \n    // Create the SVG container\n    const svg = d3.select(treeContainer.current)\n      .append(\"svg\")\n      .attr(\"width\", \"100%\")\n      .attr(\"height\", containerHeight)\n      .attr(\"viewBox\", `0 0 ${containerWidth} ${containerHeight}`)\n      .attr(\"preserveAspectRatio\", \"xMidYMid meet\")\n      .append(\"g\");\n\n    // Create the root node using d3.hierarchy\n    const root = d3.hierarchy(miningTree);\n    \n    if (layoutType === 'vertical') {\n      // VERTICAL LAYOUT\n      const margin = { top: 40, right: 30, bottom: 50, left: 30 };\n      const innerWidth = containerWidth - margin.left - margin.right;\n      const innerHeight = containerHeight - margin.top - margin.bottom;\n      \n      svg.attr(\"transform\", `translate(${margin.left},${margin.top})`);\n      \n      // Create a vertical-oriented tree layout\n      const treeLayout = d3.tree()\n        .size([innerWidth, innerHeight])\n        .nodeSize([50, 70]); // Adjust node sizing for better spacing\n      \n      const treeData = treeLayout(root);\n      \n      // Add links between nodes\n      svg.selectAll(\".link\")\n        .data(treeData.links())\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", d3.linkVertical()\n          .x(d => d.x)\n          .y(d => d.y))\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", \"#ccc\")\n        .style(\"stroke-width\", 1.5);\n      \n      // Create node groups\n      const node = svg.selectAll(\".node\")\n        .data(treeData.descendants())\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", d => `node ${d.children ? \"node--internal\" : \"node--leaf\"}`)\n        .attr(\"transform\", d => `translate(${d.x},${d.y})`);\n      \n      // Add circles for each node\n      node.append(\"circle\")\n        .attr(\"r\", d => {\n          // Size based on count\n          const minSize = 4;\n          const maxSize = 15;\n          return d.data.count ? minSize + Math.min((d.data.count / 10), maxSize) : minSize;\n        })\n        .style(\"fill\", d => {\n          // Color based on depth\n          const colors = [\"#4682b4\", \"#7b68ee\", \"#3cb371\", \"#ff7f50\", \"#da70d6\"];\n          return colors[d.depth % colors.length];\n        })\n        .style(\"stroke\", \"#fff\")\n        .style(\"stroke-width\", 1.5);\n      \n      // Add text labels\n      node.append(\"text\")\n        .attr(\"dy\", d => d.children ? -10 : 15)\n        .attr(\"x\", 0)\n        .attr(\"text-anchor\", \"middle\")\n        .text(d => d.data.name)\n        .style(\"font-size\", \"10px\")\n        .style(\"fill\", \"#333\");\n      \n      // Add count labels\n      node.append(\"text\")\n        .attr(\"dy\", d => d.children ? -25 : 30)\n        .attr(\"x\", 0)\n        .attr(\"text-anchor\", \"middle\")\n        .text(d => d.data.count ? `(${d.data.count})` : \"\")\n        .style(\"font-size\", \"9px\")\n        .style(\"fill\", \"#666\");\n      \n      // Add title for the tree visualization\n      svg.append(\"text\")\n        .attr(\"x\", innerWidth / 2)\n        .attr(\"y\", -20)\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"14px\")\n        .style(\"font-weight\", \"bold\")\n        .text(\"FP Growth Mining Tree\");\n      \n    } else {\n      // RADIAL LAYOUT\n      const radius = Math.min(containerWidth, containerHeight) / 2 - 80;\n      \n      // Center the visualization\n      svg.attr(\"transform\", `translate(${containerWidth / 2},${containerHeight / 2})`);\n      \n      // Create a radial tree layout\n      const treeLayout = d3.tree()\n        .size([2 * Math.PI, radius])\n        .separation((a, b) => (a.parent === b.parent ? 1 : 2) / a.depth);\n      \n      const treeData = treeLayout(root);\n      \n      // Add links between nodes\n      svg.selectAll(\".link\")\n        .data(treeData.links())\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"link\")\n        .attr(\"d\", d3.linkRadial()\n          .angle(d => d.x)\n          .radius(d => d.y))\n        .style(\"fill\", \"none\")\n        .style(\"stroke\", \"#ccc\")\n        .style(\"stroke-width\", 1.5);\n      \n      // Create node groups\n      const node = svg.selectAll(\".node\")\n        .data(treeData.descendants())\n        .enter()\n        .append(\"g\")\n        .attr(\"class\", d => `node ${d.children ? \"node--internal\" : \"node--leaf\"}`)\n        .attr(\"transform\", d => `translate(${radialPoint(d.x, d.y)})`);\n      \n      // Add circles for each node\n      node.append(\"circle\")\n        .attr(\"r\", d => {\n          // Size based on count\n          const minSize = 4;\n          const maxSize = 15;\n          return d.data.count ? minSize + Math.min((d.data.count / 10), maxSize) : minSize;\n        })\n        .style(\"fill\", d => {\n          // Color based on depth\n          const colors = [\"#4682b4\", \"#7b68ee\", \"#3cb371\", \"#ff7f50\", \"#da70d6\"];\n          return colors[d.depth % colors.length];\n        })\n        .style(\"stroke\", \"#fff\")\n        .style(\"stroke-width\", 1.5);\n      \n      // Add text labels with rotation\n      node.append(\"text\")\n        .attr(\"dy\", \"0.31em\")\n        .attr(\"x\", d => d.x < Math.PI ? 10 : -10)\n        .attr(\"text-anchor\", d => d.x < Math.PI ? \"start\" : \"end\")\n        .attr(\"transform\", d => d.x >= Math.PI ? \"rotate(180)\" : null)\n        .text(d => d.data.name)\n        .style(\"font-size\", \"9px\")\n        .style(\"fill\", \"#333\");\n      \n      // Add count labels\n      node.append(\"text\")\n        .attr(\"dy\", \"1.2em\")\n        .attr(\"x\", d => d.x < Math.PI ? 10 : -10)\n        .attr(\"text-anchor\", d => d.x < Math.PI ? \"start\" : \"end\")\n        .attr(\"transform\", d => d.x >= Math.PI ? \"rotate(180)\" : null)\n        .text(d => d.data.count ? `(${d.data.count})` : \"\")\n        .style(\"font-size\", \"8px\")\n        .style(\"fill\", \"#666\");\n      \n      // Add title for the tree visualization\n      svg.append(\"text\")\n        .attr(\"y\", -radius - 20)\n        .attr(\"text-anchor\", \"middle\")\n        .style(\"font-size\", \"14px\")\n        .style(\"font-weight\", \"bold\")\n        .text(\"FP Growth Mining Tree\");\n    }\n  };\n  \n  // Helper function for radial coordinates\n  const radialPoint = (x, y) => [y * Math.cos(x), y * Math.sin(x)];\n\n  // Function to generate a more complete FP Growth tree\n  const generateFPGrowthTree = (combinationData) => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningTree(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Step 3: Sort by frequency (descending) and filter low frequency items\n    const minSupport = Math.max(2, Math.floor(transactions.length * 0.1)); // At least 10% support\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupport)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Step 4: Reorder transactions based on frequency\n    const orderedTransactions = transactions.map(transaction => {\n      return transaction\n        .filter(item => frequentItems.includes(item))\n        .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    }).filter(transaction => transaction.length > 0);\n\n    // Step 5: Build the FP Tree\n    const root = { \n      name: \"Root\", \n      children: [], \n      count: transactions.length,\n      itemCounts: {}\n    };\n\n    // Helper function to insert a transaction into the tree\n    const insertPath = (node, path, index = 0) => {\n      if (index >= path.length) return;\n      \n      const item = path[index];\n      let child = node.children.find(c => c.name === item);\n      \n      if (!child) {\n        child = { \n          name: item, \n          count: 1,\n          children: [] \n        };\n        node.children.push(child);\n      } else {\n        child.count++;\n      }\n      \n      insertPath(child, path, index + 1);\n    };\n\n    // Insert all transactions into the tree\n    orderedTransactions.forEach(transaction => {\n      insertPath(root, transaction);\n    });\n\n    // Step 6: Prune the tree to avoid overwhelming visualization\n    const pruneTree = (node, maxDepth = 4, currentDepth = 0) => {\n      if (currentDepth >= maxDepth) {\n        node.children = [];\n        return;\n      }\n      \n      // Sort children by count\n      node.children.sort((a, b) => b.count - a.count);\n      \n      // Limit number of children per node for visualization clarity\n      if (node.children.length > 5) {\n        node.children = node.children.slice(0, 5);\n      }\n      \n      // Recursively prune children\n      node.children.forEach(child => pruneTree(child, maxDepth, currentDepth + 1));\n    };\n    \n    pruneTree(root);\n    \n    setMiningTree(root);\n  };\n\n  const handleCombinationClick = (combination) => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = (headerGroup) => {\n    if (!headerGroup) return null;\n    \n    const headers = headerGroup.split('|');\n    return (\n      <div className=\"header-tags\">\n        {headers.map((header, index) => (\n          <span key={index} className=\"similarity-tag\">{header}</span>\n        ))}\n      </div>\n    );\n  };\n\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n    \n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n    \n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningTree(null);\n    }\n  };\n\n  // Toggle between vertical and radial layout\n  const toggleLayout = () => {\n    setLayoutType(layoutType === 'vertical' ? 'radial' : 'vertical');\n  };\n\n  return (\n    <div className=\"column-container\">\n      <div className=\"column-title-container\">\n        <h2 className=\"column-title\">\n          {!testMode && selectedHeader \n            ? `헤더명 조합 목록: ${selectedHeader}` \n            : '헤더명 조합 목록'}\n        </h2>\n        <div className=\"test-mode-toggle\">\n          <label className=\"toggle-label\">\n            <span>Test Mode {testMode ? 'ON' : 'OFF'}</span>\n            <input \n              type=\"checkbox\" \n              checked={testMode}\n              onChange={toggleTestMode}\n            />\n            <span className=\"toggle-slider\"></span>\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'combination' ? 'active' : ''}`}\n          onClick={() => setActiveTab('combination')}\n        >\n          조합뷰\n        </button>\n        <button \n          className={`tab ${activeTab === 'mining' ? 'active' : ''}`}\n          onClick={() => setActiveTab('mining')}\n        >\n          마이닝뷰\n        </button>\n      </div>\n      \n      {activeTab === 'combination' ? (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationHeaders.length > 0 ? (\n            <div className=\"column-content\">\n              {combinationHeaders.map((item, index) => (\n                <div\n                  key={index}\n                  className={`column-item ${selectedCombination === item.header_group ? 'selected' : ''}`}\n                  onClick={() => handleCombinationClick(item.header_group)}\n                >\n                  {renderHeaderGroupAsTags(item.header_group)}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"테스트 모드가 활성화되었습니다.\" \n                : \"채널과 헤더를 선택해주세요.\"}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : miningTree ? (\n            <div className=\"mining-view\">\n              <div className=\"mining-view-controls\">\n                <button \n                  className=\"layout-toggle\" \n                  onClick={toggleLayout}\n                >\n                  {layoutType === 'vertical' ? '방사형 보기' : '수직형 보기'}\n                </button>\n              </div>\n              <div \n                className=\"mining-tree-container\" \n                ref={treeContainer}\n                style={{ width: '100%', height: '500px', overflow: 'hidden' }}\n              >\n                {/* D3 tree will be rendered here */}\n              </div>\n              <div className=\"mining-explanation\">\n                <p>이 트리는 FP Growth 알고리즘 기반으로 헤더 조합 패턴을 시각화한 것입니다.</p>\n                <ul>\n                  <li>원의 크기는 해당 헤더의 빈도를 나타냅니다.</li>\n                  <li>색상은 트리의 깊이를 구분합니다.</li>\n                  <li>경로는 자주 함께 나타나는 헤더 패턴을 보여줍니다.</li>\n                </ul>\n              </div>\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"마이닝 데이터를 로딩 중입니다...\" \n                : \"채널과 헤더를 선택하면 FP Growth 마이닝 트리가 표시됩니다.\"}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HeaderCombinationList; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,0BAA0B,QAAQ,iBAAiB;AAC5D,OAAO,cAAc;AACrB,OAAO,KAAKC,EAAE,MAAM,IAAI;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzB,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,cAAc;EAAEC,mBAAmB;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EACvG,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACmB,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACqB,QAAQ,EAAEC,WAAW,CAAC,GAAGtB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACuB,UAAU,EAAEC,aAAa,CAAC,GAAGxB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACyB,UAAU,EAAEC,aAAa,CAAC,GAAG1B,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC;EAC1D,MAAM2B,aAAa,GAAGzB,MAAM,CAAC,IAAI,CAAC;EAElCD,SAAS,CAAC,MAAM;IACd,MAAM2B,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC;MACA,IAAI,CAACP,QAAQ,KAAK,CAACb,OAAO,IAAI,CAACC,cAAc,CAAC,EAAE;MAEhDO,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAIK,QAAQ,EAAE;UACZ;UACA,MAAMQ,QAAQ,GAAG,MAAM,MAAM,CAAC,wCAAwC,CAAC;UACvEC,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEF,QAAQ,CAAC;UACnEf,qBAAqB,CAACe,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;;UAE1C;UACAC,oBAAoB,CAACJ,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;QAC3C,CAAC,MAAM,IAAIxB,OAAO,IAAIC,cAAc,EAAE;UACpC;UACA,MAAMyB,OAAO,GAAGC,KAAK,CAACC,OAAO,CAAC3B,cAAc,CAAC,GAAGA,cAAc,GAAG,CAACA,cAAc,CAAC;UACjF,MAAMoB,QAAQ,GAAG,MAAM1B,0BAA0B,CAACK,OAAO,EAAE0B,OAAO,CAAC;UACnEJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;UACtDf,qBAAqB,CAACe,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;;UAE1C;UACAC,oBAAoB,CAACJ,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;QAC3C,CAAC,MAAM;UACL;UACAlB,qBAAqB,CAAC,EAAE,CAAC;UACzBU,aAAa,CAAC,IAAI,CAAC;QACrB;QACAN,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOmB,GAAG,EAAE;QACZnB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CAAC;QACrBxB,qBAAqB,CAAC,EAAE,CAAC;QACzBU,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDY,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACpB,OAAO,EAAEC,cAAc,EAAEY,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzC;EACApB,SAAS,CAAC,MAAM;IACd,IAAIkB,SAAS,KAAK,QAAQ,IAAII,UAAU,IAAII,aAAa,CAACY,OAAO,EAAE;MACjEC,YAAY,CAAC,CAAC;IAChB;EACF,CAAC,EAAE,CAACjB,UAAU,EAAEJ,SAAS,EAAEM,UAAU,CAAC,CAAC;;EAEvC;EACA,MAAMe,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAI,CAACb,aAAa,CAACY,OAAO,IAAI,CAAChB,UAAU,EAAE;;IAE3C;IACAnB,EAAE,CAACqC,MAAM,CAACd,aAAa,CAACY,OAAO,CAAC,CAACG,SAAS,CAAC,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC;IAExD,MAAMC,cAAc,GAAGjB,aAAa,CAACY,OAAO,CAACM,WAAW,IAAI,GAAG;IAC/D,MAAMC,eAAe,GAAG,GAAG;;IAE3B;IACA,MAAMC,GAAG,GAAG3C,EAAE,CAACqC,MAAM,CAACd,aAAa,CAACY,OAAO,CAAC,CACzCS,MAAM,CAAC,KAAK,CAAC,CACbC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,QAAQ,EAAEH,eAAe,CAAC,CAC/BG,IAAI,CAAC,SAAS,EAAE,OAAOL,cAAc,IAAIE,eAAe,EAAE,CAAC,CAC3DG,IAAI,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAC5CD,MAAM,CAAC,GAAG,CAAC;;IAEd;IACA,MAAME,IAAI,GAAG9C,EAAE,CAAC+C,SAAS,CAAC5B,UAAU,CAAC;IAErC,IAAIE,UAAU,KAAK,UAAU,EAAE;MAC7B;MACA,MAAM2B,MAAM,GAAG;QAAEC,GAAG,EAAE,EAAE;QAAEC,KAAK,EAAE,EAAE;QAAEC,MAAM,EAAE,EAAE;QAAEC,IAAI,EAAE;MAAG,CAAC;MAC3D,MAAMC,UAAU,GAAGb,cAAc,GAAGQ,MAAM,CAACI,IAAI,GAAGJ,MAAM,CAACE,KAAK;MAC9D,MAAMI,WAAW,GAAGZ,eAAe,GAAGM,MAAM,CAACC,GAAG,GAAGD,MAAM,CAACG,MAAM;MAEhER,GAAG,CAACE,IAAI,CAAC,WAAW,EAAE,aAAaG,MAAM,CAACI,IAAI,IAAIJ,MAAM,CAACC,GAAG,GAAG,CAAC;;MAEhE;MACA,MAAMM,UAAU,GAAGvD,EAAE,CAACwD,IAAI,CAAC,CAAC,CACzBC,IAAI,CAAC,CAACJ,UAAU,EAAEC,WAAW,CAAC,CAAC,CAC/BI,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;;MAEvB,MAAMC,QAAQ,GAAGJ,UAAU,CAACT,IAAI,CAAC;;MAEjC;MACAH,GAAG,CAACL,SAAS,CAAC,OAAO,CAAC,CACnBsB,IAAI,CAACD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,CACtBC,KAAK,CAAC,CAAC,CACPlB,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,GAAG,EAAE7C,EAAE,CAAC+D,YAAY,CAAC,CAAC,CACzBC,CAAC,CAACC,CAAC,IAAIA,CAAC,CAACD,CAAC,CAAC,CACXE,CAAC,CAACD,CAAC,IAAIA,CAAC,CAACC,CAAC,CAAC,CAAC,CACdC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CACrBA,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CACvBA,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC;;MAE7B;MACA,MAAMC,IAAI,GAAGzB,GAAG,CAACL,SAAS,CAAC,OAAO,CAAC,CAChCsB,IAAI,CAACD,QAAQ,CAACU,WAAW,CAAC,CAAC,CAAC,CAC5BP,KAAK,CAAC,CAAC,CACPlB,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC,OAAO,EAAEoB,CAAC,IAAI,QAAQA,CAAC,CAACK,QAAQ,GAAG,gBAAgB,GAAG,YAAY,EAAE,CAAC,CAC1EzB,IAAI,CAAC,WAAW,EAAEoB,CAAC,IAAI,aAAaA,CAAC,CAACD,CAAC,IAAIC,CAAC,CAACC,CAAC,GAAG,CAAC;;MAErD;MACAE,IAAI,CAACxB,MAAM,CAAC,QAAQ,CAAC,CAClBC,IAAI,CAAC,GAAG,EAAEoB,CAAC,IAAI;QACd;QACA,MAAMM,OAAO,GAAG,CAAC;QACjB,MAAMC,OAAO,GAAG,EAAE;QAClB,OAAOP,CAAC,CAACL,IAAI,CAACa,KAAK,GAAGF,OAAO,GAAGG,IAAI,CAACC,GAAG,CAAEV,CAAC,CAACL,IAAI,CAACa,KAAK,GAAG,EAAE,EAAGD,OAAO,CAAC,GAAGD,OAAO;MAClF,CAAC,CAAC,CACDJ,KAAK,CAAC,MAAM,EAAEF,CAAC,IAAI;QAClB;QACA,MAAMW,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACtE,OAAOA,MAAM,CAACX,CAAC,CAACY,KAAK,GAAGD,MAAM,CAACE,MAAM,CAAC;MACxC,CAAC,CAAC,CACDX,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CACvBA,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC;;MAE7B;MACAC,IAAI,CAACxB,MAAM,CAAC,MAAM,CAAC,CAChBC,IAAI,CAAC,IAAI,EAAEoB,CAAC,IAAIA,CAAC,CAACK,QAAQ,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CACtCzB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BkC,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACL,IAAI,CAACoB,IAAI,CAAC,CACtBb,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC;;MAExB;MACAC,IAAI,CAACxB,MAAM,CAAC,MAAM,CAAC,CAChBC,IAAI,CAAC,IAAI,EAAEoB,CAAC,IAAIA,CAAC,CAACK,QAAQ,GAAG,CAAC,EAAE,GAAG,EAAE,CAAC,CACtCzB,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CACZA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BkC,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACL,IAAI,CAACa,KAAK,GAAG,IAAIR,CAAC,CAACL,IAAI,CAACa,KAAK,GAAG,GAAG,EAAE,CAAC,CAClDN,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CACzBA,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC;;MAExB;MACAxB,GAAG,CAACC,MAAM,CAAC,MAAM,CAAC,CACfC,IAAI,CAAC,GAAG,EAAEQ,UAAU,GAAG,CAAC,CAAC,CACzBR,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CACdA,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BsB,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,CAC5BY,IAAI,CAAC,uBAAuB,CAAC;IAElC,CAAC,MAAM;MACL;MACA,MAAME,MAAM,GAAGP,IAAI,CAACC,GAAG,CAACnC,cAAc,EAAEE,eAAe,CAAC,GAAG,CAAC,GAAG,EAAE;;MAEjE;MACAC,GAAG,CAACE,IAAI,CAAC,WAAW,EAAE,aAAaL,cAAc,GAAG,CAAC,IAAIE,eAAe,GAAG,CAAC,GAAG,CAAC;;MAEhF;MACA,MAAMa,UAAU,GAAGvD,EAAE,CAACwD,IAAI,CAAC,CAAC,CACzBC,IAAI,CAAC,CAAC,CAAC,GAAGiB,IAAI,CAACQ,EAAE,EAAED,MAAM,CAAC,CAAC,CAC3BE,UAAU,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAACD,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,GAAG,CAAC,GAAG,CAAC,IAAIF,CAAC,CAACP,KAAK,CAAC;MAElE,MAAMlB,QAAQ,GAAGJ,UAAU,CAACT,IAAI,CAAC;;MAEjC;MACAH,GAAG,CAACL,SAAS,CAAC,OAAO,CAAC,CACnBsB,IAAI,CAACD,QAAQ,CAACE,KAAK,CAAC,CAAC,CAAC,CACtBC,KAAK,CAAC,CAAC,CACPlB,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CACrBA,IAAI,CAAC,GAAG,EAAE7C,EAAE,CAACuF,UAAU,CAAC,CAAC,CACvBC,KAAK,CAACvB,CAAC,IAAIA,CAAC,CAACD,CAAC,CAAC,CACfiB,MAAM,CAAChB,CAAC,IAAIA,CAAC,CAACC,CAAC,CAAC,CAAC,CACnBC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,CACrBA,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CACvBA,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC;;MAE7B;MACA,MAAMC,IAAI,GAAGzB,GAAG,CAACL,SAAS,CAAC,OAAO,CAAC,CAChCsB,IAAI,CAACD,QAAQ,CAACU,WAAW,CAAC,CAAC,CAAC,CAC5BP,KAAK,CAAC,CAAC,CACPlB,MAAM,CAAC,GAAG,CAAC,CACXC,IAAI,CAAC,OAAO,EAAEoB,CAAC,IAAI,QAAQA,CAAC,CAACK,QAAQ,GAAG,gBAAgB,GAAG,YAAY,EAAE,CAAC,CAC1EzB,IAAI,CAAC,WAAW,EAAEoB,CAAC,IAAI,aAAawB,WAAW,CAACxB,CAAC,CAACD,CAAC,EAAEC,CAAC,CAACC,CAAC,CAAC,GAAG,CAAC;;MAEhE;MACAE,IAAI,CAACxB,MAAM,CAAC,QAAQ,CAAC,CAClBC,IAAI,CAAC,GAAG,EAAEoB,CAAC,IAAI;QACd;QACA,MAAMM,OAAO,GAAG,CAAC;QACjB,MAAMC,OAAO,GAAG,EAAE;QAClB,OAAOP,CAAC,CAACL,IAAI,CAACa,KAAK,GAAGF,OAAO,GAAGG,IAAI,CAACC,GAAG,CAAEV,CAAC,CAACL,IAAI,CAACa,KAAK,GAAG,EAAE,EAAGD,OAAO,CAAC,GAAGD,OAAO;MAClF,CAAC,CAAC,CACDJ,KAAK,CAAC,MAAM,EAAEF,CAAC,IAAI;QAClB;QACA,MAAMW,MAAM,GAAG,CAAC,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAAC;QACtE,OAAOA,MAAM,CAACX,CAAC,CAACY,KAAK,GAAGD,MAAM,CAACE,MAAM,CAAC;MACxC,CAAC,CAAC,CACDX,KAAK,CAAC,QAAQ,EAAE,MAAM,CAAC,CACvBA,KAAK,CAAC,cAAc,EAAE,GAAG,CAAC;;MAE7B;MACAC,IAAI,CAACxB,MAAM,CAAC,MAAM,CAAC,CAChBC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CACpBA,IAAI,CAAC,GAAG,EAAEoB,CAAC,IAAIA,CAAC,CAACD,CAAC,GAAGU,IAAI,CAACQ,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CACxCrC,IAAI,CAAC,aAAa,EAAEoB,CAAC,IAAIA,CAAC,CAACD,CAAC,GAAGU,IAAI,CAACQ,EAAE,GAAG,OAAO,GAAG,KAAK,CAAC,CACzDrC,IAAI,CAAC,WAAW,EAAEoB,CAAC,IAAIA,CAAC,CAACD,CAAC,IAAIU,IAAI,CAACQ,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC,CAC7DH,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACL,IAAI,CAACoB,IAAI,CAAC,CACtBb,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CACzBA,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC;;MAExB;MACAC,IAAI,CAACxB,MAAM,CAAC,MAAM,CAAC,CAChBC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CACnBA,IAAI,CAAC,GAAG,EAAEoB,CAAC,IAAIA,CAAC,CAACD,CAAC,GAAGU,IAAI,CAACQ,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CACxCrC,IAAI,CAAC,aAAa,EAAEoB,CAAC,IAAIA,CAAC,CAACD,CAAC,GAAGU,IAAI,CAACQ,EAAE,GAAG,OAAO,GAAG,KAAK,CAAC,CACzDrC,IAAI,CAAC,WAAW,EAAEoB,CAAC,IAAIA,CAAC,CAACD,CAAC,IAAIU,IAAI,CAACQ,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC,CAC7DH,IAAI,CAACd,CAAC,IAAIA,CAAC,CAACL,IAAI,CAACa,KAAK,GAAG,IAAIR,CAAC,CAACL,IAAI,CAACa,KAAK,GAAG,GAAG,EAAE,CAAC,CAClDN,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,CACzBA,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC;;MAExB;MACAxB,GAAG,CAACC,MAAM,CAAC,MAAM,CAAC,CACfC,IAAI,CAAC,GAAG,EAAE,CAACoC,MAAM,GAAG,EAAE,CAAC,CACvBpC,IAAI,CAAC,aAAa,EAAE,QAAQ,CAAC,CAC7BsB,KAAK,CAAC,WAAW,EAAE,MAAM,CAAC,CAC1BA,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,CAC5BY,IAAI,CAAC,uBAAuB,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMU,WAAW,GAAGA,CAACzB,CAAC,EAAEE,CAAC,KAAK,CAACA,CAAC,GAAGQ,IAAI,CAACgB,GAAG,CAAC1B,CAAC,CAAC,EAAEE,CAAC,GAAGQ,IAAI,CAACiB,GAAG,CAAC3B,CAAC,CAAC,CAAC;;EAEhE;EACA,MAAMnC,oBAAoB,GAAI+D,eAAe,IAAK;IAChD,IAAI,CAACA,eAAe,IAAIA,eAAe,CAACd,MAAM,KAAK,CAAC,EAAE;MACpD1D,aAAa,CAAC,IAAI,CAAC;MACnB;IACF;;IAEA;IACA,MAAMyE,YAAY,GAAGD,eAAe,CACjCE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACC,YAAY,CAAC,CACjCC,GAAG,CAACF,IAAI,IAAIA,IAAI,CAACC,YAAY,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC;;IAE5C;IACA,MAAMC,UAAU,GAAG,CAAC,CAAC;IACrBN,YAAY,CAACO,OAAO,CAACC,WAAW,IAAI;MAClCA,WAAW,CAACD,OAAO,CAACL,IAAI,IAAI;QAC1BI,UAAU,CAACJ,IAAI,CAAC,GAAG,CAACI,UAAU,CAACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;MAChD,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMO,UAAU,GAAG5B,IAAI,CAAC6B,GAAG,CAAC,CAAC,EAAE7B,IAAI,CAAC8B,KAAK,CAACX,YAAY,CAACf,MAAM,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACvE,MAAM2B,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC,CAC1CL,MAAM,CAACC,IAAI,IAAII,UAAU,CAACJ,IAAI,CAAC,IAAIO,UAAU,CAAC,CAC9CM,IAAI,CAAC,CAACxB,CAAC,EAAEC,CAAC,KAAKc,UAAU,CAACd,CAAC,CAAC,GAAGc,UAAU,CAACf,CAAC,CAAC,CAAC;;IAEhD;IACA,MAAMyB,mBAAmB,GAAGhB,YAAY,CAACI,GAAG,CAACI,WAAW,IAAI;MAC1D,OAAOA,WAAW,CACfP,MAAM,CAACC,IAAI,IAAIU,aAAa,CAACK,QAAQ,CAACf,IAAI,CAAC,CAAC,CAC5Ca,IAAI,CAAC,CAACxB,CAAC,EAAEC,CAAC,KAAKc,UAAU,CAACd,CAAC,CAAC,GAAGc,UAAU,CAACf,CAAC,CAAC,CAAC;IAClD,CAAC,CAAC,CAACU,MAAM,CAACO,WAAW,IAAIA,WAAW,CAACvB,MAAM,GAAG,CAAC,CAAC;;IAEhD;IACA,MAAMhC,IAAI,GAAG;MACXkC,IAAI,EAAE,MAAM;MACZV,QAAQ,EAAE,EAAE;MACZG,KAAK,EAAEoB,YAAY,CAACf,MAAM;MAC1BqB,UAAU,EAAE,CAAC;IACf,CAAC;;IAED;IACA,MAAMY,UAAU,GAAGA,CAAC3C,IAAI,EAAE4C,IAAI,EAAEC,KAAK,GAAG,CAAC,KAAK;MAC5C,IAAIA,KAAK,IAAID,IAAI,CAAClC,MAAM,EAAE;MAE1B,MAAMiB,IAAI,GAAGiB,IAAI,CAACC,KAAK,CAAC;MACxB,IAAIC,KAAK,GAAG9C,IAAI,CAACE,QAAQ,CAAC6C,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACpC,IAAI,KAAKe,IAAI,CAAC;MAEpD,IAAI,CAACmB,KAAK,EAAE;QACVA,KAAK,GAAG;UACNlC,IAAI,EAAEe,IAAI;UACVtB,KAAK,EAAE,CAAC;UACRH,QAAQ,EAAE;QACZ,CAAC;QACDF,IAAI,CAACE,QAAQ,CAAC+C,IAAI,CAACH,KAAK,CAAC;MAC3B,CAAC,MAAM;QACLA,KAAK,CAACzC,KAAK,EAAE;MACf;MAEAsC,UAAU,CAACG,KAAK,EAAEF,IAAI,EAAEC,KAAK,GAAG,CAAC,CAAC;IACpC,CAAC;;IAED;IACAJ,mBAAmB,CAACT,OAAO,CAACC,WAAW,IAAI;MACzCU,UAAU,CAACjE,IAAI,EAAEuD,WAAW,CAAC;IAC/B,CAAC,CAAC;;IAEF;IACA,MAAMiB,SAAS,GAAGA,CAAClD,IAAI,EAAEmD,QAAQ,GAAG,CAAC,EAAEC,YAAY,GAAG,CAAC,KAAK;MAC1D,IAAIA,YAAY,IAAID,QAAQ,EAAE;QAC5BnD,IAAI,CAACE,QAAQ,GAAG,EAAE;QAClB;MACF;;MAEA;MACAF,IAAI,CAACE,QAAQ,CAACsC,IAAI,CAAC,CAACxB,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACZ,KAAK,GAAGW,CAAC,CAACX,KAAK,CAAC;;MAE/C;MACA,IAAIL,IAAI,CAACE,QAAQ,CAACQ,MAAM,GAAG,CAAC,EAAE;QAC5BV,IAAI,CAACE,QAAQ,GAAGF,IAAI,CAACE,QAAQ,CAACmD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3C;;MAEA;MACArD,IAAI,CAACE,QAAQ,CAAC8B,OAAO,CAACc,KAAK,IAAII,SAAS,CAACJ,KAAK,EAAEK,QAAQ,EAAEC,YAAY,GAAG,CAAC,CAAC,CAAC;IAC9E,CAAC;IAEDF,SAAS,CAACxE,IAAI,CAAC;IAEf1B,aAAa,CAAC0B,IAAI,CAAC;EACrB,CAAC;EAED,MAAM4E,sBAAsB,GAAIC,WAAW,IAAK;IAC9C,IAAIrH,mBAAmB,EAAE;MACvBA,mBAAmB,CAACqH,WAAW,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMC,uBAAuB,GAAIC,WAAW,IAAK;IAC/C,IAAI,CAACA,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAM/F,OAAO,GAAG+F,WAAW,CAAC3B,KAAK,CAAC,GAAG,CAAC;IACtC,oBACEhG,OAAA;MAAK4H,SAAS,EAAC,aAAa;MAAAxD,QAAA,EACzBxC,OAAO,CAACmE,GAAG,CAAC,CAAC8B,MAAM,EAAEd,KAAK,kBACzB/G,OAAA;QAAkB4H,SAAS,EAAC,gBAAgB;QAAAxD,QAAA,EAAEyD;MAAM,GAAzCd,KAAK;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG,CAACpH,QAAQ;IAC7BC,WAAW,CAACmH,WAAW,CAAC;;IAExB;IACA3G,OAAO,CAACC,GAAG,CAAC,aAAa0G,WAAW,GAAG,SAAS,GAAG,UAAU,EAAE,CAAC;;IAEhE;IACA,IAAI,CAACA,WAAW,KAAK,CAACjI,OAAO,IAAI,CAACC,cAAc,CAAC,EAAE;MACjDK,qBAAqB,CAAC,EAAE,CAAC;MACzBU,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMkH,YAAY,GAAGA,CAAA,KAAM;IACzBhH,aAAa,CAACD,UAAU,KAAK,UAAU,GAAG,QAAQ,GAAG,UAAU,CAAC;EAClE,CAAC;EAED,oBACEnB,OAAA;IAAK4H,SAAS,EAAC,kBAAkB;IAAAxD,QAAA,gBAC/BpE,OAAA;MAAK4H,SAAS,EAAC,wBAAwB;MAAAxD,QAAA,gBACrCpE,OAAA;QAAI4H,SAAS,EAAC,cAAc;QAAAxD,QAAA,EACzB,CAACrD,QAAQ,IAAIZ,cAAc,GACxB,cAAcA,cAAc,EAAE,GAC9B;MAAW;QAAA2H,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACLjI,OAAA;QAAK4H,SAAS,EAAC,kBAAkB;QAAAxD,QAAA,eAC/BpE,OAAA;UAAO4H,SAAS,EAAC,cAAc;UAAAxD,QAAA,gBAC7BpE,OAAA;YAAAoE,QAAA,GAAM,YAAU,EAACrD,QAAQ,GAAG,IAAI,GAAG,KAAK;UAAA;YAAA+G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAChDjI,OAAA;YACEqI,IAAI,EAAC,UAAU;YACfC,OAAO,EAAEvH,QAAS;YAClBwH,QAAQ,EAAEL;UAAe;YAAAJ,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACFjI,OAAA;YAAM4H,SAAS,EAAC;UAAe;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENjI,OAAA;MAAK4H,SAAS,EAAC,MAAM;MAAAxD,QAAA,gBACnBpE,OAAA;QACE4H,SAAS,EAAE,OAAO/G,SAAS,KAAK,aAAa,GAAG,QAAQ,GAAG,EAAE,EAAG;QAChE2H,OAAO,EAAEA,CAAA,KAAM1H,YAAY,CAAC,aAAa,CAAE;QAAAsD,QAAA,EAC5C;MAED;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTjI,OAAA;QACE4H,SAAS,EAAE,OAAO/G,SAAS,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC3D2H,OAAO,EAAEA,CAAA,KAAM1H,YAAY,CAAC,QAAQ,CAAE;QAAAsD,QAAA,EACvC;MAED;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELpH,SAAS,KAAK,aAAa,gBAC1Bb,OAAA;MAAK4H,SAAS,EAAC,aAAa;MAAAxD,QAAA,EACzB3D,OAAO,gBACNT,OAAA;QAAK4H,SAAS,EAAC,SAAS;QAAAxD,QAAA,EAAC;MAAO;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACpCtH,KAAK,gBACPX,OAAA;QAAK4H,SAAS,EAAC,OAAO;QAAAxD,QAAA,GAAC,gBAAI,EAACzD,KAAK;MAAA;QAAAmH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACtC1H,kBAAkB,CAACqE,MAAM,GAAG,CAAC,gBAC/B5E,OAAA;QAAK4H,SAAS,EAAC,gBAAgB;QAAAxD,QAAA,EAC5B7D,kBAAkB,CAACwF,GAAG,CAAC,CAACF,IAAI,EAAEkB,KAAK,kBAClC/G,OAAA;UAEE4H,SAAS,EAAE,eAAevH,mBAAmB,KAAKwF,IAAI,CAACC,YAAY,GAAG,UAAU,GAAG,EAAE,EAAG;UACxF0C,OAAO,EAAEA,CAAA,KAAMhB,sBAAsB,CAAC3B,IAAI,CAACC,YAAY,CAAE;UAAA1B,QAAA,EAExDsD,uBAAuB,CAAC7B,IAAI,CAACC,YAAY;QAAC,GAJtCiB,KAAK;UAAAe,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAENjI,OAAA;QAAK4H,SAAS,EAAC,cAAc;QAAAxD,QAAA,EAC1BrD,QAAQ,GACL,mBAAmB,GACnB;MAAiB;QAAA+G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,gBAENjI,OAAA;MAAK4H,SAAS,EAAC,aAAa;MAAAxD,QAAA,EACzB3D,OAAO,gBACNT,OAAA;QAAK4H,SAAS,EAAC,SAAS;QAAAxD,QAAA,EAAC;MAAO;QAAA0D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACpCtH,KAAK,gBACPX,OAAA;QAAK4H,SAAS,EAAC,OAAO;QAAAxD,QAAA,GAAC,gBAAI,EAACzD,KAAK;MAAA;QAAAmH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACtChH,UAAU,gBACZjB,OAAA;QAAK4H,SAAS,EAAC,aAAa;QAAAxD,QAAA,gBAC1BpE,OAAA;UAAK4H,SAAS,EAAC,sBAAsB;UAAAxD,QAAA,eACnCpE,OAAA;YACE4H,SAAS,EAAC,eAAe;YACzBY,OAAO,EAAEJ,YAAa;YAAAhE,QAAA,EAErBjD,UAAU,KAAK,UAAU,GAAG,QAAQ,GAAG;UAAQ;YAAA2G,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1C;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAAC,eACNjI,OAAA;UACE4H,SAAS,EAAC,uBAAuB;UACjCa,GAAG,EAAEpH,aAAc;UACnB4C,KAAK,EAAE;YAAEyE,KAAK,EAAE,MAAM;YAAEC,MAAM,EAAE,OAAO;YAAEC,QAAQ,EAAE;UAAS;QAAE;UAAAd,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAG3D,CAAC,eACNjI,OAAA;UAAK4H,SAAS,EAAC,oBAAoB;UAAAxD,QAAA,gBACjCpE,OAAA;YAAAoE,QAAA,EAAG;UAA8C;YAAA0D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAG,CAAC,eACrDjI,OAAA;YAAAoE,QAAA,gBACEpE,OAAA;cAAAoE,QAAA,EAAI;YAAwB;cAAA0D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACjCjI,OAAA;cAAAoE,QAAA,EAAI;YAAkB;cAAA0D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eAC3BjI,OAAA;cAAAoE,QAAA,EAAI;YAA4B;cAAA0D,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACnC,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACF,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,gBAENjI,OAAA;QAAK4H,SAAS,EAAC,cAAc;QAAAxD,QAAA,EAC1BrD,QAAQ,GACL,qBAAqB,GACrB;MAAuC;QAAA+G,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC3H,EAAA,CA/dIL,qBAAqB;AAAA4I,EAAA,GAArB5I,qBAAqB;AAie3B,eAAeA,qBAAqB;AAAC,IAAA4I,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}