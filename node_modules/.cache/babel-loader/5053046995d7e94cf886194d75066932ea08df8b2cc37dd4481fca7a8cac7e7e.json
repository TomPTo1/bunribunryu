{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData,\n  groupingData\n}) => {\n  _s();\n  // Add state for user-defined groups\n  const [userGroups, setUserGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n\n    // If a group is selected, add the segment to that group\n    if (selectedGroup !== null) {\n      addToGroup(selectedGroup, typeof segment === 'string' ? segment : segment.text);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = value => {\n    console.log('Whole tag clicked:', value);\n\n    // If a group is selected, add the value to that group\n    if (selectedGroup !== null) {\n      addToGroup(selectedGroup, value);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${className} tag-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whole-tag-button\",\n          onClick: () => handleTagClick(valueText),\n          title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n          children: valueText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segments-container\",\n          children: segmentation.segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`,\n            onClick: e => handleSegmentClick(segment, e),\n            children: segment.text\n          }, `seg-${segIdx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally but still clickable\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${className} clickable-tag simple-tag-button`,\n      onClick: () => handleTagClick(valueText),\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n        const source = item.source || 'text';\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"whole-tag-button\",\n              onClick: () => handleTagClick(value),\n              title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segments-container\",\n              children: segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`,\n                onClick: e => handleSegmentClick(segment, e),\n                children: segment.text\n              }, `seg-${segIdx}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n          onClick: () => handleTagClick(value),\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n\n  // Render grouped data without duplicates\n  const renderGroupedData = () => {\n    if (!groupingData) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouped-data-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uADF8\\uB8F9\\uD551\\uB41C \\uB370\\uC774\\uD130 (\\uC911\\uBCF5 \\uC81C\\uAC70)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grouped-data-content\",\n        children: Object.entries(groupingData).map(([key, segments], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grouped-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-key\",\n            children: key\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-segments\",\n            children: Array.isArray(segments) && segments.map((segment, idx) => /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"segment-item\",\n              onClick: () => handleTagClick(segment),\n              children: segment\n            }, `segment-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 15\n          }, this)]\n        }, `group-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Add new user group\n  const addUserGroup = () => {\n    if (newGroupName.trim() === '') return;\n    setUserGroups([...userGroups, {\n      id: Date.now(),\n      name: newGroupName,\n      items: []\n    }]);\n    setNewGroupName('');\n  };\n\n  // Add segment to specific group\n  const addToGroup = (groupIndex, value) => {\n    // Don't add if already exists in this group\n    if (userGroups[groupIndex].items.includes(value)) return;\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.push(value);\n    setUserGroups(updatedGroups);\n  };\n\n  // Remove item from group\n  const removeFromGroup = (groupIndex, itemIndex) => {\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.splice(itemIndex, 1);\n    setUserGroups(updatedGroups);\n  };\n\n  // Select group to add items to\n  const toggleGroupSelection = index => {\n    setSelectedGroup(selectedGroup === index ? null : index);\n  };\n\n  // Render user-defined groups\n  const renderUserGroups = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-groups-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC0AC\\uC6A9\\uC790 \\uC815\\uC758 \\uADF8\\uB8F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-creation-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newGroupName,\n          onChange: e => setNewGroupName(e.target.value),\n          placeholder: \"\\uC0C8 \\uADF8\\uB8F9 \\uC774\\uB984 \\uC785\\uB825\",\n          className: \"group-name-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addUserGroup,\n          className: \"add-group-btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), \" \\uADF8\\uB8F9 \\uCD94\\uAC00\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-groups-list\",\n        children: userGroups.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-groups-message\",\n          children: \"\\uC0DD\\uC131\\uB41C \\uADF8\\uB8F9\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uC704 \\uC785\\uB825\\uCC3D\\uC5D0\\uC11C \\uADF8\\uB8F9\\uC744 \\uCD94\\uAC00\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }, this) : userGroups.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `user-group-box ${selectedGroup === groupIndex ? 'selected-group' : ''}`,\n          onClick: () => toggleGroupSelection(groupIndex),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-group-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-name\",\n              children: group.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-selection-status\",\n              children: selectedGroup === groupIndex ? '선택됨' : '클릭하여 선택'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-group-items\",\n            children: group.items.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-group-message\",\n              children: \"\\uC67C\\uCABD \\uBD84\\uC808\\uAC12\\uC744 \\uD074\\uB9AD\\uD558\\uC5EC \\uC774 \\uADF8\\uB8F9\\uC5D0 \\uCD94\\uAC00\\uD558\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 366,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-items-list\",\n              children: group.items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-group-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"item-text\",\n                  children: item\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 373,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"remove-item-btn\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    removeFromGroup(groupIndex, itemIndex);\n                  },\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 374,\n                  columnNumber: 27\n                }, this)]\n              }, itemIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 372,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this)]\n        }, group.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: groupingData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouped-data-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grouped-data-wrapper\",\n        children: renderGroupedData()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-groups-wrapper\",\n        children: renderUserGroups()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"yzUeMLRN55KStpIk7PgEf60zkeM=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","segmentationData","groupingData","_s","userGroups","setUserGroups","newGroupName","setNewGroupName","selectedGroup","setSelectedGroup","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","hasSegmentationData","value","segmentations","some","seg","segments","getSegmentationData","find","handleSegmentClick","segment","e","stopPropagation","console","log","addToGroup","handleTagClick","renderTag","source","key","isLastStep","valueText","segmentation","onClick","title","map","segIdx","isSubstring","renderEnhancedView","row","type","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","item","Array","isArray","every","v","val","renderGroupedData","Object","entries","index","addUserGroup","trim","id","Date","now","name","items","groupIndex","updatedGroups","removeFromGroup","itemIndex","splice","toggleGroupSelection","renderUserGroups","onChange","target","placeholder","group","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData, groupingData }) => {\n  // Add state for user-defined groups\n  const [userGroups, setUserGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState(null);\n\n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n    \n    // If a group is selected, add the segment to that group\n    if (selectedGroup !== null) {\n      addToGroup(selectedGroup, typeof segment === 'string' ? segment : segment.text);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = (value) => {\n    console.log('Whole tag clicked:', value);\n    \n    // If a group is selected, add the value to that group\n    if (selectedGroup !== null) {\n      addToGroup(selectedGroup, value);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <div key={key} className={`${className} tag-container`}>\n          <button \n            className=\"whole-tag-button\" \n            onClick={() => handleTagClick(valueText)}\n            title=\"전체 태그 선택\"\n          >\n            {valueText}\n          </button>\n          <div className=\"segments-container\">\n            {segmentation.segments.map((segment, segIdx) => (\n              <button \n                key={`seg-${segIdx}`} \n                className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`}\n                onClick={(e) => handleSegmentClick(segment, e)}\n              >\n                {segment.text}\n              </button>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    \n    // No segmentation, render normally but still clickable\n    return (\n      <button \n        key={key} \n        className={`${className} clickable-tag simple-tag-button`}\n        onClick={() => handleTagClick(valueText)}\n      >\n        {valueText}\n      </button>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          const source = item.source || 'text';\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <div \n                key={idx} \n                className={`value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n              >\n                <button \n                  className=\"whole-tag-button\" \n                  onClick={() => handleTagClick(value)}\n                  title=\"전체 태그 선택\"\n                >\n                  {value}\n                </button>\n                <div className=\"segments-container\">\n                  {segments.map((segment, segIdx) => (\n                    <button \n                      key={`seg-${segIdx}`} \n                      className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`}\n                      onClick={(e) => handleSegmentClick(segment, e)}\n                    >\n                      {segment.text}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <button \n              key={idx} \n              className={`value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n              onClick={() => handleTagClick(value)}\n            >\n              {value}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n  \n  // Render grouped data without duplicates\n  const renderGroupedData = () => {\n    if (!groupingData) {\n      return null;\n    }\n    \n    return (\n      <div className=\"grouped-data-section\">\n        <h3>그룹핑된 데이터 (중복 제거)</h3>\n        <div className=\"grouped-data-content\">\n          {Object.entries(groupingData).map(([key, segments], index) => (\n            <div key={`group-${index}`} className=\"grouped-item\">\n              <div className=\"group-key\">{key}</div>\n              <div className=\"group-segments\">\n                {Array.isArray(segments) && segments.map((segment, idx) => (\n                  <button \n                    key={`segment-${idx}`} \n                    className=\"segment-item\"\n                    onClick={() => handleTagClick(segment)}\n                  >\n                    {segment}\n                  </button>\n                ))}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Add new user group\n  const addUserGroup = () => {\n    if (newGroupName.trim() === '') return;\n    \n    setUserGroups([\n      ...userGroups,\n      { id: Date.now(), name: newGroupName, items: [] }\n    ]);\n    setNewGroupName('');\n  };\n\n  // Add segment to specific group\n  const addToGroup = (groupIndex, value) => {\n    // Don't add if already exists in this group\n    if (userGroups[groupIndex].items.includes(value)) return;\n    \n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.push(value);\n    setUserGroups(updatedGroups);\n  };\n\n  // Remove item from group\n  const removeFromGroup = (groupIndex, itemIndex) => {\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.splice(itemIndex, 1);\n    setUserGroups(updatedGroups);\n  };\n\n  // Select group to add items to\n  const toggleGroupSelection = (index) => {\n    setSelectedGroup(selectedGroup === index ? null : index);\n  };\n\n  // Render user-defined groups\n  const renderUserGroups = () => {\n    return (\n      <div className=\"user-groups-section\">\n        <h3>사용자 정의 그룹</h3>\n        \n        {/* Group creation form */}\n        <div className=\"group-creation-form\">\n          <input\n            type=\"text\"\n            value={newGroupName}\n            onChange={(e) => setNewGroupName(e.target.value)}\n            placeholder=\"새 그룹 이름 입력\"\n            className=\"group-name-input\"\n          />\n          <button onClick={addUserGroup} className=\"add-group-btn\">\n            <span>+</span> 그룹 추가\n          </button>\n        </div>\n        \n        {/* Groups list */}\n        <div className=\"user-groups-list\">\n          {userGroups.length === 0 ? (\n            <div className=\"no-groups-message\">\n              생성된 그룹이 없습니다. 위 입력창에서 그룹을 추가해주세요.\n            </div>\n          ) : (\n            userGroups.map((group, groupIndex) => (\n              <div \n                key={group.id} \n                className={`user-group-box ${selectedGroup === groupIndex ? 'selected-group' : ''}`}\n                onClick={() => toggleGroupSelection(groupIndex)}\n              >\n                <div className=\"user-group-header\">\n                  <div className=\"user-group-name\">{group.name}</div>\n                  <div className=\"user-group-selection-status\">\n                    {selectedGroup === groupIndex ? '선택됨' : '클릭하여 선택'}\n                  </div>\n                </div>\n                <div className=\"user-group-items\">\n                  {group.items.length === 0 ? (\n                    <div className=\"empty-group-message\">\n                      왼쪽 분절값을 클릭하여 이 그룹에 추가하세요\n                    </div>\n                  ) : (\n                    <div className=\"user-group-items-list\">\n                      {group.items.map((item, itemIndex) => (\n                        <div key={itemIndex} className=\"user-group-item\">\n                          <span className=\"item-text\">{item}</span>\n                          <button \n                            className=\"remove-item-btn\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              removeFromGroup(groupIndex, itemIndex);\n                            }}\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"data-display\">\n      {/* Layout with two column when grouping data is available */}\n      {groupingData && (\n        <div className=\"grouped-data-layout\">\n          <div className=\"grouped-data-wrapper\">\n            {renderGroupedData()}\n          </div>\n          <div className=\"user-groups-wrapper\">\n            {renderUserGroups()}\n          </div>\n        </div>\n      )}\n      \n      {/* Display the table with processed data\n      <div className=\"processed-data-section\">\n        <h3>처리된 데이터</h3>\n        <table className=\"data-table\">\n          <tbody>\n            {flattenData(processedData).map((row, index) => (\n              <tr key={index}>\n                <td className=\"enhanced-view\">\n                  {renderEnhancedView(row)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div> */}\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}