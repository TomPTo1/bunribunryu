{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MiningView = ({\n  combinationHeaders,\n  loading,\n  error,\n  testMode,\n  onPatternSelect\n}) => {\n  _s();\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('fpgrowth'); // Only use FP-Growth\n  const [minSupport, setMinSupport] = useState(0.01); // Changed to 1% default\n  const [minConfidence, setMinConfidence] = useState(0.01); // Changed to 1% default\n  const [maxDepth, setMaxDepth] = useState(100); // No practical limit\n  const [currentPath, setCurrentPath] = useState([]);\n  const [showSettings, setShowSettings] = useState(false);\n  const [ignoredNodes, setIgnoredNodes] = useState([]); // 배열로 변경\n  const treeContainerRef = useRef(null);\n\n  // 콘솔에 prop 확인 로그\n  useEffect(() => {\n    console.log('onPatternSelect prop:', onPatternSelect);\n    console.log('combinationHeaders:', combinationHeaders);\n  }, [onPatternSelect, combinationHeaders]);\n\n  // 메모이즈된 무시 노드 확인 함수\n  const isNodeIgnored = useCallback(nodeId => {\n    return ignoredNodes.includes(nodeId);\n  }, [ignoredNodes]);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n\n    // Build a single hierarchical tree structure instead of multiple independent trees\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n\n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n\n      // Create a single root node representing the most frequent item\n      const rootItem = frequentItems[0];\n      const rootSupport = tidLists[rootItem].size;\n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: rootSupport,\n        confidence: rootSupport / totalTransactions,\n        children: []\n      };\n\n      // Build a tree structure following the frequency order of items\n      const buildOrderedTree = (currentNode, currentPrefix, currentTids, level) => {\n        if (level >= maxDepth) return;\n\n        // Find index of the current node's item in the frequentItems list\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n\n        // Check for next items in the frequency order\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          const nextItemTids = tidLists[nextItem];\n\n          // Calculate intersection\n          const intersection = new Set([...currentTids].filter(tid => nextItemTids.has(tid)));\n          const support = intersection.size;\n\n          // Add to tree if support is sufficient\n          if (support >= Math.max(2, minSupportCount)) {\n            const newPrefix = [...currentPrefix, nextItem];\n            const confidence = support / currentTids.size;\n\n            // Add only if confidence is sufficient (reduced for deeper patterns)\n            if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              currentNode.children.push(childNode);\n\n              // Recursively build tree with this child as new parent\n              buildOrderedTree(childNode, newPrefix, intersection, level + 1);\n            }\n          }\n        }\n      };\n\n      // Start building the tree from the root\n      buildOrderedTree(singleTreeRoot, [rootItem], tidLists[rootItem], 1);\n\n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n\n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n\n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n\n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    } else {\n      // FP-GROWTH for a single hierarchical tree\n\n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n\n      // Create a single root node for the most frequent item\n      const rootItem = frequentItems[0];\n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: itemCounts[rootItem],\n        confidence: itemCounts[rootItem] / totalTransactions,\n        children: []\n      };\n\n      // Create a mapping of patterns to their support count\n      const patternSupports = {};\n\n      // First pass - gather all pattern supports\n      orderedTransactions.forEach(transaction => {\n        if (transaction.length < 2) return;\n        for (let i = 0; i < transaction.length; i++) {\n          for (let j = i + 1; j < transaction.length; j++) {\n            const pattern = [transaction[i], transaction[j]];\n            const key = pattern.join('-');\n            patternSupports[key] = (patternSupports[key] || 0) + 1;\n          }\n        }\n      });\n\n      // Then build tree with those precomputed pattern supports\n      const buildOrderedFPTree = (currentNode, level) => {\n        if (level >= maxDepth) return;\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n\n          // Check if the pair meets minimum support\n          const patternKey = [currentNode.name, nextItem].join('-');\n          const support = patternSupports[patternKey] || 0;\n          if (support >= Math.max(2, minSupportCount)) {\n            const confidence = support / itemCounts[currentNode.name];\n            if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              currentNode.children.push(childNode);\n              buildOrderedFPTree(childNode, level + 1);\n            }\n          }\n        }\n      };\n\n      // Start building the tree from the root\n      buildOrderedFPTree(singleTreeRoot, 1);\n\n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n\n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n\n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n\n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    console.log('Toggle node expansion:', nodeId);\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to ignore a node\n  const ignoreNode = nodeId => {\n    if (!nodeId) {\n      console.warn('ignoreNode: nodeId is undefined');\n      return;\n    }\n    console.log('Ignoring node:', nodeId);\n\n    // 배열로 상태 업데이트 - React가 확실히 변경을 감지\n    setIgnoredNodes(prev => {\n      if (prev.includes(nodeId)) {\n        return prev; // 이미 무시 중이면 변경하지 않음\n      }\n      const newIgnored = [...prev, nodeId]; // 새 배열 생성\n      console.log('New ignored nodes:', newIgnored);\n\n      // 피드백 표시\n      const parts = nodeId.split('-');\n      const nodeName = parts[parts.length - 1];\n      showNotification(`'${nodeName}' 노드가 무시됨`, 'ignore');\n      return newIgnored;\n    });\n  };\n\n  // 알림 표시 함수\n  const showNotification = (message, type = 'normal') => {\n    // 이전 알림 제거\n    const existingNotifications = document.querySelectorAll('.pattern-notification');\n    existingNotifications.forEach(n => {\n      if (n.parentNode) {\n        n.parentNode.removeChild(n);\n      }\n    });\n\n    // 새 알림 생성\n    const notification = document.createElement('div');\n    notification.className = `pattern-notification ${type === 'ignore' ? 'ignore-notification' : ''}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    setTimeout(() => {\n      notification.style.opacity = '0';\n      setTimeout(() => {\n        if (notification.parentNode) {\n          document.body.removeChild(notification);\n        }\n      }, 300);\n    }, 2000);\n  };\n\n  // Function to get path from node to root\n  const getPathToRoot = nodeId => {\n    const parts = nodeId.split('-');\n    const path = [];\n    for (let i = 0; i < parts.length; i++) {\n      const segment = parts.slice(0, i + 1).join('-');\n      path.push(segment);\n    }\n    return path.reverse(); // 루트에서 노드까지의 경로\n  };\n\n  // Function to send pattern to API\n  const sendPatternToAPI = node => {\n    console.log('sendPatternToAPI called with node:', node);\n    if (!node || !node.id) {\n      console.warn('Invalid node:', node);\n      return;\n    }\n\n    // 콜백 함수 확인\n    if (typeof onPatternSelect !== 'function') {\n      console.warn('onPatternSelect is not a function:', onPatternSelect);\n      showNotification('패턴 선택 핸들러가 없습니다', 'ignore');\n      return;\n    }\n\n    // Get full pattern from node ID (splitting by dash)\n    const patternParts = node.id.split('-');\n\n    // Filter out ignored nodes\n    const filteredPattern = patternParts.filter(part => !ignoredNodes.includes(part));\n\n    // Sort pattern alphabetically if needed (주석 처리했으나 필요시 활성화)\n    // filteredPattern.sort();\n\n    // Join with delimiter\n    const patternString = filteredPattern.join('|');\n    console.log('Pattern to send:', patternString);\n\n    // 패턴이 비어있는지 확인\n    if (!patternString) {\n      console.warn('Pattern is empty after filtering ignored nodes');\n      showNotification('선택한 패턴이 비어 있습니다', 'ignore');\n      return;\n    }\n\n    // 패턴 전송\n    try {\n      onPatternSelect(patternString);\n      console.log('Pattern sent successfully:', patternString);\n      showNotification(`패턴 선택됨: ${patternString}`);\n    } catch (error) {\n      console.error('Error sending pattern:', error);\n      showNotification('패턴 전송 중 오류 발생', 'ignore');\n    }\n  };\n\n  // Toggle settings panel\n  const toggleSettings = () => {\n    setShowSettings(prev => !prev);\n  };\n\n  // Setup initial path on first render\n  useEffect(() => {\n    if (miningData && miningData.length > 0) {\n      // Set initial path to root node\n      const rootItem = miningData[0].name;\n      setCurrentPath([rootItem]);\n    }\n  }, [miningData]);\n\n  // Change minimum support threshold\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  // Change minimum confidence threshold\n  const handleConfidenceChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n\n  // Change maximum depth\n  const handleDepthChange = e => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Recursive function to render tree nodes using divs\n  const renderTreeNode = (node, level) => {\n    if (!node || isNodeIgnored(node.id)) return null;\n    const isExpanded = expandedNodes[node.id] || false;\n    const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n    const handleNodeMouseEnter = () => {\n      // Find path from node to root\n      const path = getPathToRoot(node.id);\n      setHighlightedPattern(path);\n\n      // Extract only the item names for the path display\n      const simplifiedPath = path.map(id => {\n        const parts = id.split('-');\n        return parts[parts.length - 1];\n      });\n      setCurrentPath(simplifiedPath);\n    };\n    const handleNodeMouseLeave = () => {\n      setHighlightedPattern(null);\n      // Keep current path visible\n    };\n    const handleNodeClick = e => {\n      if (e.target.closest('.ignore-button') || e.target.closest('.expand-button')) {\n        // Ignore clicks on buttons\n        return;\n      }\n\n      // Handle node selection\n      console.log('Node clicked:', node.id);\n      sendPatternToAPI(node);\n\n      // Set this node's path as the highlighted pattern\n      const path = getPathToRoot(node.id);\n      setHighlightedPattern(path);\n    };\n    const handleToggleClick = e => {\n      e.stopPropagation();\n      toggleNode(node.id);\n    };\n    const handleIgnoreClick = e => {\n      e.stopPropagation();\n      ignoreNode(node.id);\n    };\n\n    // Truncate display text if too long\n    let displayText = node.name;\n    if (displayText.length > 25) {\n      displayText = displayText.substring(0, 23) + '...';\n    }\n\n    // Calculate connection lines position\n    const hasParent = node.id.includes('-');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tree-node-div ${isHighlighted ? 'node-highlighted' : ''} ${level === 0 ? 'root-node' : ''}`,\n      style: {\n        marginLeft: level * 30\n      },\n      onMouseEnter: handleNodeMouseEnter,\n      onMouseLeave: handleNodeMouseLeave,\n      onClick: handleNodeClick,\n      children: [hasParent && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tree-connector ${isHighlighted ? 'connector-highlighted' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"vertical-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"horizontal-line\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"node-text\",\n          style: {\n            fontWeight: level === 0 ? 'bold' : 'normal'\n          },\n          children: displayText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"support-value\",\n            children: node.support\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"ignore-button\",\n            onClick: handleIgnoreClick,\n            title: \"\\uC774 \\uB178\\uB4DC \\uBB34\\uC2DC\\uD558\\uAE30\",\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this), node.children && node.children.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"expand-button\",\n            onClick: handleToggleClick,\n            title: isExpanded ? \"접기\" : \"펼치기\",\n            children: isExpanded ? '−' : '+'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), isExpanded && node.children && node.children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-children\",\n        children: node.children.sort((a, b) => b.support - a.support).map(child => renderTreeNode(child, level + 1))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 481,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"\\uC5D0\\uB7EC: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 9\n    }, this) : combinationHeaders && combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"current-path\",\n          children: currentPath.map((item, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [index > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"path-separator\",\n              children: \"\\u2192\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 546,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: index === 0 ? \"path-root\" : \"\",\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 19\n            }, this)]\n          }, item + index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 545,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-actions\",\n          children: [ignoredNodes.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"reset-button\",\n            onClick: () => {\n              console.log('Reset ignored nodes');\n              setIgnoredNodes([]);\n              showNotification('무시된 노드를 모두 초기화했습니다');\n            },\n            children: [\"\\uBB34\\uC2DC \\uCD08\\uAE30\\uD654 (\", ignoredNodes.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 553,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"settings-button\",\n            onClick: toggleSettings,\n            children: \"\\u2699\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 564,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-tree-container\",\n        ref: treeContainerRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"div-tree\",\n          children: miningData && miningData.map(node => renderTreeNode(node, 0))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 11\n      }, this), showSettings && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-panel\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uD328\\uD134 \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 579,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-button\",\n            onClick: toggleSettings,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 578,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-label\",\n              children: [(minSupport * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 584,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.01\",\n              max: \"0.5\",\n              step: \"0.01\",\n              value: minSupport,\n              onChange: handleSupportChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-name\",\n              children: \"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 593,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 583,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-label\",\n              children: [(minConfidence * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 596,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.01\",\n              max: \"0.9\",\n              step: \"0.01\",\n              value: minConfidence,\n              onChange: handleConfidenceChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-name\",\n              children: \"\\uCD5C\\uC18C \\uC2E0\\uB8B0\\uB3C4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-label\",\n              children: maxDepth\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"3\",\n              max: \"100\",\n              step: \"1\",\n              value: maxDepth,\n              onChange: handleDepthChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"threshold-name\",\n              children: \"\\uCD5C\\uB300 \\uD328\\uD134 \\uAE4A\\uC774\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 582,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-empty\",\n      children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 624,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          position: relative;\n        }\n        \n        .mining-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 10px;\n          background-color: #ffffff;\n          border-bottom: 1px solid #eee;\n          z-index: 2;\n          position: sticky;\n          top: 0;\n        }\n        \n        .current-path {\n          font-size: 13px;\n          color: #555;\n          flex-grow: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        \n        .path-separator {\n          margin: 0 6px;\n          color: #999;\n        }\n        \n        .path-root {\n          font-weight: bold;\n        }\n        \n        .header-actions {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        \n        .reset-button {\n          background: #f5f5f5;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 3px 8px;\n          font-size: 11px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .reset-button:hover {\n          background: #eee;\n        }\n        \n        .settings-button {\n          background: none;\n          border: none;\n          font-size: 16px;\n          cursor: pointer;\n          padding: 4px 8px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        }\n        \n        .settings-button:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .mining-tree-container {\n          flex-grow: 1;\n          overflow: auto;\n          background-color: #ffffff;\n          padding: 15px 10px 10px 10px;\n          border: 1px solid #e0e0e0;\n          border-top: none;\n        }\n        \n        .div-tree {\n          width: 100%;\n          position: relative;\n          padding-left: 10px;\n        }\n        \n        /* Tree node styling */\n        .tree-node-div {\n          position: relative;\n          margin-bottom: 12px;\n          cursor: pointer;\n        }\n        \n        .node-content {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 8px 12px;\n          background-color: #ffffff;\n          border: 1px solid #ddd;\n          border-radius: 6px;\n          min-height: 34px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.06);\n          transition: all 0.2s ease;\n        }\n        \n        .root-node .node-content {\n          background-color: #f8f9fa;\n          border-color: #d8dcde;\n        }\n        \n        .node-highlighted .node-content {\n          background-color: #e6f3ff;\n          border-color: #3498db;\n          box-shadow: 0 1px 4px rgba(52, 152, 219, 0.15);\n        }\n        \n        .node-text {\n          flex-grow: 1;\n          font-size: 13px;\n          color: #333;\n          margin-right: 10px;\n        }\n        \n        .node-actions {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        \n        .support-value {\n          font-size: 12px;\n          color: #555;\n          min-width: 20px;\n          text-align: right;\n          font-weight: 500;\n        }\n        \n        .ignore-button, .expand-button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 20px;\n          height: 20px;\n          font-size: 11px;\n          background: #f5f5f5;\n          border: 1px solid #ddd;\n          border-radius: 50%;\n          cursor: pointer;\n          padding: 0;\n          transition: all 0.2s ease;\n        }\n        \n        .ignore-button:hover {\n          background: #fee;\n          color: #e74c3c;\n          border-color: #e74c3c;\n        }\n        \n        .expand-button:hover {\n          background: #eee;\n          border-color: #bbb;\n        }\n        \n        /* Tree connector styling - improved */\n        .tree-connector {\n          position: absolute;\n          left: -15px;\n          top: 17px;\n          width: 15px;\n          height: calc(100% - 17px);\n          overflow: visible;\n        }\n        \n        .vertical-line {\n          position: absolute;\n          left: 0;\n          top: -17px;\n          width: 1px;\n          height: 17px;\n          background-color: #e0e0e0;\n        }\n        \n        .horizontal-line {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 15px;\n          height: 1px;\n          background-color: #e0e0e0;\n        }\n        \n        .connector-highlighted .vertical-line,\n        .connector-highlighted .horizontal-line {\n          background-color: #3498db;\n        }\n        \n        .node-children {\n          position: relative;\n          margin-top: 6px;\n        }\n        \n        .settings-panel {\n          position: absolute;\n          top: 45px;\n          right: 10px;\n          width: 280px;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 3px 12px rgba(0,0,0,0.15);\n          z-index: 10;\n          overflow: hidden;\n        }\n        \n        .settings-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 12px 15px;\n          background: #f8f9fa;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .settings-header h3 {\n          margin: 0;\n          font-size: 14px;\n          color: #333;\n        }\n        \n        .close-button {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .settings-content {\n          padding: 15px;\n        }\n        \n        .threshold-item {\n          margin-bottom: 15px;\n        }\n        \n        .threshold-label {\n          font-size: 13px;\n          font-weight: bold;\n          color: #333;\n          margin-bottom: 4px;\n          text-align: right;\n        }\n        \n        .threshold-name {\n          font-size: 12px;\n          color: #666;\n          margin-top: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .pattern-notification {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          background: rgba(52, 152, 219, 0.95);\n          color: white;\n          padding: 10px 15px;\n          border-radius: 8px;\n          font-size: 13px;\n          z-index: 1000;\n          transition: opacity 0.3s;\n          opacity: 1;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n        }\n        \n        .ignore-notification {\n          background: rgba(231, 76, 60, 0.95);\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 631,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 535,\n    columnNumber: 5\n  }, this);\n};\n_s(MiningView, \"YWxVYhH/5g1/VOrppmGfB4B69HM=\");\n_c = MiningView;\nexport default MiningView;\nvar _c;\n$RefreshReg$(_c, \"MiningView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","jsxDEV","_jsxDEV","MiningView","combinationHeaders","loading","error","testMode","onPatternSelect","_s","miningData","setMiningData","expandedNodes","setExpandedNodes","highlightedPattern","setHighlightedPattern","algorithm","setAlgorithm","minSupport","setMinSupport","minConfidence","setMinConfidence","maxDepth","setMaxDepth","currentPath","setCurrentPath","showSettings","setShowSettings","ignoredNodes","setIgnoredNodes","treeContainerRef","console","log","isNodeIgnored","nodeId","includes","length","generateMiningData","combinationData","algo","transactions","filter","item","header_group","map","split","itemCounts","totalTransactions","forEach","transaction","minSupportCount","Math","max","floor","frequentItems","Object","keys","sort","a","b","tidLists","Set","tid","add","rootItem","rootSupport","size","singleTreeRoot","id","name","support","confidence","children","buildOrderedTree","currentNode","currentPrefix","currentTids","level","currentItemIndex","indexOf","i","nextItem","nextItemTids","intersection","has","newPrefix","childNode","push","initialExpanded","slice","child","orderedTransactions","patternSupports","j","pattern","key","join","buildOrderedFPTree","patternKey","toggleNode","prev","ignoreNode","warn","newIgnored","parts","nodeName","showNotification","message","type","existingNotifications","document","querySelectorAll","n","parentNode","removeChild","notification","createElement","className","textContent","body","appendChild","setTimeout","style","opacity","getPathToRoot","path","segment","reverse","sendPatternToAPI","node","patternParts","filteredPattern","part","patternString","toggleSettings","handleSupportChange","e","value","parseFloat","target","isNaN","handleConfidenceChange","handleDepthChange","parseInt","renderTreeNode","isExpanded","isHighlighted","handleNodeMouseEnter","simplifiedPath","handleNodeMouseLeave","handleNodeClick","closest","handleToggleClick","stopPropagation","handleIgnoreClick","displayText","substring","hasParent","marginLeft","onMouseEnter","onMouseLeave","onClick","fileName","_jsxFileName","lineNumber","columnNumber","fontWeight","title","index","ref","toFixed","min","step","onChange","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\n\nconst MiningView = ({ combinationHeaders, loading, error, testMode, onPatternSelect }) => {\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('fpgrowth'); // Only use FP-Growth\n  const [minSupport, setMinSupport] = useState(0.01); // Changed to 1% default\n  const [minConfidence, setMinConfidence] = useState(0.01); // Changed to 1% default\n  const [maxDepth, setMaxDepth] = useState(100); // No practical limit\n  const [currentPath, setCurrentPath] = useState([]);\n  const [showSettings, setShowSettings] = useState(false);\n  const [ignoredNodes, setIgnoredNodes] = useState([]); // 배열로 변경\n  const treeContainerRef = useRef(null);\n  \n  // 콘솔에 prop 확인 로그\n  useEffect(() => {\n    console.log('onPatternSelect prop:', onPatternSelect);\n    console.log('combinationHeaders:', combinationHeaders);\n  }, [onPatternSelect, combinationHeaders]);\n\n  // 메모이즈된 무시 노드 확인 함수\n  const isNodeIgnored = useCallback((nodeId) => {\n    return ignoredNodes.includes(nodeId);\n  }, [ignoredNodes]);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n  \n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    \n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    \n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n    \n    // Build a single hierarchical tree structure instead of multiple independent trees\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n      \n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      \n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n      \n      // Create a single root node representing the most frequent item\n      const rootItem = frequentItems[0];\n      const rootSupport = tidLists[rootItem].size;\n      \n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: rootSupport,\n        confidence: rootSupport / totalTransactions,\n        children: []\n      };\n      \n      // Build a tree structure following the frequency order of items\n      const buildOrderedTree = (currentNode, currentPrefix, currentTids, level) => {\n        if (level >= maxDepth) return;\n        \n        // Find index of the current node's item in the frequentItems list\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        \n        // Check for next items in the frequency order\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          const nextItemTids = tidLists[nextItem];\n          \n          // Calculate intersection\n          const intersection = new Set([...currentTids].filter(tid => nextItemTids.has(tid)));\n          const support = intersection.size;\n          \n          // Add to tree if support is sufficient\n          if (support >= Math.max(2, minSupportCount)) {\n            const newPrefix = [...currentPrefix, nextItem];\n            const confidence = support / currentTids.size;\n            \n            // Add only if confidence is sufficient (reduced for deeper patterns)\n            if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              \n              currentNode.children.push(childNode);\n              \n              // Recursively build tree with this child as new parent\n              buildOrderedTree(childNode, newPrefix, intersection, level + 1);\n            }\n          }\n        }\n      };\n      \n      // Start building the tree from the root\n      buildOrderedTree(singleTreeRoot, [rootItem], tidLists[rootItem], 1);\n      \n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n      \n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n          \n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n      \n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n      \n    } else {\n      // FP-GROWTH for a single hierarchical tree\n      \n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction\n          .filter(item => frequentItems.includes(item))\n          .sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n      \n      // Create a single root node for the most frequent item\n      const rootItem = frequentItems[0];\n      \n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: itemCounts[rootItem],\n        confidence: itemCounts[rootItem] / totalTransactions,\n        children: []\n      };\n      \n      // Create a mapping of patterns to their support count\n      const patternSupports = {};\n      \n      // First pass - gather all pattern supports\n      orderedTransactions.forEach(transaction => {\n        if (transaction.length < 2) return;\n        \n        for (let i = 0; i < transaction.length; i++) {\n          for (let j = i + 1; j < transaction.length; j++) {\n            const pattern = [transaction[i], transaction[j]];\n            const key = pattern.join('-');\n            patternSupports[key] = (patternSupports[key] || 0) + 1;\n          }\n        }\n      });\n      \n      // Then build tree with those precomputed pattern supports\n      const buildOrderedFPTree = (currentNode, level) => {\n        if (level >= maxDepth) return;\n        \n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        \n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          \n          // Check if the pair meets minimum support\n          const patternKey = [currentNode.name, nextItem].join('-');\n          const support = patternSupports[patternKey] || 0;\n          \n          if (support >= Math.max(2, minSupportCount)) {\n            const confidence = support / itemCounts[currentNode.name];\n            \n            if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              \n              currentNode.children.push(childNode);\n              buildOrderedFPTree(childNode, level + 1);\n            }\n          }\n        }\n      };\n      \n      // Start building the tree from the root\n      buildOrderedFPTree(singleTreeRoot, 1);\n      \n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n      \n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n          \n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n      \n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    console.log('Toggle node expansion:', nodeId);\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Function to ignore a node\n  const ignoreNode = (nodeId) => {\n    if (!nodeId) {\n      console.warn('ignoreNode: nodeId is undefined');\n      return;\n    }\n    \n    console.log('Ignoring node:', nodeId);\n    \n    // 배열로 상태 업데이트 - React가 확실히 변경을 감지\n    setIgnoredNodes(prev => {\n      if (prev.includes(nodeId)) {\n        return prev; // 이미 무시 중이면 변경하지 않음\n      }\n      \n      const newIgnored = [...prev, nodeId]; // 새 배열 생성\n      console.log('New ignored nodes:', newIgnored);\n      \n      // 피드백 표시\n      const parts = nodeId.split('-');\n      const nodeName = parts[parts.length - 1];\n      showNotification(`'${nodeName}' 노드가 무시됨`, 'ignore');\n      \n      return newIgnored;\n    });\n  };\n  \n  // 알림 표시 함수\n  const showNotification = (message, type = 'normal') => {\n    // 이전 알림 제거\n    const existingNotifications = document.querySelectorAll('.pattern-notification');\n    existingNotifications.forEach(n => {\n      if (n.parentNode) {\n        n.parentNode.removeChild(n);\n      }\n    });\n    \n    // 새 알림 생성\n    const notification = document.createElement('div');\n    notification.className = `pattern-notification ${type === 'ignore' ? 'ignore-notification' : ''}`;\n    notification.textContent = message;\n    document.body.appendChild(notification);\n    \n    setTimeout(() => {\n      notification.style.opacity = '0';\n      setTimeout(() => {\n        if (notification.parentNode) {\n          document.body.removeChild(notification);\n        }\n      }, 300);\n    }, 2000);\n  };\n  \n  // Function to get path from node to root\n  const getPathToRoot = (nodeId) => {\n    const parts = nodeId.split('-');\n    const path = [];\n    \n    for (let i = 0; i < parts.length; i++) {\n      const segment = parts.slice(0, i + 1).join('-');\n      path.push(segment);\n    }\n    \n    return path.reverse(); // 루트에서 노드까지의 경로\n  };\n  \n  // Function to send pattern to API\n  const sendPatternToAPI = (node) => {\n    console.log('sendPatternToAPI called with node:', node);\n    \n    if (!node || !node.id) {\n      console.warn('Invalid node:', node);\n      return;\n    }\n    \n    // 콜백 함수 확인\n    if (typeof onPatternSelect !== 'function') {\n      console.warn('onPatternSelect is not a function:', onPatternSelect);\n      showNotification('패턴 선택 핸들러가 없습니다', 'ignore');\n      return;\n    }\n    \n    // Get full pattern from node ID (splitting by dash)\n    const patternParts = node.id.split('-');\n    \n    // Filter out ignored nodes\n    const filteredPattern = patternParts.filter(part => !ignoredNodes.includes(part));\n    \n    // Sort pattern alphabetically if needed (주석 처리했으나 필요시 활성화)\n    // filteredPattern.sort();\n    \n    // Join with delimiter\n    const patternString = filteredPattern.join('|');\n    \n    console.log('Pattern to send:', patternString);\n    \n    // 패턴이 비어있는지 확인\n    if (!patternString) {\n      console.warn('Pattern is empty after filtering ignored nodes');\n      showNotification('선택한 패턴이 비어 있습니다', 'ignore');\n      return;\n    }\n    \n    // 패턴 전송\n    try {\n      onPatternSelect(patternString);\n      console.log('Pattern sent successfully:', patternString);\n      showNotification(`패턴 선택됨: ${patternString}`);\n    } catch (error) {\n      console.error('Error sending pattern:', error);\n      showNotification('패턴 전송 중 오류 발생', 'ignore');\n    }\n  };\n\n  // Toggle settings panel\n  const toggleSettings = () => {\n    setShowSettings(prev => !prev);\n  };\n\n  // Setup initial path on first render\n  useEffect(() => {\n    if (miningData && miningData.length > 0) {\n      // Set initial path to root node\n      const rootItem = miningData[0].name;\n      setCurrentPath([rootItem]);\n    }\n  }, [miningData]);\n  \n  // Change minimum support threshold\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  \n  // Change minimum confidence threshold\n  const handleConfidenceChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n  \n  // Change maximum depth\n  const handleDepthChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Recursive function to render tree nodes using divs\n  const renderTreeNode = (node, level) => {\n    if (!node || isNodeIgnored(node.id)) return null;\n    \n    const isExpanded = expandedNodes[node.id] || false;\n    const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n    \n    const handleNodeMouseEnter = () => {\n      // Find path from node to root\n      const path = getPathToRoot(node.id);\n      setHighlightedPattern(path);\n      \n      // Extract only the item names for the path display\n      const simplifiedPath = path.map(id => {\n        const parts = id.split('-');\n        return parts[parts.length - 1];\n      });\n      \n      setCurrentPath(simplifiedPath);\n    };\n    \n    const handleNodeMouseLeave = () => {\n      setHighlightedPattern(null);\n      // Keep current path visible\n    };\n    \n    const handleNodeClick = (e) => {\n      if (e.target.closest('.ignore-button') || e.target.closest('.expand-button')) {\n        // Ignore clicks on buttons\n        return;\n      }\n      \n      // Handle node selection\n      console.log('Node clicked:', node.id);\n      sendPatternToAPI(node);\n      \n      // Set this node's path as the highlighted pattern\n      const path = getPathToRoot(node.id);\n      setHighlightedPattern(path);\n    };\n    \n    const handleToggleClick = (e) => {\n      e.stopPropagation();\n      toggleNode(node.id);\n    };\n    \n    const handleIgnoreClick = (e) => {\n      e.stopPropagation();\n      ignoreNode(node.id);\n    };\n    \n    // Truncate display text if too long\n    let displayText = node.name;\n    if (displayText.length > 25) {\n      displayText = displayText.substring(0, 23) + '...';\n    }\n    \n    // Calculate connection lines position\n    const hasParent = node.id.includes('-');\n    \n    return (\n      <div \n        key={node.id}\n        className={`tree-node-div ${isHighlighted ? 'node-highlighted' : ''} ${level === 0 ? 'root-node' : ''}`}\n        style={{ marginLeft: level * 30 }}\n        onMouseEnter={handleNodeMouseEnter}\n        onMouseLeave={handleNodeMouseLeave}\n        onClick={handleNodeClick}\n      >\n        {/* Tree connector line */}\n        {hasParent && (\n          <div className={`tree-connector ${isHighlighted ? 'connector-highlighted' : ''}`}>\n            <span className=\"vertical-line\"></span>\n            <span className=\"horizontal-line\"></span>\n          </div>\n        )}\n        \n        <div className=\"node-content\">\n          <span className=\"node-text\" style={{ fontWeight: level === 0 ? 'bold' : 'normal' }}>\n            {displayText}\n          </span>\n          <div className=\"node-actions\">\n            <span className=\"support-value\">{node.support}</span>\n            <button \n              className=\"ignore-button\" \n              onClick={handleIgnoreClick}\n              title=\"이 노드 무시하기\"\n            >\n              ✕\n            </button>\n            {node.children && node.children.length > 0 && (\n              <button \n                className=\"expand-button\" \n                onClick={handleToggleClick}\n                title={isExpanded ? \"접기\" : \"펼치기\"}\n              >\n                {isExpanded ? '−' : '+'}\n              </button>\n            )}\n          </div>\n        </div>\n        \n        {/* Children */}\n        {isExpanded && node.children && node.children.length > 0 && (\n          <div className=\"node-children\">\n            {node.children\n              .sort((a, b) => b.support - a.support)\n              .map(child => renderTreeNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"tab-content\">\n      {loading ? (\n        <div className=\"loading\">로딩 중...</div>\n      ) : error ? (\n        <div className=\"error\">에러: {error}</div>\n      ) : combinationHeaders && combinationHeaders.length > 0 ? (\n        <div className=\"mining-view\">\n          <div className=\"mining-header\">\n            <div className=\"current-path\">\n              {currentPath.map((item, index) => (\n                <span key={item + index}>\n                  {index > 0 && <span className=\"path-separator\">→</span>}\n                  <span className={index === 0 ? \"path-root\" : \"\"}>{item}</span>\n                </span>\n              ))}\n            </div>\n            <div className=\"header-actions\">\n              {ignoredNodes.length > 0 && (\n              <button \n                  className=\"reset-button\" \n                  onClick={() => {\n                    console.log('Reset ignored nodes');\n                    setIgnoredNodes([]);\n                    showNotification('무시된 노드를 모두 초기화했습니다');\n                  }}\n                >\n                  무시 초기화 ({ignoredNodes.length})\n              </button>\n              )}\n              <button className=\"settings-button\" onClick={toggleSettings}>\n                ⚙️\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"mining-tree-container\" ref={treeContainerRef}>\n            <div className=\"div-tree\">\n              {miningData && miningData.map(node => renderTreeNode(node, 0))}\n            </div>\n          </div>\n          \n          {showSettings && (\n            <div className=\"settings-panel\">\n              <div className=\"settings-header\">\n                <h3>패턴 설정</h3>\n                <button className=\"close-button\" onClick={toggleSettings}>×</button>\n              </div>\n              <div className=\"settings-content\">\n              <div className=\"threshold-item\">\n                  <div className=\"threshold-label\">{(minSupport * 100).toFixed(0)}%</div>\n                <input \n                  type=\"range\" \n                  min=\"0.01\" \n                  max=\"0.5\" \n                    step=\"0.01\" \n                  value={minSupport}\n                  onChange={handleSupportChange}\n                />\n                  <div className=\"threshold-name\">최소 지지도</div>\n              </div>\n              <div className=\"threshold-item\">\n                  <div className=\"threshold-label\">{(minConfidence * 100).toFixed(0)}%</div>\n                <input \n                  type=\"range\" \n                  min=\"0.01\" \n                  max=\"0.9\" \n                    step=\"0.01\" \n                  value={minConfidence}\n                  onChange={handleConfidenceChange}\n                />\n                  <div className=\"threshold-name\">최소 신뢰도</div>\n              </div>\n              <div className=\"threshold-item\">\n                  <div className=\"threshold-label\">{maxDepth}</div>\n                <input \n                  type=\"range\" \n                  min=\"3\" \n                    max=\"100\" \n                  step=\"1\" \n                  value={maxDepth}\n                  onChange={handleDepthChange}\n                />\n                  <div className=\"threshold-name\">최대 패턴 깊이</div>\n              </div>\n            </div>\n          </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"column-empty\">\n          {testMode \n            ? \"마이닝 데이터를 로딩 중입니다...\" \n            : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          position: relative;\n        }\n        \n        .mining-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 8px 10px;\n          background-color: #ffffff;\n          border-bottom: 1px solid #eee;\n          z-index: 2;\n          position: sticky;\n          top: 0;\n        }\n        \n        .current-path {\n          font-size: 13px;\n          color: #555;\n          flex-grow: 1;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        \n        .path-separator {\n          margin: 0 6px;\n          color: #999;\n        }\n        \n        .path-root {\n          font-weight: bold;\n        }\n        \n        .header-actions {\n          display: flex;\n          align-items: center;\n          gap: 8px;\n        }\n        \n        .reset-button {\n          background: #f5f5f5;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 3px 8px;\n          font-size: 11px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .reset-button:hover {\n          background: #eee;\n        }\n        \n        .settings-button {\n          background: none;\n          border: none;\n          font-size: 16px;\n          cursor: pointer;\n          padding: 4px 8px;\n          border-radius: 4px;\n          transition: background-color 0.2s;\n        }\n        \n        .settings-button:hover {\n          background-color: #f5f5f5;\n        }\n        \n        .mining-tree-container {\n          flex-grow: 1;\n          overflow: auto;\n          background-color: #ffffff;\n          padding: 15px 10px 10px 10px;\n          border: 1px solid #e0e0e0;\n          border-top: none;\n        }\n        \n        .div-tree {\n          width: 100%;\n          position: relative;\n          padding-left: 10px;\n        }\n        \n        /* Tree node styling */\n        .tree-node-div {\n          position: relative;\n          margin-bottom: 12px;\n          cursor: pointer;\n        }\n        \n        .node-content {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding: 8px 12px;\n          background-color: #ffffff;\n          border: 1px solid #ddd;\n          border-radius: 6px;\n          min-height: 34px;\n          box-shadow: 0 1px 3px rgba(0,0,0,0.06);\n          transition: all 0.2s ease;\n        }\n        \n        .root-node .node-content {\n          background-color: #f8f9fa;\n          border-color: #d8dcde;\n        }\n        \n        .node-highlighted .node-content {\n          background-color: #e6f3ff;\n          border-color: #3498db;\n          box-shadow: 0 1px 4px rgba(52, 152, 219, 0.15);\n        }\n        \n        .node-text {\n          flex-grow: 1;\n          font-size: 13px;\n          color: #333;\n          margin-right: 10px;\n        }\n        \n        .node-actions {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        \n        .support-value {\n          font-size: 12px;\n          color: #555;\n          min-width: 20px;\n          text-align: right;\n          font-weight: 500;\n        }\n        \n        .ignore-button, .expand-button {\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          width: 20px;\n          height: 20px;\n          font-size: 11px;\n          background: #f5f5f5;\n          border: 1px solid #ddd;\n          border-radius: 50%;\n          cursor: pointer;\n          padding: 0;\n          transition: all 0.2s ease;\n        }\n        \n        .ignore-button:hover {\n          background: #fee;\n          color: #e74c3c;\n          border-color: #e74c3c;\n        }\n        \n        .expand-button:hover {\n          background: #eee;\n          border-color: #bbb;\n        }\n        \n        /* Tree connector styling - improved */\n        .tree-connector {\n          position: absolute;\n          left: -15px;\n          top: 17px;\n          width: 15px;\n          height: calc(100% - 17px);\n          overflow: visible;\n        }\n        \n        .vertical-line {\n          position: absolute;\n          left: 0;\n          top: -17px;\n          width: 1px;\n          height: 17px;\n          background-color: #e0e0e0;\n        }\n        \n        .horizontal-line {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 15px;\n          height: 1px;\n          background-color: #e0e0e0;\n        }\n        \n        .connector-highlighted .vertical-line,\n        .connector-highlighted .horizontal-line {\n          background-color: #3498db;\n        }\n        \n        .node-children {\n          position: relative;\n          margin-top: 6px;\n        }\n        \n        .settings-panel {\n          position: absolute;\n          top: 45px;\n          right: 10px;\n          width: 280px;\n          background: white;\n          border-radius: 8px;\n          box-shadow: 0 3px 12px rgba(0,0,0,0.15);\n          z-index: 10;\n          overflow: hidden;\n        }\n        \n        .settings-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 12px 15px;\n          background: #f8f9fa;\n          border-bottom: 1px solid #eee;\n        }\n        \n        .settings-header h3 {\n          margin: 0;\n          font-size: 14px;\n          color: #333;\n        }\n        \n        .close-button {\n          background: none;\n          border: none;\n          font-size: 18px;\n          cursor: pointer;\n          color: #666;\n        }\n        \n        .settings-content {\n          padding: 15px;\n        }\n        \n        .threshold-item {\n          margin-bottom: 15px;\n        }\n        \n        .threshold-label {\n          font-size: 13px;\n          font-weight: bold;\n          color: #333;\n          margin-bottom: 4px;\n          text-align: right;\n        }\n        \n        .threshold-name {\n          font-size: 12px;\n          color: #666;\n          margin-top: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .pattern-notification {\n          position: fixed;\n          bottom: 20px;\n          right: 20px;\n          background: rgba(52, 152, 219, 0.95);\n          color: white;\n          padding: 10px 15px;\n          border-radius: 8px;\n          font-size: 13px;\n          z-index: 1000;\n          transition: opacity 0.3s;\n          opacity: 1;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.2);\n        }\n        \n        .ignore-notification {\n          background: rgba(231, 76, 60, 0.95);\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default MiningView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}