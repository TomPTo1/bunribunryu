{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/FileExplorerColumn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './FileExplorerColumn.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileExplorerColumn = () => {\n  _s();\n  // Initialize with sample data from the src/browse_mode_sample_data directory\n  const [files, setFiles] = useState([{\n    id: 'root',\n    name: 'browse_mode_sample_data',\n    type: 'folder',\n    isOpen: true,\n    children: [{\n      id: 'product',\n      name: '상품',\n      type: 'folder',\n      isOpen: false,\n      children: [{\n        id: 'coupang',\n        name: '쿠팡.xlsx',\n        type: 'file'\n      }]\n    }]\n  }]);\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Mock function to simulate fetching files from a real filesystem\n  // In a real app, this would use an API call to get the actual directory structure\n  const fetchFileStructure = () => {\n    // The initial files state already contains our mock structure\n    // In a real implementation, this would be an API call to the backend\n    console.log(\"Fetched file structure from src/browse_mode_sample_data\");\n  };\n  useEffect(() => {\n    // Simulate fetching the file structure when component mounts\n    fetchFileStructure();\n  }, []);\n  const toggleFolder = id => {\n    setFiles(prevFiles => {\n      const updateNode = nodes => {\n        return nodes.map(node => {\n          if (node.id === id) {\n            return {\n              ...node,\n              isOpen: !node.isOpen\n            };\n          }\n          if (node.children) {\n            return {\n              ...node,\n              children: updateNode(node.children)\n            };\n          }\n          return node;\n        });\n      };\n      return updateNode(prevFiles);\n    });\n  };\n  const handleSearchChange = e => {\n    setSearchTerm(e.target.value);\n  };\n  const filterFilesBySearch = (nodes, term) => {\n    if (!term) return nodes;\n    const filterNodes = nodeList => {\n      return nodeList.filter(node => {\n        const nameMatch = node.name.toLowerCase().includes(term.toLowerCase());\n        if (node.children && node.children.length > 0) {\n          const filteredChildren = filterNodes(node.children);\n          if (filteredChildren.length > 0) {\n            node.children = filteredChildren;\n            node.isOpen = true; // Open folders that have matching children\n            return true;\n          }\n        }\n        return nameMatch;\n      });\n    };\n    return filterNodes([...nodes]);\n  };\n  const renderTree = nodes => {\n    return nodes.map(node => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tree-item ${node.type}`,\n        onClick: () => node.type === 'folder' && toggleFolder(node.id),\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon\",\n          children: node.type === 'folder' ? node.isOpen ? '📂' : '📁' : getFileIcon(node.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name\",\n          children: node.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), node.type === 'folder' && node.isOpen && node.children && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-children\",\n        children: renderTree(node.children)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Helper function to get appropriate icon based on file extension\n  const getFileIcon = filename => {\n    const extension = filename.split('.').pop().toLowerCase();\n    switch (extension) {\n      case 'pdf':\n        return '📕';\n      case 'doc':\n      case 'docx':\n        return '📘';\n      case 'xls':\n      case 'xlsx':\n        return '📗';\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return '🖼️';\n      case 'txt':\n        return '📄';\n      case 'json':\n        return '📋';\n      default:\n        return '📄';\n    }\n  };\n  const filteredFiles = searchTerm ? filterFilesBySearch(files, searchTerm) : files;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column file-explorer-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"File Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search files...\",\n        value: searchTerm,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"file-path\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \"src/browse_mode_sample_data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-view\",\n      children: renderTree(filteredFiles)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(FileExplorerColumn, \"dw3xeja49mqJ3SbA9tku8mDW/zk=\");\n_c = FileExplorerColumn;\nexport default FileExplorerColumn;\nvar _c;\n$RefreshReg$(_c, \"FileExplorerColumn\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","FileExplorerColumn","_s","files","setFiles","id","name","type","isOpen","children","searchTerm","setSearchTerm","fetchFileStructure","console","log","toggleFolder","prevFiles","updateNode","nodes","map","node","handleSearchChange","e","target","value","filterFilesBySearch","term","filterNodes","nodeList","filter","nameMatch","toLowerCase","includes","length","filteredChildren","renderTree","className","onClick","getFileIcon","fileName","_jsxFileName","lineNumber","columnNumber","filename","extension","split","pop","filteredFiles","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/FileExplorerColumn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './FileExplorerColumn.css';\n\nconst FileExplorerColumn = () => {\n  // Initialize with sample data from the src/browse_mode_sample_data directory\n  const [files, setFiles] = useState([\n    {\n      id: 'root',\n      name: 'browse_mode_sample_data',\n      type: 'folder',\n      isOpen: true,\n      children: [\n        {\n          id: 'product',\n          name: '상품',\n          type: 'folder',\n          isOpen: false,\n          children: [\n            { id: 'coupang', name: '쿠팡.xlsx', type: 'file' }\n          ]\n        }\n      ]\n    }\n  ]);\n\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Mock function to simulate fetching files from a real filesystem\n  // In a real app, this would use an API call to get the actual directory structure\n  const fetchFileStructure = () => {\n    // The initial files state already contains our mock structure\n    // In a real implementation, this would be an API call to the backend\n    console.log(\"Fetched file structure from src/browse_mode_sample_data\");\n  };\n\n  useEffect(() => {\n    // Simulate fetching the file structure when component mounts\n    fetchFileStructure();\n  }, []);\n\n  const toggleFolder = (id) => {\n    setFiles(prevFiles => {\n      const updateNode = (nodes) => {\n        return nodes.map(node => {\n          if (node.id === id) {\n            return { ...node, isOpen: !node.isOpen };\n          }\n          if (node.children) {\n            return { ...node, children: updateNode(node.children) };\n          }\n          return node;\n        });\n      };\n      return updateNode(prevFiles);\n    });\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const filterFilesBySearch = (nodes, term) => {\n    if (!term) return nodes;\n\n    const filterNodes = (nodeList) => {\n      return nodeList.filter(node => {\n        const nameMatch = node.name.toLowerCase().includes(term.toLowerCase());\n        \n        if (node.children && node.children.length > 0) {\n          const filteredChildren = filterNodes(node.children);\n          if (filteredChildren.length > 0) {\n            node.children = filteredChildren;\n            node.isOpen = true; // Open folders that have matching children\n            return true;\n          }\n        }\n        \n        return nameMatch;\n      });\n    };\n\n    return filterNodes([...nodes]);\n  };\n\n  const renderTree = (nodes) => {\n    return nodes.map(node => (\n      <div key={node.id} className=\"tree-node\">\n        <div \n          className={`tree-item ${node.type}`}\n          onClick={() => node.type === 'folder' && toggleFolder(node.id)}\n        >\n          <span className=\"icon\">\n            {node.type === 'folder' ? (node.isOpen ? '📂' : '📁') : getFileIcon(node.name)}\n          </span>\n          <span className=\"name\">{node.name}</span>\n        </div>\n        {node.type === 'folder' && node.isOpen && node.children && (\n          <div className=\"tree-children\">\n            {renderTree(node.children)}\n          </div>\n        )}\n      </div>\n    ));\n  };\n\n  // Helper function to get appropriate icon based on file extension\n  const getFileIcon = (filename) => {\n    const extension = filename.split('.').pop().toLowerCase();\n    \n    switch (extension) {\n      case 'pdf':\n        return '📕';\n      case 'doc':\n      case 'docx':\n        return '📘';\n      case 'xls':\n      case 'xlsx':\n        return '📗';\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return '🖼️';\n      case 'txt':\n        return '📄';\n      case 'json':\n        return '📋';\n      default:\n        return '📄';\n    }\n  };\n\n  const filteredFiles = searchTerm \n    ? filterFilesBySearch(files, searchTerm) \n    : files;\n\n  return (\n    <div className=\"column file-explorer-column\">\n      <h3>File Explorer</h3>\n      <div className=\"search-box\">\n        <input \n          type=\"text\" \n          placeholder=\"Search files...\" \n          value={searchTerm}\n          onChange={handleSearchChange}\n        />\n      </div>\n      <div className=\"file-path\">\n        <span>src/browse_mode_sample_data</span>\n      </div>\n      <div className=\"tree-view\">\n        {renderTree(filteredFiles)}\n      </div>\n    </div>\n  );\n};\n\nexport default FileExplorerColumn; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}