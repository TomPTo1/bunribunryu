{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/HeaderList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { fetchHeaderList, searchHeaderList, fetchHeaderSimilarityList } from '../services/api';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderList = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  channel,\n  onHeaderSelect,\n  selectedHeader,\n  similarityGroups,\n  headerSearchTerm,\n  onSimilarityGroupUpdate,\n  onRemoveGroup,\n  similarityViewTrigger,\n  onSimilarityViewProcessed\n}, ref) => {\n  _s();\n  const [headers, setHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('all'); // 'all', 'withGroup', or 'withoutGroup'\n  const [headerToGroupMap, setHeaderToGroupMap] = useState({});\n  const [groupedHeaders, setGroupedHeaders] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isSearchMode, setIsSearchMode] = useState(false);\n  const [ignoreHeaderSearchTerm, setIgnoreHeaderSearchTerm] = useState(false);\n  const [searchTimeout, setSearchTimeout] = useState(null);\n\n  // Similar header selection states\n  const [similarHeaders, setSimilarHeaders] = useState([]);\n  const [filteredSimilarHeaders, setFilteredSimilarHeaders] = useState([]);\n  const [selectedSimilarityGroup, setSelectedSimilarityGroup] = useState([]);\n  const [representativeHeader, setRepresentativeHeader] = useState(null);\n  const [isSelectedGroupCollapsed, setIsSelectedGroupCollapsed] = useState(false);\n  const [similarHeaderLoading, setSimilarHeaderLoading] = useState(false);\n  const [similarHeaderError, setSimilarHeaderError] = useState(null);\n  const [currentSimilarityHeader, setCurrentSimilarityHeader] = useState(null);\n\n  // 마지막 클릭된 헤더와 타임스탬프를 저장\n  const lastClickRef = useRef({\n    header: null,\n    timestamp: 0\n  });\n\n  // Expose functions to parent component\n  useImperativeHandle(ref, () => ({\n    viewSimilarHeaders: header => {\n      fetchSimilarHeaders(header);\n      setCurrentSimilarityHeader(header);\n    }\n  }));\n\n  // Handle headerSearchTerm updates from right-clicks in other components\n  useEffect(() => {\n    if (!headerSearchTerm || ignoreHeaderSearchTerm) {\n      return;\n    }\n    setSearchTerm(headerSearchTerm);\n    setIsSearchMode(true);\n  }, [headerSearchTerm, ignoreHeaderSearchTerm]);\n\n  // Handle similarity view trigger from HeaderCombinationList\n  useEffect(() => {\n    if (similarityViewTrigger && channel) {\n      fetchSimilarHeaders(similarityViewTrigger);\n      setCurrentSimilarityHeader(similarityViewTrigger);\n\n      // Call the callback to reset the trigger\n      if (onSimilarityViewProcessed) {\n        onSimilarityViewProcessed();\n      }\n    }\n  }, [similarityViewTrigger, channel]);\n  useEffect(() => {\n    if (!channel) return;\n    const getHeaders = async () => {\n      setLoading(true);\n      try {\n        let response;\n        if (isSearchMode && searchTerm.trim()) {\n          // Use search API with keyword\n          response = await searchHeaderList(channel, searchTerm);\n        } else {\n          // Use regular API without keyword\n          response = await fetchHeaderList(channel);\n        }\n        console.log('Header list response:', response);\n        setHeaders(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setHeaders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getHeaders();\n  }, [channel, searchTerm, isSearchMode]);\n\n  // Handle search form submission\n  const handleSearchSubmit = async e => {\n    e.preventDefault();\n    console.log('Search form submitted with term:', searchTerm);\n    if (searchTerm.trim()) {\n      setIsSearchMode(true);\n\n      // Perform the search and get the direct results\n      const searchResults = await performApiSearch(searchTerm);\n      console.log('Got search results directly:', searchResults);\n\n      // Check if we have results and set the first one as the target\n      if (searchResults && searchResults.length > 0) {\n        const targetHeader = searchResults[0].header;\n        console.log('Setting target header from search:', targetHeader);\n\n        // Set the target header as current similarity header\n        setCurrentSimilarityHeader(targetHeader);\n\n        // Clear any existing selection\n        setSelectedSimilarityGroup([]);\n        setRepresentativeHeader(null);\n\n        // Load similar headers for the selected target\n        console.log('Fetching similar headers for target:', targetHeader);\n        await fetchSimilarHeaders(targetHeader);\n        console.log('Finished fetching similar headers');\n      } else {\n        console.log('No search results found to set as target');\n      }\n    } else {\n      setIsSearchMode(false);\n    }\n  };\n\n  // Handle search input change with debouncing\n  const handleSimilarHeaderSearch = e => {\n    const searchValue = e.target.value;\n    setSearchTerm(searchValue);\n\n    // Clear any existing timeout\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n    if (!searchValue.trim()) {\n      setIsSearchMode(false);\n\n      // If search is cleared, revert to showing similar headers for the current header\n      if (currentSimilarityHeader) {\n        fetchSimilarHeaders(currentSimilarityHeader);\n      } else {\n        setFilteredSimilarHeaders([]);\n      }\n    } else {\n      setIsSearchMode(true);\n\n      // Set a new timeout to delay the API call\n      const timeoutId = setTimeout(() => {\n        performApiSearch(searchValue);\n      }, 500); // 500ms debounce delay\n\n      setSearchTimeout(timeoutId);\n    }\n  };\n\n  // Perform API search for headers\n  const performApiSearch = async query => {\n    if (!channel || !query.trim()) return;\n    setSimilarHeaderLoading(true);\n    try {\n      // Use the searchHeaderList API instead of local filtering\n      const response = await searchHeaderList(channel, query);\n      console.log('Search results:', response);\n      const headerList = response.list || [];\n      setSimilarHeaders(headerList);\n      setFilteredSimilarHeaders(headerList);\n      setSimilarHeaderError(null);\n      return headerList; // Return the results for the caller\n    } catch (err) {\n      setSimilarHeaderError(`검색 오류: ${err.message}`);\n      setSimilarHeaders([]);\n      setFilteredSimilarHeaders([]);\n      return []; // Return empty array in case of error\n    } finally {\n      setSimilarHeaderLoading(false);\n    }\n  };\n\n  // Clear search button handler with proper state updates\n  const handleClearSearch = () => {\n    setSearchTerm('');\n    setIsSearchMode(false);\n    setIgnoreHeaderSearchTerm(true);\n\n    // If clearing search, reload the original similar headers\n    if (currentSimilarityHeader) {\n      fetchSimilarHeaders(currentSimilarityHeader);\n    }\n\n    // Also notify parent to clear headerSearchTerm\n    if (onSimilarityViewProcessed) {\n      onSimilarityViewProcessed(true);\n    }\n  };\n\n  // 유사군이 변경될 때마다 관련 데이터를 업데이트\n  useEffect(() => {\n    console.log('HeaderList - similarityGroups 변경감지:', similarityGroups);\n\n    // 유사군에 포함된 모든 헤더 추출\n    const newGroupedHeaders = similarityGroups && similarityGroups.length > 0 ? similarityGroups.flatMap(group =>\n    // 대표어를 제외한 헤더만 포함\n    group.items.filter(item => item.header !== group.representative).map(item => item.header)) : [];\n\n    // 각 헤더별로 유사군 매핑 생성\n    const newHeaderToGroupMap = {};\n    if (similarityGroups && similarityGroups.length > 0) {\n      similarityGroups.forEach((group, idx) => {\n        console.log(`HeaderList - 유사군 #${idx + 1} 처리:`, group.representative, group.items.length);\n\n        // 대표어에 유사군 카운트 태그 추가\n        newHeaderToGroupMap[group.representative] = {\n          isRepresentative: true,\n          count: group.items.length\n        };\n\n        // 대표어가 아닌 항목들은 매핑에서 제외 (목록에 표시되지 않음)\n        group.items.forEach(item => {\n          if (item.header !== group.representative) {\n            newHeaderToGroupMap[item.header] = {\n              representative: group.representative,\n              count: group.items.length\n            };\n          }\n        });\n      });\n    }\n    console.log('HeaderList - headerToGroupMap 업데이트:', newHeaderToGroupMap);\n    console.log('HeaderList - groupedHeaders 업데이트:', newGroupedHeaders);\n    setGroupedHeaders(newGroupedHeaders);\n    setHeaderToGroupMap(newHeaderToGroupMap);\n  }, [similarityGroups]);\n  const fetchSimilarHeaders = async header => {\n    if (!channel || !header) return;\n    setSimilarHeaderLoading(true);\n    try {\n      const response = await fetchHeaderSimilarityList(channel, header);\n      console.log('Similar headers response:', response);\n      const headerList = response.list || [];\n      setSimilarHeaders(headerList);\n      setFilteredSimilarHeaders(headerList);\n      setSimilarHeaderError(null);\n\n      // Ensure we exit search mode when viewing similar headers\n      setIsSearchMode(false);\n      return headerList;\n    } catch (err) {\n      setSimilarHeaderError(err.message);\n      setSimilarHeaders([]);\n      setFilteredSimilarHeaders([]);\n      return [];\n    } finally {\n      setSimilarHeaderLoading(false);\n    }\n  };\n  const handleSimilarHeaderSelect = (header, setAsRepresentative = false) => {\n    // 중복 클릭 방지 및 디바운싱\n    const now = Date.now();\n    if (lastClickRef.current.header === header && now - lastClickRef.current.timestamp < 500) {\n      // 0.5초 이내에 동일한 헤더를 다시 클릭한 경우 무시\n      return;\n    }\n\n    // 클릭 정보 업데이트\n    lastClickRef.current = {\n      header,\n      timestamp: now\n    };\n\n    // 버그 수정: 중복 호출 방지를 위한 체크 추가\n    const headerObj = similarHeaders.find(h => h.header === header);\n    if (!headerObj) return; // 헤더가 존재하지 않으면 무시\n\n    // 이미 선택된 헤더인지 확인\n    const isAlreadySelected = selectedSimilarityGroup.some(h => h.header === header);\n    const isRepresentative = representativeHeader === header;\n    if (isAlreadySelected) {\n      if (setAsRepresentative && !isRepresentative) {\n        // 이미 선택된 헤더를 대표어로 설정 (우클릭)\n        setRepresentativeHeader(header);\n      } else {\n        // 이미 선택된 헤더의 선택 해제 (다시 클릭)\n        const newGroup = selectedSimilarityGroup.filter(h => h.header !== header);\n        setSelectedSimilarityGroup(newGroup);\n\n        // 대표어가 제거된 경우 새로운 대표어 선택\n        if (isRepresentative && newGroup.length > 0) {\n          setRepresentativeHeader(newGroup[0].header);\n        } else if (isRepresentative) {\n          setRepresentativeHeader(null);\n        }\n      }\n    } else {\n      // 선택되지 않은 경우, 선택에 추가\n      const newGroup = [...selectedSimilarityGroup, headerObj];\n      setSelectedSimilarityGroup(newGroup);\n\n      // 우클릭인 경우에만 대표어로 설정 (명시적으로 로직 분리)\n      if (setAsRepresentative) {\n        // 우클릭 - 대표어로 설정\n        setRepresentativeHeader(header);\n      }\n      // 좌클릭은 단순히 선택만 되고 대표어로 설정되지 않음\n    }\n  };\n  const handleRemoveFromGroup = header => {\n    setSelectedSimilarityGroup(prev => prev.filter(h => h.header !== header));\n    // If representative header is removed, reset it\n    if (representativeHeader === header) {\n      setRepresentativeHeader(selectedSimilarityGroup.length > 1 ? selectedSimilarityGroup[0].header : null);\n    }\n  };\n  const handleSetRepresentative = header => {\n    setRepresentativeHeader(header);\n  };\n  const handleSaveGroup = () => {\n    if (selectedSimilarityGroup.length > 0 && representativeHeader) {\n      // 유사군 데이터를 일관된 형식으로 변환\n      const groupData = selectedSimilarityGroup.map(item => ({\n        header: item.header,\n        // 기타 필요한 속성 유지\n        ...item\n      }));\n\n      // 선택한 그룹에 현재 선택한 헤더가 없다면 추가\n      const hasCurrentHeader = groupData.some(item => item.header === currentSimilarityHeader);\n      if (!hasCurrentHeader && currentSimilarityHeader) {\n        groupData.push({\n          header: currentSimilarityHeader\n        });\n      }\n      console.log('저장할 유사군 데이터:', groupData, representativeHeader);\n      onSimilarityGroupUpdate && onSimilarityGroupUpdate(groupData, representativeHeader);\n    }\n  };\n\n  // 유사군에 속하지 않거나 대표어인 헤더만 표시\n  const filteredHeaders = headers.filter(item => !groupedHeaders.includes(item.header));\n\n  // 유사군이 있는 헤더 (대표어)와 없는 헤더를 구분\n  const headersWithGroups = filteredHeaders.filter(item => headerToGroupMap[item.header] && headerToGroupMap[item.header].isRepresentative);\n  const headersWithoutGroups = filteredHeaders.filter(item => !headerToGroupMap[item.header] || !headerToGroupMap[item.header].isRepresentative);\n  if (!channel) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uCC44\\uB110\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Create a list of all headers that are already part of saved groups\n  const savedGroupHeaders = similarityGroups ? similarityGroups.flatMap(group => group.items.map(item => item.header)) : [];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container similarity-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"column-title\",\n      children: [\"\\uD5E4\\uB354 \\uAD00\\uB9AC\", currentSimilarityHeader && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"title-path\",\n        title: currentSimilarityHeader,\n        children: [\": \", currentSimilarityHeader]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSearchSubmit,\n      className: \"search-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search-input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: searchTerm,\n          onChange: handleSimilarHeaderSearch,\n          placeholder: \"\\uD5E4\\uB354 \\uAC80\\uC0C9 (\\uC5D4\\uD130: \\uCCAB\\uBC88\\uC9F8 \\uACB0\\uACFC \\uC120\\uD0DD)\",\n          className: \"search-input\",\n          readOnly: false\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), isSearchMode && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"search-result-count\",\n          children: [filteredSimilarHeaders.length, \"\\uAC74\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 13\n        }, this), isSearchMode && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-search-button\",\n          onClick: handleClearSearch,\n          title: \"\\uAC80\\uC0C9 \\uCDE8\\uC18C\",\n          children: \"\\u2715\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"search-button\",\n        title: \"\\uC5D4\\uD130: \\uCCAB\\uBC88\\uC9F8 \\uACB0\\uACFC \\uC120\\uD0DD\",\n        children: \"\\uAC80\\uC0C9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-content\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"similarity-vertical-layout\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"similarity-header-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"group-subtitle\",\n            children: [isSearchMode && !currentSimilarityHeader ? \"검색 결과\" : currentSimilarityHeader ? `\"${currentSimilarityHeader}\" 유사 헤더 선택` : \"유사 헤더 선택\", selectedSimilarityGroup.length >= 2 && representativeHeader && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"save-group-btn action-btn header-action-btn\",\n              onClick: handleSaveGroup,\n              title: \"\\uD604\\uC7AC \\uC120\\uD0DD\\uB41C \\uC720\\uC0AC \\uD5E4\\uB354\\uB97C \\uADF8\\uB8F9\\uC73C\\uB85C \\uC800\\uC7A5\\uD569\\uB2C8\\uB2E4\",\n              children: [\"\\uC720\\uC0AC\\uAD70 \\uC800\\uC7A5 (\", selectedSimilarityGroup.length, \"\\uAC1C)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 442,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 435,\n            columnNumber: 13\n          }, this), !isSearchMode && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"click-guide\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"guide-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"guide-icon\",\n                children: \"\\uD83D\\uDDB1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 454,\n                columnNumber: 46\n              }, this), \" \\uC88C\\uD074\\uB9AD: \\uC720\\uC0AC\\uC5B4 \\uC120\\uD0DD\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"guide-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"guide-icon\",\n                children: \"\\uD83D\\uDDB1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 455,\n                columnNumber: 46\n              }, this), \" \\uC6B0\\uD074\\uB9AD: \\uB300\\uD45C\\uC5B4 \\uC120\\uD0DD\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"guide-item\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"guide-icon\",\n                children: \"\\uD83D\\uDDB1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 46\n              }, this), \" \\uC7AC\\uD074\\uB9AD: \\uC120\\uD0DD \\uD574\\uC81C\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 453,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"similarity-items\",\n            children: similarHeaderLoading ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"loading\",\n              children: \"\\uB85C\\uB529 \\uC911...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 17\n            }, this) : similarHeaderError ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"error\",\n              children: [\"\\uC5D0\\uB7EC: \", similarHeaderError]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 464,\n              columnNumber: 17\n            }, this) : filteredSimilarHeaders && filteredSimilarHeaders.length > 0 ? filteredSimilarHeaders.map((item, index) => {\n              // 이미 선택된 항목인지 확인\n              const isSelected = selectedSimilarityGroup.some(h => h.header === item.header);\n              // 대표 헤더인지 확인\n              const isRepresentative = representativeHeader === item.header;\n              // 현재 타겟 헤더인지 확인\n              const isTarget = currentSimilarityHeader === item.header;\n\n              // 이미 저장된 그룹에 있는지 확인\n              const isSavedInGroup = savedGroupHeaders.includes(item.header);\n\n              // 선택 상태 클래스 결정\n              let statusClass = '';\n              if (isSelected) {\n                statusClass = isRepresentative ? 'representative' : 'similar';\n              } else if (isSavedInGroup) {\n                // 저장된 그룹에 있지만 현재 선택되지 않은 항목\n                const savedGroupInfo = similarityGroups.find(group => group.items.some(g => g.header === item.header));\n                if (savedGroupInfo) {\n                  statusClass = savedGroupInfo.representative === item.header ? 'saved-representative' : 'saved-similar';\n                }\n              }\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `similarity-item ${statusClass} ${isTarget ? 'targeted' : ''}`,\n                onClick: () => handleSimilarHeaderSelect(item.header, false),\n                onContextMenu: e => {\n                  e.preventDefault(); // 기본 컨텍스트 메뉴 방지\n                  handleSimilarHeaderSelect(item.header, true);\n                },\n                children: [item.header, isSelected && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: `status-badge ${isRepresentative ? 'representative' : 'similar'}`,\n                  children: isRepresentative ? '대' : '유'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 503,\n                  columnNumber: 25\n                }, this), !isSelected && isSavedInGroup && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"status-badge saved\",\n                  children: similarityGroups.find(group => group.items.some(g => g.header === item.header) && group.representative === item.header) ? '대' : '유'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 508,\n                  columnNumber: 25\n                }, this), isTarget && !isSelected && !isSavedInGroup && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"status-badge target\",\n                  children: \"\\uD0C0\\uAC9F\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 516,\n                  columnNumber: 25\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 21\n              }, this);\n            }) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-state\",\n              children: isSearchMode ? '검색 결과가 없습니다.' : currentSimilarityHeader ? '유사한 헤더가 없습니다.' : '헤더를 선택하면 유사 헤더 목록이 표시됩니다.'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 434,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'all' ? 'active' : ''}`,\n        onClick: () => setActiveTab('all'),\n        children: [\"\\uC804\\uCCB4 (\", filteredHeaders.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'withGroup' ? 'active' : ''}`,\n        onClick: () => setActiveTab('withGroup'),\n        children: [\"\\uC720\\uC0AC\\uAD70 \\uC788\\uC74C (\", headersWithGroups.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'withoutGroup' ? 'active' : ''}`,\n        onClick: () => setActiveTab('withoutGroup'),\n        children: [\"\\uC720\\uC0AC\\uAD70 \\uC5C6\\uC74C (\", headersWithoutGroups.length, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 394,\n    columnNumber: 5\n  }, this);\n}, \"2LQ8lreyCiX0XNhCrOIWROkQadM=\")), \"2LQ8lreyCiX0XNhCrOIWROkQadM=\");\n_c2 = HeaderList;\nexport default HeaderList;\nvar _c, _c2;\n$RefreshReg$(_c, \"HeaderList$forwardRef\");\n$RefreshReg$(_c2, \"HeaderList\");","map":{"version":3,"names":["React","useState","useEffect","useRef","forwardRef","useImperativeHandle","fetchHeaderList","searchHeaderList","fetchHeaderSimilarityList","jsxDEV","_jsxDEV","HeaderList","_s","_c","channel","onHeaderSelect","selectedHeader","similarityGroups","headerSearchTerm","onSimilarityGroupUpdate","onRemoveGroup","similarityViewTrigger","onSimilarityViewProcessed","ref","headers","setHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","headerToGroupMap","setHeaderToGroupMap","groupedHeaders","setGroupedHeaders","searchTerm","setSearchTerm","isSearchMode","setIsSearchMode","ignoreHeaderSearchTerm","setIgnoreHeaderSearchTerm","searchTimeout","setSearchTimeout","similarHeaders","setSimilarHeaders","filteredSimilarHeaders","setFilteredSimilarHeaders","selectedSimilarityGroup","setSelectedSimilarityGroup","representativeHeader","setRepresentativeHeader","isSelectedGroupCollapsed","setIsSelectedGroupCollapsed","similarHeaderLoading","setSimilarHeaderLoading","similarHeaderError","setSimilarHeaderError","currentSimilarityHeader","setCurrentSimilarityHeader","lastClickRef","header","timestamp","viewSimilarHeaders","fetchSimilarHeaders","getHeaders","response","trim","console","log","list","err","message","handleSearchSubmit","e","preventDefault","searchResults","performApiSearch","length","targetHeader","handleSimilarHeaderSearch","searchValue","target","value","clearTimeout","timeoutId","setTimeout","query","headerList","handleClearSearch","newGroupedHeaders","flatMap","group","items","filter","item","representative","map","newHeaderToGroupMap","forEach","idx","isRepresentative","count","handleSimilarHeaderSelect","setAsRepresentative","now","Date","current","headerObj","find","h","isAlreadySelected","some","newGroup","handleRemoveFromGroup","prev","handleSetRepresentative","handleSaveGroup","groupData","hasCurrentHeader","push","filteredHeaders","includes","headersWithGroups","headersWithoutGroups","className","children","fileName","_jsxFileName","lineNumber","columnNumber","savedGroupHeaders","title","onSubmit","type","onChange","placeholder","readOnly","onClick","index","isSelected","isTarget","isSavedInGroup","statusClass","savedGroupInfo","g","onContextMenu","_c2","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/HeaderList.js"],"sourcesContent":["import React, { useState, useEffect, useRef, forwardRef, useImperativeHandle } from 'react';\nimport { fetchHeaderList, searchHeaderList, fetchHeaderSimilarityList } from '../services/api';\nimport './Column.css';\n\nconst HeaderList = forwardRef(({ \n  channel, \n  onHeaderSelect, \n  selectedHeader, \n  similarityGroups, \n  headerSearchTerm, \n  onSimilarityGroupUpdate,\n  onRemoveGroup,\n  similarityViewTrigger,\n  onSimilarityViewProcessed\n}, ref) => {\n  const [headers, setHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('all'); // 'all', 'withGroup', or 'withoutGroup'\n  const [headerToGroupMap, setHeaderToGroupMap] = useState({});\n  const [groupedHeaders, setGroupedHeaders] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isSearchMode, setIsSearchMode] = useState(false);\n  const [ignoreHeaderSearchTerm, setIgnoreHeaderSearchTerm] = useState(false);\n  const [searchTimeout, setSearchTimeout] = useState(null);\n  \n  // Similar header selection states\n  const [similarHeaders, setSimilarHeaders] = useState([]);\n  const [filteredSimilarHeaders, setFilteredSimilarHeaders] = useState([]);\n  const [selectedSimilarityGroup, setSelectedSimilarityGroup] = useState([]);\n  const [representativeHeader, setRepresentativeHeader] = useState(null);\n  const [isSelectedGroupCollapsed, setIsSelectedGroupCollapsed] = useState(false);\n  const [similarHeaderLoading, setSimilarHeaderLoading] = useState(false);\n  const [similarHeaderError, setSimilarHeaderError] = useState(null);\n  const [currentSimilarityHeader, setCurrentSimilarityHeader] = useState(null);\n  \n  // 마지막 클릭된 헤더와 타임스탬프를 저장\n  const lastClickRef = useRef({ header: null, timestamp: 0 });\n\n  // Expose functions to parent component\n  useImperativeHandle(ref, () => ({\n    viewSimilarHeaders: (header) => {\n      fetchSimilarHeaders(header);\n      setCurrentSimilarityHeader(header);\n    }\n  }));\n\n  // Handle headerSearchTerm updates from right-clicks in other components\n  useEffect(() => {\n    if (!headerSearchTerm || ignoreHeaderSearchTerm) {\n      return;\n    }\n    \n    setSearchTerm(headerSearchTerm);\n    setIsSearchMode(true);\n  }, [headerSearchTerm, ignoreHeaderSearchTerm]);\n  \n  // Handle similarity view trigger from HeaderCombinationList\n  useEffect(() => {\n    if (similarityViewTrigger && channel) {\n      fetchSimilarHeaders(similarityViewTrigger);\n      setCurrentSimilarityHeader(similarityViewTrigger);\n      \n      // Call the callback to reset the trigger\n      if (onSimilarityViewProcessed) {\n        onSimilarityViewProcessed();\n      }\n    }\n  }, [similarityViewTrigger, channel]);\n\n  useEffect(() => {\n    if (!channel) return;\n    \n    const getHeaders = async () => {\n      setLoading(true);\n      try {\n        let response;\n        if (isSearchMode && searchTerm.trim()) {\n          // Use search API with keyword\n          response = await searchHeaderList(channel, searchTerm);\n        } else {\n          // Use regular API without keyword\n          response = await fetchHeaderList(channel);\n        }\n        console.log('Header list response:', response);\n        setHeaders(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setHeaders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getHeaders();\n  }, [channel, searchTerm, isSearchMode]);\n\n  // Handle search form submission\n  const handleSearchSubmit = async (e) => {\n    e.preventDefault();\n    console.log('Search form submitted with term:', searchTerm);\n    \n    if (searchTerm.trim()) {\n      setIsSearchMode(true);\n      \n      // Perform the search and get the direct results\n      const searchResults = await performApiSearch(searchTerm);\n      console.log('Got search results directly:', searchResults);\n      \n      // Check if we have results and set the first one as the target\n      if (searchResults && searchResults.length > 0) {\n        const targetHeader = searchResults[0].header;\n        console.log('Setting target header from search:', targetHeader);\n        \n        // Set the target header as current similarity header\n        setCurrentSimilarityHeader(targetHeader);\n        \n        // Clear any existing selection\n        setSelectedSimilarityGroup([]);\n        setRepresentativeHeader(null);\n        \n        // Load similar headers for the selected target\n        console.log('Fetching similar headers for target:', targetHeader);\n        await fetchSimilarHeaders(targetHeader);\n        console.log('Finished fetching similar headers');\n      } else {\n        console.log('No search results found to set as target');\n      }\n    } else {\n      setIsSearchMode(false);\n    }\n  };\n\n  // Handle search input change with debouncing\n  const handleSimilarHeaderSearch = (e) => {\n    const searchValue = e.target.value;\n    setSearchTerm(searchValue);\n    \n    // Clear any existing timeout\n    if (searchTimeout) {\n      clearTimeout(searchTimeout);\n    }\n    \n    if (!searchValue.trim()) {\n      setIsSearchMode(false);\n      \n      // If search is cleared, revert to showing similar headers for the current header\n      if (currentSimilarityHeader) {\n        fetchSimilarHeaders(currentSimilarityHeader);\n      } else {\n        setFilteredSimilarHeaders([]);\n      }\n    } else {\n      setIsSearchMode(true);\n      \n      // Set a new timeout to delay the API call\n      const timeoutId = setTimeout(() => {\n        performApiSearch(searchValue);\n      }, 500); // 500ms debounce delay\n      \n      setSearchTimeout(timeoutId);\n    }\n  };\n  \n  // Perform API search for headers\n  const performApiSearch = async (query) => {\n    if (!channel || !query.trim()) return;\n    \n    setSimilarHeaderLoading(true);\n    try {\n      // Use the searchHeaderList API instead of local filtering\n      const response = await searchHeaderList(channel, query);\n      console.log('Search results:', response);\n      const headerList = response.list || [];\n      setSimilarHeaders(headerList);\n      setFilteredSimilarHeaders(headerList);\n      setSimilarHeaderError(null);\n      \n      return headerList; // Return the results for the caller\n    } catch (err) {\n      setSimilarHeaderError(`검색 오류: ${err.message}`);\n      setSimilarHeaders([]);\n      setFilteredSimilarHeaders([]);\n      return []; // Return empty array in case of error\n    } finally {\n      setSimilarHeaderLoading(false);\n    }\n  };\n  \n  // Clear search button handler with proper state updates\n  const handleClearSearch = () => {\n    setSearchTerm('');\n    setIsSearchMode(false);\n    setIgnoreHeaderSearchTerm(true);\n    \n    // If clearing search, reload the original similar headers\n    if (currentSimilarityHeader) {\n      fetchSimilarHeaders(currentSimilarityHeader);\n    }\n    \n    // Also notify parent to clear headerSearchTerm\n    if (onSimilarityViewProcessed) {\n      onSimilarityViewProcessed(true);\n    }\n  };\n\n  // 유사군이 변경될 때마다 관련 데이터를 업데이트\n  useEffect(() => {\n    console.log('HeaderList - similarityGroups 변경감지:', similarityGroups);\n    \n    // 유사군에 포함된 모든 헤더 추출\n    const newGroupedHeaders = similarityGroups && similarityGroups.length > 0\n      ? similarityGroups.flatMap(group => \n          // 대표어를 제외한 헤더만 포함\n          group.items\n            .filter(item => item.header !== group.representative)\n            .map(item => item.header)\n        )\n      : [];\n    \n    // 각 헤더별로 유사군 매핑 생성\n    const newHeaderToGroupMap = {};\n    if (similarityGroups && similarityGroups.length > 0) {\n      similarityGroups.forEach((group, idx) => {\n        console.log(`HeaderList - 유사군 #${idx + 1} 처리:`, group.representative, group.items.length);\n        \n        // 대표어에 유사군 카운트 태그 추가\n        newHeaderToGroupMap[group.representative] = {\n          isRepresentative: true,\n          count: group.items.length\n        };\n        \n        // 대표어가 아닌 항목들은 매핑에서 제외 (목록에 표시되지 않음)\n        group.items.forEach(item => {\n          if (item.header !== group.representative) {\n            newHeaderToGroupMap[item.header] = {\n              representative: group.representative,\n              count: group.items.length\n            };\n          }\n        });\n      });\n    }\n    \n    console.log('HeaderList - headerToGroupMap 업데이트:', newHeaderToGroupMap);\n    console.log('HeaderList - groupedHeaders 업데이트:', newGroupedHeaders);\n    \n    setGroupedHeaders(newGroupedHeaders);\n    setHeaderToGroupMap(newHeaderToGroupMap);\n  }, [similarityGroups]);\n\n  const fetchSimilarHeaders = async (header) => {\n    if (!channel || !header) return;\n    \n    setSimilarHeaderLoading(true);\n    try {\n      const response = await fetchHeaderSimilarityList(channel, header);\n      console.log('Similar headers response:', response);\n      const headerList = response.list || [];\n      setSimilarHeaders(headerList);\n      setFilteredSimilarHeaders(headerList);\n      setSimilarHeaderError(null);\n      \n      // Ensure we exit search mode when viewing similar headers\n      setIsSearchMode(false);\n      \n      return headerList;\n    } catch (err) {\n      setSimilarHeaderError(err.message);\n      setSimilarHeaders([]);\n      setFilteredSimilarHeaders([]);\n      return [];\n    } finally {\n      setSimilarHeaderLoading(false);\n    }\n  };\n  \n  const handleSimilarHeaderSelect = (header, setAsRepresentative = false) => {\n    // 중복 클릭 방지 및 디바운싱\n    const now = Date.now();\n    if (lastClickRef.current.header === header && \n        now - lastClickRef.current.timestamp < 500) {\n      // 0.5초 이내에 동일한 헤더를 다시 클릭한 경우 무시\n      return;\n    }\n    \n    // 클릭 정보 업데이트\n    lastClickRef.current = { header, timestamp: now };\n    \n    // 버그 수정: 중복 호출 방지를 위한 체크 추가\n    const headerObj = similarHeaders.find(h => h.header === header);\n    \n    if (!headerObj) return; // 헤더가 존재하지 않으면 무시\n\n    // 이미 선택된 헤더인지 확인\n    const isAlreadySelected = selectedSimilarityGroup.some(h => h.header === header);\n    const isRepresentative = representativeHeader === header;\n    \n    if (isAlreadySelected) {\n      if (setAsRepresentative && !isRepresentative) {\n        // 이미 선택된 헤더를 대표어로 설정 (우클릭)\n        setRepresentativeHeader(header);\n      } else {\n        // 이미 선택된 헤더의 선택 해제 (다시 클릭)\n        const newGroup = selectedSimilarityGroup.filter(h => h.header !== header);\n        setSelectedSimilarityGroup(newGroup);\n        \n        // 대표어가 제거된 경우 새로운 대표어 선택\n        if (isRepresentative && newGroup.length > 0) {\n          setRepresentativeHeader(newGroup[0].header);\n        } else if (isRepresentative) {\n          setRepresentativeHeader(null);\n        }\n      }\n    } else {\n      // 선택되지 않은 경우, 선택에 추가\n      const newGroup = [...selectedSimilarityGroup, headerObj];\n      setSelectedSimilarityGroup(newGroup);\n      \n      // 우클릭인 경우에만 대표어로 설정 (명시적으로 로직 분리)\n      if (setAsRepresentative) {\n        // 우클릭 - 대표어로 설정\n        setRepresentativeHeader(header);\n      }\n      // 좌클릭은 단순히 선택만 되고 대표어로 설정되지 않음\n    }\n  };\n  \n  const handleRemoveFromGroup = (header) => {\n    setSelectedSimilarityGroup(prev => prev.filter(h => h.header !== header));\n    // If representative header is removed, reset it\n    if (representativeHeader === header) {\n      setRepresentativeHeader(selectedSimilarityGroup.length > 1 ? selectedSimilarityGroup[0].header : null);\n    }\n  };\n  \n  const handleSetRepresentative = (header) => {\n    setRepresentativeHeader(header);\n  };\n  \n  const handleSaveGroup = () => {\n    if (selectedSimilarityGroup.length > 0 && representativeHeader) {\n      // 유사군 데이터를 일관된 형식으로 변환\n      const groupData = selectedSimilarityGroup.map(item => ({\n        header: item.header,\n        // 기타 필요한 속성 유지\n        ...item\n      }));\n      \n      // 선택한 그룹에 현재 선택한 헤더가 없다면 추가\n      const hasCurrentHeader = groupData.some(item => item.header === currentSimilarityHeader);\n      if (!hasCurrentHeader && currentSimilarityHeader) {\n        groupData.push({ header: currentSimilarityHeader });\n      }\n      \n      console.log('저장할 유사군 데이터:', groupData, representativeHeader);\n      \n      onSimilarityGroupUpdate && onSimilarityGroupUpdate(\n        groupData, \n        representativeHeader\n      );\n    }\n  };\n\n  // 유사군에 속하지 않거나 대표어인 헤더만 표시\n  const filteredHeaders = headers.filter(item => \n    !groupedHeaders.includes(item.header)\n  );\n\n  // 유사군이 있는 헤더 (대표어)와 없는 헤더를 구분\n  const headersWithGroups = filteredHeaders.filter(item => \n    headerToGroupMap[item.header] && headerToGroupMap[item.header].isRepresentative\n  );\n  \n  const headersWithoutGroups = filteredHeaders.filter(item => \n    !headerToGroupMap[item.header] || !headerToGroupMap[item.header].isRepresentative\n  );\n\n  if (!channel) {\n    return (\n      <div className=\"column-container\">\n        <div className=\"column-empty\">채널을 선택해주세요.</div>\n      </div>\n    );\n  }\n\n  // Create a list of all headers that are already part of saved groups\n  const savedGroupHeaders = similarityGroups ? similarityGroups.flatMap(group => \n    group.items.map(item => item.header)\n  ) : [];\n\n  return (\n    <div className=\"column-container similarity-view\">\n      <h2 className=\"column-title\">\n        헤더 관리\n        {currentSimilarityHeader && (\n          <span className=\"title-path\" title={currentSimilarityHeader}>\n            : {currentSimilarityHeader}\n          </span>\n        )}\n      </h2>\n      \n      <form onSubmit={handleSearchSubmit} className=\"search-form\">\n        <div className=\"search-input-container\">\n          <input\n            type=\"text\"\n            value={searchTerm}\n            onChange={handleSimilarHeaderSearch}\n            placeholder=\"헤더 검색 (엔터: 첫번째 결과 선택)\"\n            className=\"search-input\"\n            readOnly={false} \n          />\n          {isSearchMode && (\n            <div className=\"search-result-count\">\n              {filteredSimilarHeaders.length}건\n            </div>\n          )}\n          {isSearchMode && (\n            <button \n              className=\"clear-search-button\" \n              onClick={handleClearSearch}\n              title=\"검색 취소\"\n            >\n              ✕\n            </button>\n          )}\n        </div>\n        <button type=\"submit\" className=\"search-button\" title=\"엔터: 첫번째 결과 선택\">검색</button>\n      </form>\n      \n      <div className=\"column-content\">\n        <div className=\"similarity-vertical-layout\">\n          <div className=\"similarity-header-section\">\n            <h3 className=\"group-subtitle\">\n              {isSearchMode && !currentSimilarityHeader \n                ? \"검색 결과\" \n                : currentSimilarityHeader \n                  ? `\"${currentSimilarityHeader}\" 유사 헤더 선택` \n                  : \"유사 헤더 선택\"}\n              {selectedSimilarityGroup.length >= 2 && representativeHeader && (\n                <button \n                  className=\"save-group-btn action-btn header-action-btn\"\n                  onClick={handleSaveGroup}\n                  title=\"현재 선택된 유사 헤더를 그룹으로 저장합니다\"\n                >\n                  유사군 저장 ({selectedSimilarityGroup.length}개)\n                </button>\n              )}\n            </h3>\n            \n            {!isSearchMode && (\n              <div className=\"click-guide\">\n                <span className=\"guide-item\"><span className=\"guide-icon\">🖱️</span> 좌클릭: 유사어 선택</span>\n                <span className=\"guide-item\"><span className=\"guide-icon\">🖱️</span> 우클릭: 대표어 선택</span>\n                <span className=\"guide-item\"><span className=\"guide-icon\">🖱️</span> 재클릭: 선택 해제</span>\n              </div>\n            )}\n            \n            <div className=\"similarity-items\">\n              {similarHeaderLoading ? (\n                <div className=\"loading\">로딩 중...</div>\n              ) : similarHeaderError ? (\n                <div className=\"error\">에러: {similarHeaderError}</div>\n              ) : filteredSimilarHeaders && filteredSimilarHeaders.length > 0 ? (\n                filteredSimilarHeaders.map((item, index) => {\n                  // 이미 선택된 항목인지 확인\n                  const isSelected = selectedSimilarityGroup.some(h => h.header === item.header);\n                  // 대표 헤더인지 확인\n                  const isRepresentative = representativeHeader === item.header;\n                  // 현재 타겟 헤더인지 확인\n                  const isTarget = currentSimilarityHeader === item.header;\n                  \n                  // 이미 저장된 그룹에 있는지 확인\n                  const isSavedInGroup = savedGroupHeaders.includes(item.header);\n                  \n                  // 선택 상태 클래스 결정\n                  let statusClass = '';\n                  if (isSelected) {\n                    statusClass = isRepresentative ? 'representative' : 'similar';\n                  } else if (isSavedInGroup) {\n                    // 저장된 그룹에 있지만 현재 선택되지 않은 항목\n                    const savedGroupInfo = similarityGroups.find(group => \n                      group.items.some(g => g.header === item.header)\n                    );\n                    if (savedGroupInfo) {\n                      statusClass = savedGroupInfo.representative === item.header ? 'saved-representative' : 'saved-similar';\n                    }\n                  }\n                  \n                  return (\n                    <div \n                      key={index} \n                      className={`similarity-item ${statusClass} ${isTarget ? 'targeted' : ''}`}\n                      onClick={() => handleSimilarHeaderSelect(item.header, false)}\n                      onContextMenu={(e) => {\n                        e.preventDefault(); // 기본 컨텍스트 메뉴 방지\n                        handleSimilarHeaderSelect(item.header, true);\n                      }}\n                    >\n                      {item.header}\n                      {isSelected && (\n                        <span className={`status-badge ${isRepresentative ? 'representative' : 'similar'}`}>\n                          {isRepresentative ? '대' : '유'}\n                        </span>\n                      )}\n                      {!isSelected && isSavedInGroup && (\n                        <span className=\"status-badge saved\">\n                          {similarityGroups.find(group => \n                            group.items.some(g => g.header === item.header) && \n                            group.representative === item.header\n                          ) ? '대' : '유'}\n                        </span>\n                      )}\n                      {isTarget && !isSelected && !isSavedInGroup && (\n                        <span className=\"status-badge target\">타겟</span>\n                      )}\n                    </div>\n                  );\n                })\n              ) : (\n                <div className=\"empty-state\">\n                  {isSearchMode \n                    ? '검색 결과가 없습니다.' \n                    : (currentSimilarityHeader \n                      ? '유사한 헤더가 없습니다.' \n                      : '헤더를 선택하면 유사 헤더 목록이 표시됩니다.')}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'all' ? 'active' : ''}`}\n          onClick={() => setActiveTab('all')}\n        >\n          전체 ({filteredHeaders.length})\n        </button>\n        <button \n          className={`tab ${activeTab === 'withGroup' ? 'active' : ''}`}\n          onClick={() => setActiveTab('withGroup')}\n        >\n          유사군 있음 ({headersWithGroups.length})\n        </button>\n        <button \n          className={`tab ${activeTab === 'withoutGroup' ? 'active' : ''}`}\n          onClick={() => setActiveTab('withoutGroup')}\n        >\n          유사군 없음 ({headersWithoutGroups.length})\n        </button>\n      </div>\n    </div>\n  );\n});\n\nexport default HeaderList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}