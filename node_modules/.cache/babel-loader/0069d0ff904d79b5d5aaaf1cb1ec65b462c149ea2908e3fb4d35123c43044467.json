{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/PathNavigation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fetchChannels, fetchHeaders, fetchCombinations, fetchSections } from '../services/api';\nimport './PathNavigation.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PathNavigation = ({\n  selectedChannel,\n  selectedHeader,\n  selectedCombination,\n  onChannelSelect,\n  onHeaderSelect,\n  onCombinationSelect,\n  viewMode,\n  onViewModeChange\n}) => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [headers, setHeaders] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [combinations, setCombinations] = useState([]);\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n\n  // Section related states\n  const [sections, setSections] = useState([]);\n  const [sectionLevels, setSectionLevels] = useState([]);\n  const [selectedSectionLevels, setSelectedSectionLevels] = useState([]);\n  const [selectedSection, setSelectedSection] = useState(null);\n  const [activePanelType, setActivePanelType] = useState(null); // 'channel' or 'section'\n\n  const navigationRef = useRef(null);\n\n  // Parse channel into hierarchical levels\n  const parseChannelLevels = channelList => {\n    const levelMap = {};\n    channelList.forEach(channel => {\n      const channelKey = channel.채널키;\n      if (!channelKey) return;\n      const levels = channelKey.split('_');\n\n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n\n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => item.name === level && item.parentPath === parentPath);\n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    return levelMap;\n  };\n\n  // Parse section into hierarchical levels (similar to parseChannelLevels)\n  const parseSectionLevels = sectionList => {\n    const levelMap = {};\n    sectionList.forEach(section => {\n      const sectionKey = section.섹션키;\n      if (!sectionKey) return;\n      const levels = sectionKey.split('_');\n\n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n\n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => item.name === level && item.parentPath === parentPath);\n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    return levelMap;\n  };\n\n  // Fetch channels on component mount\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        const response = await fetchChannels();\n        const channelList = response.list || [];\n        setChannels(channelList);\n\n        // Parse channel levels\n        const levels = parseChannelLevels(channelList);\n        setChannelLevels(levels);\n      } catch (error) {\n        console.error('Error fetching channels:', error);\n      }\n    };\n    getChannels();\n  }, []);\n\n  // Fetch sections on component mount\n  useEffect(() => {\n    const getSections = async () => {\n      try {\n        const response = await fetchSections();\n        const sectionList = response.list || [];\n        setSections(sectionList);\n\n        // Parse section levels\n        const levels = parseSectionLevels(sectionList);\n        setSectionLevels(levels);\n      } catch (error) {\n        console.error('Error fetching sections:', error);\n      }\n    };\n    getSections();\n  }, []);\n\n  // Fetch headers when a channel is selected\n  useEffect(() => {\n    if (selectedChannel) {\n      const getHeaders = async () => {\n        try {\n          const response = await fetchHeaders(selectedChannel);\n          setHeaders(response.list || []);\n        } catch (error) {\n          console.error('Error fetching headers:', error);\n        }\n      };\n      getHeaders();\n\n      // Update selected levels based on selected channel\n      const levels = selectedChannel.split('_');\n      setSelectedLevels(levels);\n    } else {\n      setHeaders([]);\n      setSelectedLevels([]);\n    }\n  }, [selectedChannel]);\n\n  // Fetch combinations when a header is selected\n  useEffect(() => {\n    if (selectedChannel && selectedHeader) {\n      const getCombinations = async () => {\n        try {\n          const response = await fetchCombinations(selectedChannel, selectedHeader);\n          setCombinations(response.list || []);\n        } catch (error) {\n          console.error('Error fetching combinations:', error);\n        }\n      };\n      getCombinations();\n    } else {\n      setCombinations([]);\n    }\n  }, [selectedChannel, selectedHeader]);\n\n  // Close navigation panel when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (navigationRef.current && !navigationRef.current.contains(event.target)) {\n        setShowNavigationPanel(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const toggleNavigationPanel = panelType => {\n    if (showNavigationPanel && activePanelType === panelType) {\n      setShowNavigationPanel(false);\n    } else {\n      setShowNavigationPanel(true);\n      setActivePanelType(panelType);\n    }\n  };\n  const handleLevelSelect = (level, index) => {\n    // Create a full channel path up to the selected level\n    const newSelectedLevels = [...selectedLevels];\n    newSelectedLevels[index] = level.name;\n\n    // Trim any levels after the selected index\n    const trimmedLevels = newSelectedLevels.slice(0, index + 1);\n    const newPath = trimmedLevels.join('_');\n\n    // Update selected levels first\n    setSelectedLevels(trimmedLevels);\n\n    // Find the full channel that matches this path\n    const channel = channels.find(c => c.채널키 === newPath);\n    if (channel) {\n      onChannelSelect(channel.채널키);\n      setShowNavigationPanel(false);\n    } else {\n      // If it's a partial path, we keep the navigation panel open\n      // to show lower levels without navigating away\n      const matchingChannel = channels.find(c => c.채널키.startsWith(newPath + '_'));\n      if (matchingChannel) {\n        // Don't call onChannelSelect yet, just update the local selectedLevels\n        // This allows users to see the next level before committing to a navigation\n      } else {\n        // If no matching channels at all, close the panel\n        setShowNavigationPanel(false);\n      }\n    }\n  };\n  const handleSectionLevelSelect = (level, index) => {\n    // Create a full section path up to the selected level\n    const newSelectedLevels = [...selectedSectionLevels];\n    newSelectedLevels[index] = level.name;\n\n    // Trim any levels after the selected index\n    const trimmedLevels = newSelectedLevels.slice(0, index + 1);\n    const newPath = trimmedLevels.join('_');\n\n    // Update selected levels first\n    setSelectedSectionLevels(trimmedLevels);\n\n    // Find the full section that matches this path\n    const section = sections.find(s => s.섹션키 === newPath);\n    if (section) {\n      setSelectedSection(section.섹션키);\n      setShowNavigationPanel(false);\n    } else {\n      // If it's a partial path, we keep the navigation panel open\n      // to show lower levels without navigating away\n      const matchingSection = sections.find(s => s.섹션키.startsWith(newPath + '_'));\n      if (matchingSection) {\n        // Don't call setSelectedSection yet, just update the local selectedSectionLevels\n        // This allows users to see the next level before committing to a navigation\n      } else {\n        // If no matching sections at all, close the panel\n        setShowNavigationPanel(false);\n      }\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const getFilteredLevelItems = levelIndex => {\n    if (!channelLevels[levelIndex]) return [];\n\n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return channelLevels[0];\n    }\n\n    // For deeper levels, filter based on parent path\n    const parentPath = selectedLevels.slice(0, levelIndex).join('_');\n    return channelLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n  const getFilteredSectionLevelItems = levelIndex => {\n    if (!sectionLevels[levelIndex]) return [];\n\n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return sectionLevels[0];\n    }\n\n    // For deeper levels, filter based on parent path\n    const parentPath = selectedSectionLevels.slice(0, levelIndex).join('_');\n    return sectionLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n  const renderChannelPath = () => {\n    if (!selectedChannel) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-button\",\n        onClick: () => toggleNavigationPanel('channel'),\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section-label\",\n          children: \"\\uCC44\\uB110:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section-value\",\n          children: \"\\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dropdown-arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-section-button\",\n      onClick: () => toggleNavigationPanel('channel'),\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-label\",\n        children: \"\\uCC44\\uB110:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-path\",\n        style: {\n          flex: '1 1 auto'\n        },\n        children: selectedLevels.map((level, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [index > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"path-separator\",\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"path-level\",\n            children: level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dropdown-arrow\",\n        children: \"\\u25BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSectionPath = () => {\n    if (!selectedSection) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-button\",\n        onClick: () => toggleNavigationPanel('section'),\n        style: {\n          width: '100%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section-label\",\n          children: \"\\uC139\\uC158:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section-value\",\n          children: \"\\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dropdown-arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"nav-section-button\",\n      onClick: () => toggleNavigationPanel('section'),\n      style: {\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-label\",\n        children: \"\\uC139\\uC158:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nav-section-path\",\n        style: {\n          flex: '1 1 auto'\n        },\n        children: selectedSectionLevels.map((level, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [index > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"path-separator\",\n            children: \">\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"path-level\",\n            children: level\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"dropdown-arrow\",\n        children: \"\\u25BC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleViewMode = () => {\n    const newMode = viewMode === 'edit' ? 'browse' : 'edit';\n    onViewModeChange(newMode);\n  };\n  const renderNavigationPanel = () => {\n    if (activePanelType === 'channel') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"level-columns\",\n          children: [Object.keys(channelLevels).map(levelIndex => {\n            const index = parseInt(levelIndex);\n            let items = [];\n            if (index === 0) {\n              items = channelLevels[0] || [];\n            } else if (index <= selectedLevels.length) {\n              const parentPath = selectedLevels.slice(0, index).join('_');\n              items = channelLevels[index] ? channelLevels[index].filter(item => item.parentPath === parentPath) : [];\n            }\n\n            // Only render the column if there are items\n            if (items.length === 0) return null;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-column\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column-header\",\n                children: [\"\\uCC44\\uB110\\uB808\\uBCA8 \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 387,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column-items\",\n                children: items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `level-item ${selectedLevels[index] === item.name ? 'selected' : ''}`,\n                  onClick: () => handleLevelSelect(item, index),\n                  children: item.name\n                }, itemIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 392,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 390,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 17\n            }, this);\n          }), selectedLevels.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"level-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-column-header\",\n              children: \"\\uC791\\uC5C5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-item action-button\",\n              onClick: () => {\n                const path = selectedLevels.join('_');\n                onChannelSelect(path);\n                setShowNavigationPanel(false);\n              },\n              children: \"\\uC774 \\uACBD\\uB85C\\uB85C \\uC774\\uB3D9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this);\n    } else if (activePanelType === 'section') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"level-columns\",\n          children: [Object.keys(sectionLevels).map(levelIndex => {\n            const index = parseInt(levelIndex);\n            let items = [];\n            if (index === 0) {\n              items = sectionLevels[0] || [];\n            } else if (index <= selectedSectionLevels.length) {\n              const parentPath = selectedSectionLevels.slice(0, index).join('_');\n              items = sectionLevels[index] ? sectionLevels[index].filter(item => item.parentPath === parentPath) : [];\n            }\n\n            // Only render the column if there are items\n            if (items.length === 0) return null;\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-column\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column-header\",\n                children: [\"\\uC139\\uC158\\uB808\\uBCA8 \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 449,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column-items\",\n                children: items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: `level-item ${selectedSectionLevels[index] === item.name ? 'selected' : ''}`,\n                  onClick: () => handleSectionLevelSelect(item, index),\n                  children: item.name\n                }, itemIndex, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 454,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 448,\n              columnNumber: 17\n            }, this);\n          }), selectedSectionLevels.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"level-column\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-column-header\",\n              children: \"\\uC791\\uC5C5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"level-item action-button\",\n              onClick: () => {\n                const path = selectedSectionLevels.join('_');\n                setSelectedSection(path);\n                setShowNavigationPanel(false);\n              },\n              children: \"\\uC774 \\uC139\\uC158\\uC73C\\uB85C \\uC774\\uB3D9\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 469,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this);\n    }\n    return null;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"path-navigation\",\n    ref: navigationRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-sections\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section\",\n          style: {\n            flex: '1 1 auto'\n          },\n          children: renderChannelPath()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section\",\n          children: renderSectionPath()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"nav-section mode-toggle\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"nav-section-button\",\n            onClick: toggleViewMode,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"nav-section-value\",\n              children: viewMode === 'edit' ? 'Edit' : 'Browse'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 507,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"mode-icon\",\n              children: viewMode === 'edit' ? '✏️' : '👁️'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 506,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 505,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), showNavigationPanel && renderNavigationPanel()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 494,\n    columnNumber: 5\n  }, this);\n};\n_s(PathNavigation, \"/3T3fF5c9xmTwZTcqx66Y7XNhpc=\");\n_c = PathNavigation;\nexport default PathNavigation;\nvar _c;\n$RefreshReg$(_c, \"PathNavigation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchChannels","fetchHeaders","fetchCombinations","fetchSections","jsxDEV","_jsxDEV","PathNavigation","selectedChannel","selectedHeader","selectedCombination","onChannelSelect","onHeaderSelect","onCombinationSelect","viewMode","onViewModeChange","_s","channels","setChannels","headers","setHeaders","combinations","setCombinations","showNavigationPanel","setShowNavigationPanel","channelLevels","setChannelLevels","selectedLevels","setSelectedLevels","sections","setSections","sectionLevels","setSectionLevels","selectedSectionLevels","setSelectedSectionLevels","selectedSection","setSelectedSection","activePanelType","setActivePanelType","navigationRef","parseChannelLevels","channelList","levelMap","forEach","channel","channelKey","채널키","levels","split","level","index","parentPath","slice","join","currentPath","existingItem","find","item","name","push","fullPath","parseSectionLevels","sectionList","section","sectionKey","섹션키","getChannels","response","list","error","console","getSections","getHeaders","getCombinations","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","toggleNavigationPanel","panelType","handleLevelSelect","newSelectedLevels","trimmedLevels","newPath","c","matchingChannel","startsWith","handleSectionLevelSelect","s","matchingSection","getFilteredLevelItems","levelIndex","filter","getFilteredSectionLevelItems","renderChannelPath","className","onClick","style","width","children","fileName","_jsxFileName","lineNumber","columnNumber","flex","map","Fragment","renderSectionPath","toggleViewMode","newMode","renderNavigationPanel","Object","keys","parseInt","items","length","itemIndex","path","ref","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/PathNavigation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fetchChannels, fetchHeaders, fetchCombinations, fetchSections } from '../services/api';\nimport './PathNavigation.css';\n\nconst PathNavigation = ({ \n  selectedChannel, \n  selectedHeader, \n  selectedCombination,\n  onChannelSelect,\n  onHeaderSelect,\n  onCombinationSelect,\n  viewMode,\n  onViewModeChange\n}) => {\n  const [channels, setChannels] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [headers, setHeaders] = useState([]);\n  // eslint-disable-next-line no-unused-vars\n  const [combinations, setCombinations] = useState([]);\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  \n  // Section related states\n  const [sections, setSections] = useState([]);\n  const [sectionLevels, setSectionLevels] = useState([]);\n  const [selectedSectionLevels, setSelectedSectionLevels] = useState([]);\n  const [selectedSection, setSelectedSection] = useState(null);\n  const [activePanelType, setActivePanelType] = useState(null); // 'channel' or 'section'\n  \n  const navigationRef = useRef(null);\n\n  // Parse channel into hierarchical levels\n  const parseChannelLevels = (channelList) => {\n    const levelMap = {};\n    \n    channelList.forEach(channel => {\n      const channelKey = channel.채널키;\n      if (!channelKey) return;\n      \n      const levels = channelKey.split('_');\n      \n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        \n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n        \n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => \n          item.name === level && item.parentPath === parentPath\n        );\n        \n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    \n    return levelMap;\n  };\n\n  // Parse section into hierarchical levels (similar to parseChannelLevels)\n  const parseSectionLevels = (sectionList) => {\n    const levelMap = {};\n    \n    sectionList.forEach(section => {\n      const sectionKey = section.섹션키;\n      if (!sectionKey) return;\n      \n      const levels = sectionKey.split('_');\n      \n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        \n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n        \n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => \n          item.name === level && item.parentPath === parentPath\n        );\n        \n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    \n    return levelMap;\n  };\n\n  // Fetch channels on component mount\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        const response = await fetchChannels();\n        const channelList = response.list || [];\n        setChannels(channelList);\n        \n        // Parse channel levels\n        const levels = parseChannelLevels(channelList);\n        setChannelLevels(levels);\n      } catch (error) {\n        console.error('Error fetching channels:', error);\n      }\n    };\n\n    getChannels();\n  }, []);\n\n  // Fetch sections on component mount\n  useEffect(() => {\n    const getSections = async () => {\n      try {\n        const response = await fetchSections();\n        const sectionList = response.list || [];\n        setSections(sectionList);\n        \n        // Parse section levels\n        const levels = parseSectionLevels(sectionList);\n        setSectionLevels(levels);\n      } catch (error) {\n        console.error('Error fetching sections:', error);\n      }\n    };\n\n    getSections();\n  }, []);\n\n  // Fetch headers when a channel is selected\n  useEffect(() => {\n    if (selectedChannel) {\n      const getHeaders = async () => {\n        try {\n          const response = await fetchHeaders(selectedChannel);\n          setHeaders(response.list || []);\n        } catch (error) {\n          console.error('Error fetching headers:', error);\n        }\n      };\n\n      getHeaders();\n      \n      // Update selected levels based on selected channel\n      const levels = selectedChannel.split('_');\n      setSelectedLevels(levels);\n    } else {\n      setHeaders([]);\n      setSelectedLevels([]);\n    }\n  }, [selectedChannel]);\n\n  // Fetch combinations when a header is selected\n  useEffect(() => {\n    if (selectedChannel && selectedHeader) {\n      const getCombinations = async () => {\n        try {\n          const response = await fetchCombinations(selectedChannel, selectedHeader);\n          setCombinations(response.list || []);\n        } catch (error) {\n          console.error('Error fetching combinations:', error);\n        }\n      };\n\n      getCombinations();\n    } else {\n      setCombinations([]);\n    }\n  }, [selectedChannel, selectedHeader]);\n\n  // Close navigation panel when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (navigationRef.current && !navigationRef.current.contains(event.target)) {\n        setShowNavigationPanel(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const toggleNavigationPanel = (panelType) => {\n    if (showNavigationPanel && activePanelType === panelType) {\n      setShowNavigationPanel(false);\n    } else {\n      setShowNavigationPanel(true);\n      setActivePanelType(panelType);\n    }\n  };\n\n  const handleLevelSelect = (level, index) => {\n    // Create a full channel path up to the selected level\n    const newSelectedLevels = [...selectedLevels];\n    newSelectedLevels[index] = level.name;\n    \n    // Trim any levels after the selected index\n    const trimmedLevels = newSelectedLevels.slice(0, index + 1);\n    const newPath = trimmedLevels.join('_');\n    \n    // Update selected levels first\n    setSelectedLevels(trimmedLevels);\n    \n    // Find the full channel that matches this path\n    const channel = channels.find(c => c.채널키 === newPath);\n    \n    if (channel) {\n      onChannelSelect(channel.채널키);\n      setShowNavigationPanel(false);\n    } else {\n      // If it's a partial path, we keep the navigation panel open\n      // to show lower levels without navigating away\n      const matchingChannel = channels.find(c => c.채널키.startsWith(newPath + '_'));\n      if (matchingChannel) {\n        // Don't call onChannelSelect yet, just update the local selectedLevels\n        // This allows users to see the next level before committing to a navigation\n      } else {\n        // If no matching channels at all, close the panel\n        setShowNavigationPanel(false);\n      }\n    }\n  };\n\n  const handleSectionLevelSelect = (level, index) => {\n    // Create a full section path up to the selected level\n    const newSelectedLevels = [...selectedSectionLevels];\n    newSelectedLevels[index] = level.name;\n    \n    // Trim any levels after the selected index\n    const trimmedLevels = newSelectedLevels.slice(0, index + 1);\n    const newPath = trimmedLevels.join('_');\n    \n    // Update selected levels first\n    setSelectedSectionLevels(trimmedLevels);\n    \n    // Find the full section that matches this path\n    const section = sections.find(s => s.섹션키 === newPath);\n    \n    if (section) {\n      setSelectedSection(section.섹션키);\n      setShowNavigationPanel(false);\n    } else {\n      // If it's a partial path, we keep the navigation panel open\n      // to show lower levels without navigating away\n      const matchingSection = sections.find(s => s.섹션키.startsWith(newPath + '_'));\n      if (matchingSection) {\n        // Don't call setSelectedSection yet, just update the local selectedSectionLevels\n        // This allows users to see the next level before committing to a navigation\n      } else {\n        // If no matching sections at all, close the panel\n        setShowNavigationPanel(false);\n      }\n    }\n  };\n\n  // eslint-disable-next-line no-unused-vars\n  const getFilteredLevelItems = (levelIndex) => {\n    if (!channelLevels[levelIndex]) return [];\n    \n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return channelLevels[0];\n    }\n    \n    // For deeper levels, filter based on parent path\n    const parentPath = selectedLevels.slice(0, levelIndex).join('_');\n    return channelLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n\n  const getFilteredSectionLevelItems = (levelIndex) => {\n    if (!sectionLevels[levelIndex]) return [];\n    \n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return sectionLevels[0];\n    }\n    \n    // For deeper levels, filter based on parent path\n    const parentPath = selectedSectionLevels.slice(0, levelIndex).join('_');\n    return sectionLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n\n  const renderChannelPath = () => {\n    if (!selectedChannel) {\n      return (\n        <div className=\"nav-section-button\" onClick={() => toggleNavigationPanel('channel')} style={{ width: '100%' }}>\n          <div className=\"nav-section-label\">채널:</div>\n          <div className=\"nav-section-value\">선택해주세요</div>\n          <span className=\"dropdown-arrow\">▼</span>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"nav-section-button\" onClick={() => toggleNavigationPanel('channel')} style={{ width: '100%' }}>\n        <div className=\"nav-section-label\">채널:</div>\n        <div className=\"nav-section-path\" style={{ flex: '1 1 auto' }}>\n          {selectedLevels.map((level, index) => (\n            <React.Fragment key={index}>\n              {index > 0 && <span className=\"path-separator\">&gt;</span>}\n              <div className=\"path-level\">\n                {level}\n              </div>\n            </React.Fragment>\n          ))}\n        </div>\n        <span className=\"dropdown-arrow\">▼</span>\n      </div>\n    );\n  };\n\n  const renderSectionPath = () => {\n    if (!selectedSection) {\n      return (\n        <div className=\"nav-section-button\" onClick={() => toggleNavigationPanel('section')} style={{ width: '100%' }}>\n          <div className=\"nav-section-label\">섹션:</div>\n          <div className=\"nav-section-value\">선택해주세요</div>\n          <span className=\"dropdown-arrow\">▼</span>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"nav-section-button\" onClick={() => toggleNavigationPanel('section')} style={{ width: '100%' }}>\n        <div className=\"nav-section-label\">섹션:</div>\n        <div className=\"nav-section-path\" style={{ flex: '1 1 auto' }}>\n          {selectedSectionLevels.map((level, index) => (\n            <React.Fragment key={index}>\n              {index > 0 && <span className=\"path-separator\">&gt;</span>}\n              <div className=\"path-level\">\n                {level}\n              </div>\n            </React.Fragment>\n          ))}\n        </div>\n        <span className=\"dropdown-arrow\">▼</span>\n      </div>\n    );\n  };\n\n  const toggleViewMode = () => {\n    const newMode = viewMode === 'edit' ? 'browse' : 'edit';\n    onViewModeChange(newMode);\n  };\n\n  const renderNavigationPanel = () => {\n    if (activePanelType === 'channel') {\n      return (\n        <div className=\"navigation-panel\">\n          <div className=\"level-columns\">\n            {/* Render columns for each level */}\n            {Object.keys(channelLevels).map((levelIndex) => {\n              const index = parseInt(levelIndex);\n              let items = [];\n              \n              if (index === 0) {\n                items = channelLevels[0] || [];\n              } else if (index <= selectedLevels.length) {\n                const parentPath = selectedLevels.slice(0, index).join('_');\n                items = channelLevels[index] ? \n                  channelLevels[index].filter(item => item.parentPath === parentPath) : \n                  [];\n              }\n              \n              // Only render the column if there are items\n              if (items.length === 0) return null;\n              \n              return (\n                <div className=\"level-column\" key={index}>\n                  <div className=\"level-column-header\">\n                    채널레벨 {index + 1}\n                  </div>\n                  <div className=\"level-column-items\">\n                    {items.map((item, itemIndex) => (\n                      <div \n                        key={itemIndex}\n                        className={`level-item ${selectedLevels[index] === item.name ? 'selected' : ''}`}\n                        onClick={() => handleLevelSelect(item, index)}\n                      >\n                        {item.name}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n            \n            {/* Add a button to complete navigation when ready */}\n            {selectedLevels.length > 0 && (\n              <div className=\"level-column\">\n                <div className=\"level-column-header\">\n                  작업\n                </div>\n                <div \n                  className=\"level-item action-button\"\n                  onClick={() => {\n                    const path = selectedLevels.join('_');\n                    onChannelSelect(path);\n                    setShowNavigationPanel(false);\n                  }}\n                >\n                  이 경로로 이동\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    } else if (activePanelType === 'section') {\n      return (\n        <div className=\"navigation-panel\">\n          <div className=\"level-columns\">\n            {/* Render columns for each section level */}\n            {Object.keys(sectionLevels).map((levelIndex) => {\n              const index = parseInt(levelIndex);\n              let items = [];\n              \n              if (index === 0) {\n                items = sectionLevels[0] || [];\n              } else if (index <= selectedSectionLevels.length) {\n                const parentPath = selectedSectionLevels.slice(0, index).join('_');\n                items = sectionLevels[index] ? \n                  sectionLevels[index].filter(item => item.parentPath === parentPath) : \n                  [];\n              }\n              \n              // Only render the column if there are items\n              if (items.length === 0) return null;\n              \n              return (\n                <div className=\"level-column\" key={index}>\n                  <div className=\"level-column-header\">\n                    섹션레벨 {index + 1}\n                  </div>\n                  <div className=\"level-column-items\">\n                    {items.map((item, itemIndex) => (\n                      <div \n                        key={itemIndex}\n                        className={`level-item ${selectedSectionLevels[index] === item.name ? 'selected' : ''}`}\n                        onClick={() => handleSectionLevelSelect(item, index)}\n                      >\n                        {item.name}\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              );\n            })}\n            \n            {/* Add a button to complete section navigation when ready */}\n            {selectedSectionLevels.length > 0 && (\n              <div className=\"level-column\">\n                <div className=\"level-column-header\">\n                  작업\n                </div>\n                <div \n                  className=\"level-item action-button\"\n                  onClick={() => {\n                    const path = selectedSectionLevels.join('_');\n                    setSelectedSection(path);\n                    setShowNavigationPanel(false);\n                  }}\n                >\n                  이 섹션으로 이동\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    }\n    \n    return null;\n  };\n\n  return (\n    <div className=\"path-navigation\" ref={navigationRef}>\n      <div className=\"navigation-container\">\n        <div className=\"navigation-sections\">\n          <div className=\"nav-section\" style={{ flex: '1 1 auto' }}>\n            {renderChannelPath()}\n          </div>\n          \n          <div className=\"nav-section\">\n            {renderSectionPath()}\n          </div>\n\n          <div className=\"nav-section mode-toggle\">\n            <div className=\"nav-section-button\" onClick={toggleViewMode}>\n              <div className=\"nav-section-value\">\n                {viewMode === 'edit' ? 'Edit' : 'Browse'}\n              </div>\n              <span className=\"mode-icon\">{viewMode === 'edit' ? '✏️' : '👁️'}</span>\n            </div>\n          </div>\n        </div>\n        \n        {showNavigationPanel && renderNavigationPanel()}\n      </div>\n    </div>\n  );\n};\n\nexport default PathNavigation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}