{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js\",\n  _s2 = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupPanel = ({\n  groupData\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uADF8\\uB8F9\\uD654\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // State for active tab\n  const [activeTab, setActiveTab] = useState('grouped');\n\n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n\n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null\n      });\n    });\n\n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        const nodeB = substringMap.get(itemB.substring);\n\n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && itemA.substring.length < itemB.substring.length) {\n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n\n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && substringC !== itemB.substring && substringC.includes(itemA.substring) && itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n\n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n\n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n\n    // Utility function to compare strings from right to left\n    const compareRightToLeft = (a, b) => {\n      const aRev = a.split('').reverse().join('');\n      const bRev = b.split('').reverse().join('');\n      return aRev.localeCompare(bRev);\n    };\n\n    // Sort children nodes by frequency (descending) and then from right-to-left order\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring comparing right to left\n          return compareRightToLeft(a.item.substring, b.item.substring);\n        });\n      }\n    }\n\n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values()).filter(node => node.parent === null)\n    // Sort root nodes by frequency and right-to-left order\n    .sort((a, b) => {\n      // First sort by frequency (count)\n      if (b.item.count !== a.item.count) {\n        return b.item.count - a.item.count;\n      }\n      // Then by substring comparing right to left\n      return compareRightToLeft(a.item.substring, b.item.substring);\n    });\n    return {\n      rootNodes,\n      substringMap\n    };\n  };\n  const {\n    rootNodes\n  } = buildHierarchy();\n\n  // TreeNode component for each substring item\n  const TreeNode = ({\n    node,\n    isLast,\n    level\n  }) => {\n    _s();\n    const [expanded, setExpanded] = useState(true);\n    const {\n      item,\n      children\n    } = node;\n    const hasChildren = children && children.length > 0;\n\n    // Toggle expansion state\n    const toggleExpand = () => setExpanded(!expanded);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-node-line\",\n        children: [level > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [Array(level).fill().map((_, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tree-vline ${i === level - 1 ? isLast ? 'last' : '' : ''}`\n          }, i, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this)), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: `tree-hline ${isLast ? 'last' : ''}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tree-toggle ${expanded ? 'expanded' : 'collapsed'}`,\n          onClick: toggleExpand,\n          children: expanded ? '−' : '+'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-node-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-node-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"group-name\",\n              children: item.substring\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"group-count\",\n              children: [\"(\", item.count, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), expanded && /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"tree-values\",\n            children: groupData.groups[item.substring] && groupData.groups[item.substring].map((value, valueIdx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"tree-value-item\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-tag\",\n                children: value.includes(item.substring) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                  children: [value.indexOf(item.substring) > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"value-prefix\",\n                    children: value.substring(0, value.indexOf(item.substring))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"value-highlight\",\n                    children: item.substring\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 170,\n                    columnNumber: 27\n                  }, this), value.indexOf(item.substring) + item.substring.length < value.length && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"value-suffix\",\n                    children: value.substring(value.indexOf(item.substring) + item.substring.length)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 174,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true) : value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 21\n              }, this)\n            }, valueIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), expanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-node-children\",\n        children: children.map((childNode, i) => /*#__PURE__*/_jsxDEV(TreeNode, {\n          node: childNode,\n          isLast: i === children.length - 1,\n          level: level + 1\n        }, childNode.item.substring, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 부분문자열로 그룹화된 항목들을 계층적 트리뷰 형태로 표시\n  _s(TreeNode, \"NZEs4N34I2vU569ODzuIjdsqMlo=\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uBD80\\uBD84\\uBB38\\uC790\\uC5F4 \\uADF8\\uB8F9 (\\uACC4\\uCE35\\uC801)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tabs\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeTab === 'grouped' ? 'active' : ''}`,\n          onClick: () => setActiveTab('grouped'),\n          children: \"\\uADF8\\uB8F9\\uD654\\uB41C \\uD56D\\uBAA9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `tab-button ${activeTab === 'ungrouped' ? 'active' : ''}`,\n          onClick: () => setActiveTab('ungrouped'),\n          children: [\"\\uADF8\\uB8F9\\uD654\\uB418\\uC9C0 \\uC54A\\uC74C\", groupData.ungrouped && groupData.ungrouped.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"tab-count\",\n            children: [\"(\", groupData.ungrouped.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab-content\",\n        children: [activeTab === 'grouped' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"clean-tree-view\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tree-root\",\n            children: rootNodes.map((rootNode, i) => /*#__PURE__*/_jsxDEV(TreeNode, {\n              node: rootNode,\n              isLast: i === rootNodes.length - 1,\n              level: 0\n            }, rootNode.item.substring, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), activeTab === 'ungrouped' && groupData.ungrouped && groupData.ungrouped.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ungrouped-view\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ungrouped-list\",\n            children: groupData.ungrouped.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"ungrouped-item\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-tag\",\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 21\n              }, this)\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 250,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), activeTab === 'ungrouped' && (!groupData.ungrouped || groupData.ungrouped.length === 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-ungrouped\",\n          children: \"\\uBAA8\\uB4E0 \\uD56D\\uBAA9\\uC774 \\uADF8\\uB8F9\\uD654\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 207,\n    columnNumber: 5\n  }, this);\n};\n_s2(GroupPanel, \"kAQbw2UEVcYVndpEHIAxVLMCLFQ=\");\n_c = GroupPanel;\nexport default GroupPanel;\nvar _c;\n$RefreshReg$(_c, \"GroupPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupPanel","groupData","_s2","_s","$RefreshSig$","substrings","groups","className","children","fileName","_jsxFileName","lineNumber","columnNumber","activeTab","setActiveTab","buildHierarchy","substringMap","Map","forEach","item","set","substring","parent","itemA","nodeA","get","itemB","nodeB","includes","length","moreSpecificParentExists","substringC","nodeC","entries","prevParentChildren","index","indexOf","splice","push","compareRightToLeft","a","b","aRev","split","reverse","join","bRev","localeCompare","node","values","sort","count","rootNodes","Array","from","filter","TreeNode","isLast","level","expanded","setExpanded","hasChildren","toggleExpand","fill","map","_","i","onClick","value","valueIdx","childNode","ungrouped","rootNode","idx","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst GroupPanel = ({ groupData }) => {\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return <div className=\"no-data\">그룹화된 데이터가 없습니다</div>;\n  }\n  \n  // State for active tab\n  const [activeTab, setActiveTab] = useState('grouped');\n  \n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n    \n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null\n      });\n    });\n    \n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      \n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        \n        const nodeB = substringMap.get(itemB.substring);\n        \n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && \n            itemA.substring.length < itemB.substring.length) {\n          \n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n          \n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && \n                substringC !== itemB.substring && \n                substringC.includes(itemA.substring) && \n                itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n          \n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n            \n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n    \n    // Utility function to compare strings from right to left\n    const compareRightToLeft = (a, b) => {\n      const aRev = a.split('').reverse().join('');\n      const bRev = b.split('').reverse().join('');\n      return aRev.localeCompare(bRev);\n    };\n    \n    // Sort children nodes by frequency (descending) and then from right-to-left order\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring comparing right to left\n          return compareRightToLeft(a.item.substring, b.item.substring);\n        });\n      }\n    }\n    \n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values())\n      .filter(node => node.parent === null)\n      // Sort root nodes by frequency and right-to-left order\n      .sort((a, b) => {\n        // First sort by frequency (count)\n        if (b.item.count !== a.item.count) {\n          return b.item.count - a.item.count;\n        }\n        // Then by substring comparing right to left\n        return compareRightToLeft(a.item.substring, b.item.substring);\n      });\n    \n    return { rootNodes, substringMap };\n  };\n  \n  const { rootNodes } = buildHierarchy();\n  \n  // TreeNode component for each substring item\n  const TreeNode = ({ node, isLast, level }) => {\n    const [expanded, setExpanded] = useState(true);\n    const { item, children } = node;\n    const hasChildren = children && children.length > 0;\n    \n    // Toggle expansion state\n    const toggleExpand = () => setExpanded(!expanded);\n    \n    return (\n      <div className=\"tree-node\">\n        {/* Tree connector and expand/collapse control */}\n        <div className=\"tree-node-line\">\n          {level > 0 && (\n            <>\n              {Array(level).fill().map((_, i) => (\n                <span \n                  key={i} \n                  className={`tree-vline ${i === level - 1 ? (isLast ? 'last' : '') : ''}`}\n                />\n              ))}\n              <span className={`tree-hline ${isLast ? 'last' : ''}`} />\n            </>\n          )}\n          \n          {hasChildren && (\n            <button \n              className={`tree-toggle ${expanded ? 'expanded' : 'collapsed'}`}\n              onClick={toggleExpand}\n            >\n              {expanded ? '−' : '+'}\n            </button>\n          )}\n          \n          {/* Node content */}\n          <div className=\"tree-node-content\">\n            <div className=\"tree-node-header\">\n              <span className=\"group-name\">{item.substring}</span>\n              <span className=\"group-count\">({item.count})</span>\n            </div>\n            \n            {/* Show values for this substring */}\n            {expanded && (\n              <ul className=\"tree-values\">\n                {groupData.groups[item.substring] && groupData.groups[item.substring].map((value, valueIdx) => (\n                  <li key={valueIdx} className=\"tree-value-item\">\n                    <span className=\"value-tag\">\n                      {/* 부분문자열을 강조 표시 */}\n                      {value.includes(item.substring) ? (\n                        <>\n                          {value.indexOf(item.substring) > 0 && (\n                            <span className=\"value-prefix\">\n                              {value.substring(0, value.indexOf(item.substring))}\n                            </span>\n                          )}\n                          <span className=\"value-highlight\">\n                            {item.substring}\n                          </span>\n                          {value.indexOf(item.substring) + item.substring.length < value.length && (\n                            <span className=\"value-suffix\">\n                              {value.substring(value.indexOf(item.substring) + item.substring.length)}\n                            </span>\n                          )}\n                        </>\n                      ) : value}\n                    </span>\n                  </li>\n                ))}\n              </ul>\n            )}\n          </div>\n        </div>\n        \n        {/* Render children nodes */}\n        {expanded && hasChildren && (\n          <div className=\"tree-node-children\">\n            {children.map((childNode, i) => (\n              <TreeNode \n                key={childNode.item.substring}\n                node={childNode}\n                isLast={i === children.length - 1}\n                level={level + 1}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // 부분문자열로 그룹화된 항목들을 계층적 트리뷰 형태로 표시\n  return (\n    <div className=\"group-panel\">\n      <h3>부분문자열 그룹 (계층적)</h3>\n      \n      <div className=\"tabs-container\">\n        <div className=\"tabs\">\n          <button \n            className={`tab-button ${activeTab === 'grouped' ? 'active' : ''}`}\n            onClick={() => setActiveTab('grouped')}\n          >\n            그룹화된 항목\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'ungrouped' ? 'active' : ''}`}\n            onClick={() => setActiveTab('ungrouped')}\n          >\n            그룹화되지 않음 \n            {groupData.ungrouped && groupData.ungrouped.length > 0 && (\n              <span className=\"tab-count\">({groupData.ungrouped.length})</span>\n            )}\n          </button>\n        </div>\n        \n        <div className=\"tab-content\">\n          {activeTab === 'grouped' && (\n            <div className=\"clean-tree-view\">\n              {/* 부분문자열로 계층적으로 그룹화된 항목들 */}\n              <div className=\"tree-root\">\n                {rootNodes.map((rootNode, i) => (\n                  <TreeNode \n                    key={rootNode.item.substring} \n                    node={rootNode}\n                    isLast={i === rootNodes.length - 1}\n                    level={0}\n                  />\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'ungrouped' && groupData.ungrouped && groupData.ungrouped.length > 0 && (\n            <div className=\"ungrouped-view\">\n              <div className=\"ungrouped-list\">\n                {groupData.ungrouped.map((value, idx) => (\n                  <div key={idx} className=\"ungrouped-item\">\n                    <span className=\"value-tag\">{value}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'ungrouped' && (!groupData.ungrouped || groupData.ungrouped.length === 0) && (\n            <div className=\"no-ungrouped\">모든 항목이 그룹화되었습니다</div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}