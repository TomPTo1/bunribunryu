{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData,\n  groupingData\n}) => {\n  _s();\n  // Add state for user-defined groups\n  const [userGroups, setUserGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [editingGroupIndex, setEditingGroupIndex] = useState(null);\n  const [editingGroupName, setEditingGroupName] = useState('');\n\n  // Track which values have been added to any group\n  const [usedValues, setUsedValues] = useState(new Set());\n\n  // Add state for filter functionality\n  const [activeFilters, setActiveFilters] = useState({});\n  const [isFilteringActive, setIsFilteringActive] = useState(false);\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Check if a value has been used in any group\n  const isValueUsed = value => {\n    return usedValues.has(value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n\n    // If a group is selected, add the segment to that group\n    if (selectedGroup !== null) {\n      const segmentValue = typeof segment === 'string' ? segment : segment.text;\n      addToGroup(selectedGroup, segmentValue);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = value => {\n    console.log('Whole tag clicked:', value);\n\n    // If a group is selected and value not already used, add the value to that group\n    if (selectedGroup !== null && !isValueUsed(value)) {\n      addToGroup(selectedGroup, value);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Add class if this value is already used in a group\n    if (isValueUsed(typeof value === 'string' ? value : value.value)) {\n      className += ' used-value';\n    }\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${className} tag-container ${isValueUsed(valueText) ? 'used-value' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whole-tag-button\",\n          onClick: () => handleTagClick(valueText),\n          title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n          disabled: isValueUsed(valueText),\n          children: valueText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segments-container\",\n          children: segmentation.segments.map((segment, segIdx) => {\n            const segmentText = segment.text;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`,\n              onClick: e => handleSegmentClick(segment, e),\n              disabled: isValueUsed(segmentText),\n              children: segmentText\n            }, `seg-${segIdx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally but still clickable\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${className} clickable-tag simple-tag-button ${isValueUsed(valueText) ? 'used-value' : ''}`,\n      onClick: () => handleTagClick(valueText),\n      disabled: isValueUsed(valueText),\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n        const source = item.source || 'text';\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"whole-tag-button\",\n              onClick: () => handleTagClick(value),\n              title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n              disabled: isValueUsed(value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segments-container\",\n              children: segments.map((segment, segIdx) => {\n                const segmentText = segment.text;\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`,\n                  onClick: e => handleSegmentClick(segment, e),\n                  disabled: isValueUsed(segmentText),\n                  children: segmentText\n                }, `seg-${segIdx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 243,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`,\n          onClick: () => handleTagClick(value),\n          disabled: isValueUsed(value),\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n\n  // Toggle a filter segment\n  const toggleFilterSegment = (key, segment) => {\n    setActiveFilters(prev => {\n      const newFilters = {\n        ...prev\n      };\n      if (!newFilters[key]) {\n        newFilters[key] = new Set([segment]);\n      } else {\n        const set = new Set(newFilters[key]);\n        if (set.has(segment)) {\n          set.delete(segment);\n          if (set.size === 0) {\n            delete newFilters[key];\n          } else {\n            newFilters[key] = set;\n          }\n        } else {\n          set.add(segment);\n          newFilters[key] = set;\n        }\n      }\n\n      // Check if we have any active filters\n      const hasActiveFilters = Object.keys(newFilters).length > 0;\n      setIsFilteringActive(hasActiveFilters);\n      return newFilters;\n    });\n  };\n\n  // Check if a row matches the current filters\n  const matchesFilters = row => {\n    if (!isFilteringActive) return true;\n    if (!row.separated || row.separated.length === 0) return false;\n\n    // Get all values in this row\n    const rowValues = row.separated.map(item => typeof item === 'string' ? item : item.value);\n\n    // Check if any value in the row matches any active filter\n    for (const key in activeFilters) {\n      const filterValues = activeFilters[key];\n      const matchFound = [...filterValues].some(filter => rowValues.includes(filter));\n      if (matchFound) return true;\n    }\n    return false;\n  };\n\n  // Render grouped data without duplicates\n  const renderGroupedData = () => {\n    if (!groupingData) {\n      return null;\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouped-data-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"\\uBD84\\uC808\\uAC12 \\uD544\\uD130\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), isFilteringActive && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"clear-filters-btn\",\n          onClick: () => {\n            setActiveFilters({});\n            setIsFilteringActive(false);\n          },\n          children: \"\\uCD08\\uAE30\\uD654\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"filter-chips-container\",\n        children: Object.entries(groupingData).map(([key, segments], index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"filter-category\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filter-category-name\",\n            children: [key, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"filter-chips\",\n            children: Array.isArray(segments) && segments.map((segment, idx) => {\n              var _activeFilters$key;\n              const isFiltered = (_activeFilters$key = activeFilters[key]) === null || _activeFilters$key === void 0 ? void 0 : _activeFilters$key.has(segment);\n              const isUsedInGroup = isValueUsed(segment);\n              return /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `filter-chip ${isFiltered ? 'active-filter' : ''} ${isUsedInGroup ? 'used-value' : ''}`,\n                onClick: () => {\n                  if (selectedGroup !== null && !isUsedInGroup) {\n                    // Add to group\n                    handleTagClick(segment);\n                  } else {\n                    // Filter the data\n                    toggleFilterSegment(key, segment);\n                  }\n                },\n                disabled: isUsedInGroup,\n                title: selectedGroup !== null ? \"그룹에 추가\" : \"필터링\",\n                children: [segment, isFiltered && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"filter-indicator\",\n                  children: \"\\u2713\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 390,\n                  columnNumber: 38\n                }, this)]\n              }, `segment-${idx}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 374,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 368,\n            columnNumber: 15\n          }, this)]\n        }, `group-${index}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Add new user group\n  const addUserGroup = () => {\n    if (newGroupName.trim() === '') return;\n    setUserGroups([...userGroups, {\n      id: Date.now(),\n      name: newGroupName,\n      items: []\n    }]);\n    setNewGroupName('');\n  };\n\n  // Start editing a group name\n  const startEditingGroupName = (index, name, e) => {\n    e.stopPropagation(); // Prevent group selection\n    setEditingGroupIndex(index);\n    setEditingGroupName(name);\n  };\n\n  // Save the edited group name\n  const saveGroupName = (index, e) => {\n    e.stopPropagation(); // Prevent group selection\n\n    if (editingGroupName.trim() === '') return;\n    const updatedGroups = [...userGroups];\n    updatedGroups[index].name = editingGroupName;\n    setUserGroups(updatedGroups);\n    setEditingGroupIndex(null);\n    setEditingGroupName('');\n  };\n\n  // Handle keydown in the editing input\n  const handleEditKeyDown = (index, e) => {\n    if (e.key === 'Enter') {\n      saveGroupName(index, e);\n    } else if (e.key === 'Escape') {\n      setEditingGroupIndex(null);\n      setEditingGroupName('');\n    }\n  };\n\n  // Add segment to specific group\n  const addToGroup = (groupIndex, value) => {\n    // Don't add if already exists in this group or in any other group\n    if (userGroups[groupIndex].items.includes(value) || isValueUsed(value)) return;\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.push(value);\n    setUserGroups(updatedGroups);\n\n    // Mark this value as used\n    setUsedValues(prev => new Set([...prev, value]));\n  };\n\n  // Remove item from group\n  const removeFromGroup = (groupIndex, itemIndex) => {\n    const valueToRemove = userGroups[groupIndex].items[itemIndex];\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.splice(itemIndex, 1);\n    setUserGroups(updatedGroups);\n\n    // Check if the value exists in any other group before removing from usedValues\n    const isUsedInOtherGroups = userGroups.some((group, idx) => idx !== groupIndex && group.items.includes(valueToRemove));\n    if (!isUsedInOtherGroups) {\n      const newUsedValues = new Set(usedValues);\n      newUsedValues.delete(valueToRemove);\n      setUsedValues(newUsedValues);\n    }\n  };\n\n  // Select group to add items to\n  const toggleGroupSelection = index => {\n    setSelectedGroup(selectedGroup === index ? null : index);\n  };\n\n  // Render user-defined groups\n  const renderUserGroups = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-groups-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uC0AC\\uC6A9\\uC790 \\uC815\\uC758 \\uADF8\\uB8F9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-creation-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: newGroupName,\n          onChange: e => setNewGroupName(e.target.value),\n          placeholder: \"\\uC0C8 \\uADF8\\uB8F9 \\uC774\\uB984 \\uC785\\uB825\",\n          className: \"group-name-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addUserGroup,\n          className: \"add-group-btn\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 13\n          }, this), \" \\uADF8\\uB8F9 \\uCD94\\uAC00\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-groups-list\",\n        children: userGroups.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-groups-message\",\n          children: \"\\uC0DD\\uC131\\uB41C \\uADF8\\uB8F9\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4. \\uC704 \\uC785\\uB825\\uCC3D\\uC5D0\\uC11C \\uADF8\\uB8F9\\uC744 \\uCD94\\uAC00\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 13\n        }, this) : userGroups.map((group, groupIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `user-group-box ${selectedGroup === groupIndex ? 'selected-group' : ''}`,\n          onClick: () => toggleGroupSelection(groupIndex),\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-group-header\",\n            children: [editingGroupIndex === groupIndex ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-name-edit\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                value: editingGroupName,\n                onChange: e => setEditingGroupName(e.target.value),\n                onClick: e => e.stopPropagation() // Prevent group selection\n                ,\n                onKeyDown: e => handleEditKeyDown(groupIndex, e),\n                onBlur: e => saveGroupName(groupIndex, e),\n                autoFocus: true,\n                className: \"group-name-edit-input\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 516,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-name-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-group-name\",\n                children: group.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 529,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-group-name-btn\",\n                onClick: e => startEditingGroupName(groupIndex, group.name, e),\n                title: \"\\uADF8\\uB8F9\\uBA85 \\uC218\\uC815\",\n                children: \"\\u270E\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 528,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-selection-status\",\n              children: selectedGroup === groupIndex ? '선택됨' : '클릭하여 선택'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"user-group-items\",\n            children: group.items.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"empty-group-message\",\n              children: \"\\uC0C1\\uB2E8\\uC758 \\uBD84\\uC808\\uAC12 \\uD544\\uD130\\uC5D0\\uC11C \\uAC12\\uC744 \\uD074\\uB9AD\\uD558\\uC5EC \\uC774 \\uADF8\\uB8F9\\uC5D0 \\uCD94\\uAC00\\uD558\\uC138\\uC694\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 21\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"user-group-items-list\",\n              children: group.items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"user-group-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"item-text\",\n                  children: item\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 552,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"remove-item-btn\",\n                  onClick: e => {\n                    e.stopPropagation();\n                    removeFromGroup(groupIndex, itemIndex);\n                  },\n                  children: \"\\xD7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 553,\n                  columnNumber: 27\n                }, this)]\n              }, itemIndex, true, {\n                fileName: _jsxFileName,\n                lineNumber: 551,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 549,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 17\n          }, this)]\n        }, group.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 508,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: [groupingData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"segmented-values-section\",\n      children: renderGroupedData()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 579,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-data-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130 \", isFilteringActive && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"filter-active-indicator\",\n            children: \"(\\uD544\\uD130 \\uC801\\uC6A9\\uB428)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 45\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"data-table\",\n          children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: flattenData(processedData).filter(matchesFilters).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: /*#__PURE__*/_jsxDEV(\"td\", {\n                className: \"enhanced-view\",\n                children: renderEnhancedView(row)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 592,\n                columnNumber: 19\n              }, this)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 591,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-groups-wrapper\",\n        children: renderUserGroups()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 576,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"g2erGOOjwarz9xFzwXEfmH63DqU=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","segmentationData","groupingData","_s","userGroups","setUserGroups","newGroupName","setNewGroupName","selectedGroup","setSelectedGroup","editingGroupIndex","setEditingGroupIndex","editingGroupName","setEditingGroupName","usedValues","setUsedValues","Set","activeFilters","setActiveFilters","isFilteringActive","setIsFilteringActive","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","hasSegmentationData","value","segmentations","some","seg","segments","getSegmentationData","find","isValueUsed","has","handleSegmentClick","segment","e","stopPropagation","console","log","segmentValue","addToGroup","handleTagClick","renderTag","source","key","isLastStep","valueText","segmentation","onClick","title","disabled","map","segIdx","segmentText","isSubstring","renderEnhancedView","row","type","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","item","Array","isArray","every","v","val","toggleFilterSegment","prev","newFilters","set","delete","size","add","hasActiveFilters","Object","keys","matchesFilters","rowValues","filterValues","matchFound","filter","renderGroupedData","entries","index","_activeFilters$key","isFiltered","isUsedInGroup","addUserGroup","trim","id","Date","now","name","items","startEditingGroupName","saveGroupName","updatedGroups","handleEditKeyDown","groupIndex","removeFromGroup","itemIndex","valueToRemove","splice","isUsedInOtherGroups","group","newUsedValues","toggleGroupSelection","renderUserGroups","onChange","target","placeholder","onKeyDown","onBlur","autoFocus","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData, groupingData }) => {\n  // Add state for user-defined groups\n  const [userGroups, setUserGroups] = useState([]);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedGroup, setSelectedGroup] = useState(null);\n  const [editingGroupIndex, setEditingGroupIndex] = useState(null);\n  const [editingGroupName, setEditingGroupName] = useState('');\n  \n  // Track which values have been added to any group\n  const [usedValues, setUsedValues] = useState(new Set());\n  \n  // Add state for filter functionality\n  const [activeFilters, setActiveFilters] = useState({});\n  const [isFilteringActive, setIsFilteringActive] = useState(false);\n\n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Check if a value has been used in any group\n  const isValueUsed = (value) => {\n    return usedValues.has(value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    \n    // If a group is selected, add the segment to that group\n    if (selectedGroup !== null) {\n      const segmentValue = typeof segment === 'string' ? segment : segment.text;\n      addToGroup(selectedGroup, segmentValue);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = (value) => {\n    console.log('Whole tag clicked:', value);\n    \n    // If a group is selected and value not already used, add the value to that group\n    if (selectedGroup !== null && !isValueUsed(value)) {\n      addToGroup(selectedGroup, value);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Add class if this value is already used in a group\n    if (isValueUsed(typeof value === 'string' ? value : value.value)) {\n      className += ' used-value';\n    }\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <div key={key} className={`${className} tag-container ${isValueUsed(valueText) ? 'used-value' : ''}`}>\n          <button \n            className=\"whole-tag-button\" \n            onClick={() => handleTagClick(valueText)}\n            title=\"전체 태그 선택\"\n            disabled={isValueUsed(valueText)}\n          >\n            {valueText}\n          </button>\n          <div className=\"segments-container\">\n            {segmentation.segments.map((segment, segIdx) => {\n              const segmentText = segment.text;\n              return (\n                <button \n                  key={`seg-${segIdx}`} \n                  className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`}\n                  onClick={(e) => handleSegmentClick(segment, e)}\n                  disabled={isValueUsed(segmentText)}\n                >\n                  {segmentText}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      );\n    }\n    \n    // No segmentation, render normally but still clickable\n    return (\n      <button \n        key={key} \n        className={`${className} clickable-tag simple-tag-button ${isValueUsed(valueText) ? 'used-value' : ''}`}\n        onClick={() => handleTagClick(valueText)}\n        disabled={isValueUsed(valueText)}\n      >\n        {valueText}\n      </button>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          const source = item.source || 'text';\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <div \n                key={idx} \n                className={`value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`}\n              >\n                <button \n                  className=\"whole-tag-button\" \n                  onClick={() => handleTagClick(value)}\n                  title=\"전체 태그 선택\"\n                  disabled={isValueUsed(value)}\n                >\n                  {value}\n                </button>\n                <div className=\"segments-container\">\n                  {segments.map((segment, segIdx) => {\n                    const segmentText = segment.text;\n                    return (\n                      <button \n                        key={`seg-${segIdx}`} \n                        className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueUsed(segmentText) ? 'used-value' : ''}`}\n                        onClick={(e) => handleSegmentClick(segment, e)}\n                        disabled={isValueUsed(segmentText)}\n                      >\n                        {segmentText}\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <button \n              key={idx} \n              className={`value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueUsed(value) ? 'used-value' : ''}`}\n              onClick={() => handleTagClick(value)}\n              disabled={isValueUsed(value)}\n            >\n              {value}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n  \n  // Toggle a filter segment\n  const toggleFilterSegment = (key, segment) => {\n    setActiveFilters(prev => {\n      const newFilters = { ...prev };\n      \n      if (!newFilters[key]) {\n        newFilters[key] = new Set([segment]);\n      } else {\n        const set = new Set(newFilters[key]);\n        if (set.has(segment)) {\n          set.delete(segment);\n          if (set.size === 0) {\n            delete newFilters[key];\n          } else {\n            newFilters[key] = set;\n          }\n        } else {\n          set.add(segment);\n          newFilters[key] = set;\n        }\n      }\n      \n      // Check if we have any active filters\n      const hasActiveFilters = Object.keys(newFilters).length > 0;\n      setIsFilteringActive(hasActiveFilters);\n      \n      return newFilters;\n    });\n  };\n  \n  // Check if a row matches the current filters\n  const matchesFilters = (row) => {\n    if (!isFilteringActive) return true;\n    if (!row.separated || row.separated.length === 0) return false;\n    \n    // Get all values in this row\n    const rowValues = row.separated.map(item => \n      typeof item === 'string' ? item : item.value\n    );\n    \n    // Check if any value in the row matches any active filter\n    for (const key in activeFilters) {\n      const filterValues = activeFilters[key];\n      const matchFound = [...filterValues].some(filter => rowValues.includes(filter));\n      if (matchFound) return true;\n    }\n    \n    return false;\n  };\n  \n  // Render grouped data without duplicates\n  const renderGroupedData = () => {\n    if (!groupingData) {\n      return null;\n    }\n    \n    return (\n      <div className=\"grouped-data-section\">\n        <div className=\"filter-header\">\n          <h3>분절값 필터</h3>\n          {isFilteringActive && (\n            <button \n              className=\"clear-filters-btn\"\n              onClick={() => {\n                setActiveFilters({});\n                setIsFilteringActive(false);\n              }}\n            >\n              초기화\n            </button>\n          )}\n        </div>\n        <div className=\"filter-chips-container\">\n          {Object.entries(groupingData).map(([key, segments], index) => (\n            <div key={`group-${index}`} className=\"filter-category\">\n              <span className=\"filter-category-name\">{key}:</span>\n              <div className=\"filter-chips\">\n                {Array.isArray(segments) && segments.map((segment, idx) => {\n                  const isFiltered = activeFilters[key]?.has(segment);\n                  const isUsedInGroup = isValueUsed(segment);\n                  \n                  return (\n                    <button \n                      key={`segment-${idx}`} \n                      className={`filter-chip ${isFiltered ? 'active-filter' : ''} ${isUsedInGroup ? 'used-value' : ''}`}\n                      onClick={() => {\n                        if (selectedGroup !== null && !isUsedInGroup) {\n                          // Add to group\n                          handleTagClick(segment);\n                        } else {\n                          // Filter the data\n                          toggleFilterSegment(key, segment);\n                        }\n                      }}\n                      disabled={isUsedInGroup}\n                      title={selectedGroup !== null ? \"그룹에 추가\" : \"필터링\"}\n                    >\n                      {segment}\n                      {isFiltered && <span className=\"filter-indicator\">✓</span>}\n                    </button>\n                  );\n                })}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Add new user group\n  const addUserGroup = () => {\n    if (newGroupName.trim() === '') return;\n    \n    setUserGroups([\n      ...userGroups,\n      { id: Date.now(), name: newGroupName, items: [] }\n    ]);\n    setNewGroupName('');\n  };\n\n  // Start editing a group name\n  const startEditingGroupName = (index, name, e) => {\n    e.stopPropagation(); // Prevent group selection\n    setEditingGroupIndex(index);\n    setEditingGroupName(name);\n  };\n\n  // Save the edited group name\n  const saveGroupName = (index, e) => {\n    e.stopPropagation(); // Prevent group selection\n    \n    if (editingGroupName.trim() === '') return;\n    \n    const updatedGroups = [...userGroups];\n    updatedGroups[index].name = editingGroupName;\n    setUserGroups(updatedGroups);\n    setEditingGroupIndex(null);\n    setEditingGroupName('');\n  };\n\n  // Handle keydown in the editing input\n  const handleEditKeyDown = (index, e) => {\n    if (e.key === 'Enter') {\n      saveGroupName(index, e);\n    } else if (e.key === 'Escape') {\n      setEditingGroupIndex(null);\n      setEditingGroupName('');\n    }\n  };\n\n  // Add segment to specific group\n  const addToGroup = (groupIndex, value) => {\n    // Don't add if already exists in this group or in any other group\n    if (userGroups[groupIndex].items.includes(value) || isValueUsed(value)) return;\n    \n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.push(value);\n    setUserGroups(updatedGroups);\n    \n    // Mark this value as used\n    setUsedValues(prev => new Set([...prev, value]));\n  };\n\n  // Remove item from group\n  const removeFromGroup = (groupIndex, itemIndex) => {\n    const valueToRemove = userGroups[groupIndex].items[itemIndex];\n    const updatedGroups = [...userGroups];\n    updatedGroups[groupIndex].items.splice(itemIndex, 1);\n    setUserGroups(updatedGroups);\n    \n    // Check if the value exists in any other group before removing from usedValues\n    const isUsedInOtherGroups = userGroups.some((group, idx) => \n      idx !== groupIndex && group.items.includes(valueToRemove)\n    );\n    \n    if (!isUsedInOtherGroups) {\n      const newUsedValues = new Set(usedValues);\n      newUsedValues.delete(valueToRemove);\n      setUsedValues(newUsedValues);\n    }\n  };\n\n  // Select group to add items to\n  const toggleGroupSelection = (index) => {\n    setSelectedGroup(selectedGroup === index ? null : index);\n  };\n\n  // Render user-defined groups\n  const renderUserGroups = () => {\n    return (\n      <div className=\"user-groups-section\">\n        <h3>사용자 정의 그룹</h3>\n        \n        {/* Group creation form */}\n        <div className=\"group-creation-form\">\n          <input\n            type=\"text\"\n            value={newGroupName}\n            onChange={(e) => setNewGroupName(e.target.value)}\n            placeholder=\"새 그룹 이름 입력\"\n            className=\"group-name-input\"\n          />\n          <button onClick={addUserGroup} className=\"add-group-btn\">\n            <span>+</span> 그룹 추가\n          </button>\n        </div>\n        \n        {/* Groups list */}\n        <div className=\"user-groups-list\">\n          {userGroups.length === 0 ? (\n            <div className=\"no-groups-message\">\n              생성된 그룹이 없습니다. 위 입력창에서 그룹을 추가해주세요.\n            </div>\n          ) : (\n            userGroups.map((group, groupIndex) => (\n              <div \n                key={group.id} \n                className={`user-group-box ${selectedGroup === groupIndex ? 'selected-group' : ''}`}\n                onClick={() => toggleGroupSelection(groupIndex)}\n              >\n                <div className=\"user-group-header\">\n                  {editingGroupIndex === groupIndex ? (\n                    <div className=\"user-group-name-edit\">\n                      <input\n                        type=\"text\"\n                        value={editingGroupName}\n                        onChange={(e) => setEditingGroupName(e.target.value)}\n                        onClick={(e) => e.stopPropagation()} // Prevent group selection\n                        onKeyDown={(e) => handleEditKeyDown(groupIndex, e)}\n                        onBlur={(e) => saveGroupName(groupIndex, e)}\n                        autoFocus\n                        className=\"group-name-edit-input\"\n                      />\n                    </div>\n                  ) : (\n                    <div className=\"user-group-name-container\">\n                      <div className=\"user-group-name\">{group.name}</div>\n                      <button \n                        className=\"edit-group-name-btn\"\n                        onClick={(e) => startEditingGroupName(groupIndex, group.name, e)}\n                        title=\"그룹명 수정\"\n                      >\n                        ✎\n                      </button>\n                    </div>\n                  )}\n                  <div className=\"user-group-selection-status\">\n                    {selectedGroup === groupIndex ? '선택됨' : '클릭하여 선택'}\n                  </div>\n                </div>\n                <div className=\"user-group-items\">\n                  {group.items.length === 0 ? (\n                    <div className=\"empty-group-message\">\n                      상단의 분절값 필터에서 값을 클릭하여 이 그룹에 추가하세요\n                    </div>\n                  ) : (\n                    <div className=\"user-group-items-list\">\n                      {group.items.map((item, itemIndex) => (\n                        <div key={itemIndex} className=\"user-group-item\">\n                          <span className=\"item-text\">{item}</span>\n                          <button \n                            className=\"remove-item-btn\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              removeFromGroup(groupIndex, itemIndex);\n                            }}\n                          >\n                            ×\n                          </button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"data-display\">\n      {/* Segmented values list at the top */}\n      {groupingData && (\n        <div className=\"segmented-values-section\">\n          {renderGroupedData()}\n        </div>\n      )}\n      \n      {/* Two-column layout for processed data and user groups */}\n      <div className=\"main-content-layout\">\n        <div className=\"processed-data-section\">\n          <h3>처리된 데이터 {isFilteringActive && <span className=\"filter-active-indicator\">(필터 적용됨)</span>}</h3>\n          <table className=\"data-table\">\n            <tbody>\n              {flattenData(processedData).filter(matchesFilters).map((row, index) => (\n                <tr key={index}>\n                  <td className=\"enhanced-view\">\n                    {renderEnhancedView(row)}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n        \n        {/* User-defined groups to the right of processed data */}\n        <div className=\"user-groups-wrapper\">\n          {renderUserGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}