{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\";\nimport React from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData\n}) => {\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: className,\n        children: segmentation.segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: segment.isSubstring ? 'segment-matched' : 'segment-unmatched',\n          children: [segment.text, segIdx < segmentation.segments.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"segment-divider\",\n            children: \"/\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 61\n          }, this)]\n        }, `seg-${segIdx}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this))\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: className,\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value-tag\",\n            children: segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: segment.isSubstring ? 'segment-matched' : 'segment-unmatched',\n              children: [segment.text, segIdx < segments.length - 1 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"segment-divider\",\n                children: \"/\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 54\n              }, this)]\n            }, `seg-${segIdx}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 19\n            }, this))\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-tag\",\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"enhanced-view\",\n            children: renderEnhancedView(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 204,\n    columnNumber: 5\n  }, this);\n};\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","segmentationData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","hasSegmentationData","value","segmentations","some","seg","segments","getSegmentationData","find","renderTag","source","key","isLastStep","valueText","segmentation","map","segment","segIdx","isSubstring","renderEnhancedView","row","type","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","item","Array","isArray","every","v","val","index","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData }) => {\n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <span key={key} className={className}>\n          {segmentation.segments.map((segment, segIdx) => (\n            <span \n              key={`seg-${segIdx}`} \n              className={segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}\n            >\n              {segment.text}\n              {segIdx < segmentation.segments.length - 1 && <span className=\"segment-divider\">/</span>}\n            </span>\n          ))}\n        </span>\n      );\n    }\n    \n    // No segmentation, render normally\n    return (\n      <span key={key} className={className}>\n        {valueText}\n      </span>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <span key={idx} className=\"value-tag\">\n                {segments.map((segment, segIdx) => (\n                  <span \n                    key={`seg-${segIdx}`} \n                    className={segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}\n                  >\n                    {segment.text}\n                    {segIdx < segments.length - 1 && <span className=\"segment-divider\">/</span>}\n                  </span>\n                ))}\n              </span>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <span key={idx} className=\"value-tag\">\n              {value}\n            </span>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n\n  return (\n    <div className=\"data-display\">\n      <table className=\"data-table\">\n        <tbody>\n          {flattenData(processedData).map((row, index) => (\n            <tr key={index}>\n              <td className=\"enhanced-view\">\n                {renderEnhancedView(row)}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}