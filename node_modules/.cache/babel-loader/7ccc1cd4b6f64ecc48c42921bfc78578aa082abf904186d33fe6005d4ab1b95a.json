{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/HeaderCombinationTextList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { fetchHeaderCombinationTextList } from '../services/api';\nimport './HeaderCombinationTextList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationTextList = ({\n  channel,\n  selectedCombination,\n  selectedCombinations = []\n}) => {\n  _s();\n  const [combinationTexts, setCombinationTexts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('텍스트조회');\n  const [sectionName, setSectionName] = useState('');\n  // Mining states\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [minSupport, setMinSupport] = useState(0.01);\n  const [minConfidence, setMinConfidence] = useState(0.01);\n  const [maxDepth, setMaxDepth] = useState(100);\n\n  // 실제 사용할 조합 목록 결정 (단일 selectedCombination과 다중 selectedCombinations 지원)\n  const effectiveCombinations = useMemo(() => {\n    // 다중 선택이 있는 경우 우선 사용\n    if (selectedCombinations && selectedCombinations.length > 0) {\n      return selectedCombinations;\n    }\n    // 다중 선택이 없고 단일 선택이 있는 경우\n    if (selectedCombination) {\n      return [selectedCombination];\n    }\n    // 아무것도 선택되지 않은 경우\n    return [];\n  }, [selectedCombination, selectedCombinations]);\n  useEffect(() => {\n    const getCombinationTexts = async () => {\n      if (!channel || effectiveCombinations.length === 0) return;\n      setLoading(true);\n      try {\n        // 모든 선택된 조합을 API에 전달\n        const response = await fetchHeaderCombinationTextList(channel, effectiveCombinations);\n        console.log('Combination texts response:', response);\n        setCombinationTexts(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationTexts([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationTexts();\n  }, [channel, effectiveCombinations]);\n\n  // Generate FP-growth tree when combination texts change\n  useEffect(() => {\n    if (combinationTexts && combinationTexts.length > 0 && activeTab === '마이닝') {\n      generateFPGrowthTree(combinationTexts);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationTexts, activeTab, minSupport, minConfidence, maxDepth]);\n\n  // Function to generate FP-growth tree from text data\n  const generateFPGrowthTree = textData => {\n    if (!textData || textData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions by splitting each text by '>' and trimming\n    const transactions = textData.filter(item => item.text).map(item => {\n      return item.text.split('>').map(segment => segment.trim()).filter(segment => segment.length > 0);\n    }).filter(transaction => transaction.length > 0);\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n\n    // FP-GROWTH for a single hierarchical tree\n    // Step 3: Reorder transactions based on frequency\n    const orderedTransactions = transactions.map(transaction => {\n      return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n    }).filter(transaction => transaction.length > 0);\n\n    // Create a single root node for the most frequent item\n    const rootItem = frequentItems[0];\n    const singleTreeRoot = {\n      id: rootItem,\n      name: rootItem,\n      support: itemCounts[rootItem],\n      confidence: itemCounts[rootItem] / totalTransactions,\n      children: []\n    };\n\n    // Create a mapping of patterns to their support count\n    const patternSupports = {};\n\n    // First pass - gather all pattern supports\n    orderedTransactions.forEach(transaction => {\n      if (transaction.length < 2) return;\n      for (let i = 0; i < transaction.length; i++) {\n        for (let j = i + 1; j < transaction.length; j++) {\n          const pattern = [transaction[i], transaction[j]];\n          const key = pattern.join('-');\n          patternSupports[key] = (patternSupports[key] || 0) + 1;\n        }\n      }\n    });\n\n    // Then build tree with those precomputed pattern supports\n    const buildOrderedFPTree = (currentNode, level) => {\n      if (level >= maxDepth) return;\n      const currentItemIndex = frequentItems.indexOf(currentNode.name);\n      for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n        const nextItem = frequentItems[i];\n\n        // Check if the pair meets minimum support\n        const patternKey = [currentNode.name, nextItem].join('-');\n        const support = patternSupports[patternKey] || 0;\n        if (support >= Math.max(2, minSupportCount)) {\n          const confidence = support / itemCounts[currentNode.name];\n          if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n            const childNode = {\n              id: `${currentNode.id}-${nextItem}`,\n              name: nextItem,\n              support: support,\n              confidence: confidence,\n              children: []\n            };\n            currentNode.children.push(childNode);\n            buildOrderedFPTree(childNode, level + 1);\n          }\n        }\n      }\n    };\n\n    // Start building the tree from the root\n    buildOrderedFPTree(singleTreeRoot, 1);\n\n    // Initialize expanded nodes for visualization\n    const initialExpanded = {};\n    initialExpanded[rootItem] = true; // Expand root node\n\n    // Expand first level children\n    if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n      singleTreeRoot.children.slice(0, 5).forEach(child => {\n        initialExpanded[child.id] = true;\n\n        // Also expand first grandchild if available\n        if (child.children && child.children.length > 0) {\n          initialExpanded[child.children[0].id] = true;\n        }\n      });\n    }\n\n    // Set the result as a single-item array containing the root\n    setMiningData([singleTreeRoot]);\n    setExpandedNodes(initialExpanded);\n  };\n\n  // Toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  const handleConfidenceChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n  const handleDepthChange = e => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n  const handleSectionNameChange = e => {\n    setSectionName(e.target.value);\n  };\n\n  // Render tree node\n  const renderTreeNode = (node, level = 0) => {\n    if (!node) return null;\n    const isExpanded = expandedNodes[node.id];\n    const hasChildren = node.children && node.children.length > 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node\",\n      style: {\n        paddingLeft: `${level * 20}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-header\",\n        children: [hasChildren && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: `toggle-icon ${isExpanded ? 'expanded' : 'collapsed'}`,\n          onClick: () => toggleNode(node.id),\n          children: isExpanded ? '▼' : '►'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"node-name\",\n          children: [node.name, \" (\", Math.round(node.support), \" / \", (node.confidence * 100).toFixed(1), \"%)\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), isExpanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-children\",\n        children: node.children.map(child => renderTreeNode(child, level + 1))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render mining settings\n  const renderMiningSettings = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-settings\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uB9C8\\uC774\\uB2DD \\uC124\\uC815\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          max: \"1\",\n          step: \"0.01\",\n          value: minSupport,\n          onChange: handleSupportChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uCD5C\\uC18C \\uC2E0\\uB8B0\\uB3C4:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"0.01\",\n          max: \"1\",\n          step: \"0.01\",\n          value: minConfidence,\n          onChange: handleConfidenceChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"setting-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"\\uCD5C\\uB300 \\uAE4A\\uC774:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          min: \"1\",\n          max: \"100\",\n          step: \"1\",\n          value: maxDepth,\n          onChange: handleDepthChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render mining view\n  const renderMiningView = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-view-container\",\n      children: [renderMiningSettings(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"fp-tree-container\",\n        children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading\",\n          children: \"\\uB85C\\uB529 \\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 13\n        }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: [\"\\uC5D0\\uB7EC: \", error]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 13\n        }, this) : miningData && miningData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-container\",\n          children: miningData.map(root => renderTreeNode(root))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-message\",\n          children: \"\\uB9C8\\uC774\\uB2DD \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCreateSection = () => {\n    if (!sectionName.trim()) {\n      alert('섹션명을 입력해주세요.');\n      return;\n    }\n\n    // 여기에 섹션 생성 로직을 추가합니다\n    console.log('섹션 생성:', sectionName, '조합:', effectiveCombinations);\n    // TODO: API 호출 및 성공 후 처리\n    alert(`\"${sectionName}\" 섹션이 생성되었습니다.`);\n    setSectionName('');\n  };\n  if (!channel || effectiveCombinations.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uCC44\\uB110\\uACFC \\uD5E4\\uB354 \\uC870\\uD569\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this);\n  }\n  const renderSectionCreationArea = () => {\n    // Count of selected combinations\n    const selectedCount = effectiveCombinations.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-creation-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-creation-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-creation-title\",\n          children: \"\\uC139\\uC158 \\uC0DD\\uC131 \\uC601\\uC5ED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-combination-count\",\n          children: [\"\\uC120\\uD0DD\\uB41C \\uC870\\uD569: \", selectedCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-creation-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"section-name\",\n            children: \"\\uC139\\uC158\\uBA85:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"section-name\",\n            value: sectionName,\n            onChange: handleSectionNameChange,\n            placeholder: \"\\uC0C8 \\uC139\\uC158 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n            className: \"section-name-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"create-section-btn\",\n          onClick: handleCreateSection,\n          disabled: !sectionName.trim(),\n          children: \"\\uC139\\uC158 \\uB4F1\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"column-title\",\n      children: \"\\uC139\\uC158 \\uC0DD\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 7\n    }, this), renderSectionCreationArea(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-content\",\n      children: activeTab === '텍스트조회' ? loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 13\n      }, this) : combinationTexts && combinationTexts.length > 0 ? combinationTexts.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-text\",\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-count\",\n          children: [\"(\", item.count, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uD5E4\\uB354 \\uC870\\uD569 \\uD14D\\uC2A4\\uD2B8 \\uC815\\uBCF4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 13\n      }, this) : renderMiningView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === '텍스트조회' ? 'active' : ''}`,\n        onClick: () => setActiveTab('텍스트조회'),\n        children: \"\\uD14D\\uC2A4\\uD2B8\\uC870\\uD68C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === '마이닝' ? 'active' : ''}`,\n        onClick: () => setActiveTab('마이닝'),\n        children: \"\\uB9C8\\uC774\\uB2DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationTextList, \"fy3RQCT/kyipZWAr0tCAbaFSBZE=\");\n_c = HeaderCombinationTextList;\nexport default HeaderCombinationTextList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationTextList\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","fetchHeaderCombinationTextList","jsxDEV","_jsxDEV","HeaderCombinationTextList","channel","selectedCombination","selectedCombinations","_s","combinationTexts","setCombinationTexts","loading","setLoading","error","setError","activeTab","setActiveTab","sectionName","setSectionName","miningData","setMiningData","expandedNodes","setExpandedNodes","minSupport","setMinSupport","minConfidence","setMinConfidence","maxDepth","setMaxDepth","effectiveCombinations","length","getCombinationTexts","response","console","log","list","err","message","generateFPGrowthTree","textData","transactions","filter","item","text","map","split","segment","trim","transaction","itemCounts","totalTransactions","forEach","minSupportCount","Math","max","floor","frequentItems","Object","keys","sort","a","b","orderedTransactions","includes","rootItem","singleTreeRoot","id","name","support","confidence","children","patternSupports","i","j","pattern","key","join","buildOrderedFPTree","currentNode","level","currentItemIndex","indexOf","nextItem","patternKey","childNode","push","initialExpanded","slice","child","toggleNode","nodeId","prev","handleSupportChange","e","value","parseFloat","target","isNaN","handleConfidenceChange","handleDepthChange","parseInt","handleSectionNameChange","renderTreeNode","node","isExpanded","hasChildren","className","style","paddingLeft","onClick","fileName","_jsxFileName","lineNumber","columnNumber","round","toFixed","renderMiningSettings","type","min","step","onChange","renderMiningView","root","handleCreateSection","alert","renderSectionCreationArea","selectedCount","htmlFor","placeholder","disabled","index","count","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/HeaderCombinationTextList.js"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { fetchHeaderCombinationTextList } from '../services/api';\nimport './HeaderCombinationTextList.css';\n\nconst HeaderCombinationTextList = ({ channel, selectedCombination, selectedCombinations = [] }) => {\n  const [combinationTexts, setCombinationTexts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('텍스트조회');\n  const [sectionName, setSectionName] = useState('');\n  // Mining states\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [minSupport, setMinSupport] = useState(0.01);\n  const [minConfidence, setMinConfidence] = useState(0.01);\n  const [maxDepth, setMaxDepth] = useState(100);\n\n  // 실제 사용할 조합 목록 결정 (단일 selectedCombination과 다중 selectedCombinations 지원)\n  const effectiveCombinations = useMemo(() => {\n    // 다중 선택이 있는 경우 우선 사용\n    if (selectedCombinations && selectedCombinations.length > 0) {\n      return selectedCombinations;\n    }\n    // 다중 선택이 없고 단일 선택이 있는 경우\n    if (selectedCombination) {\n      return [selectedCombination];\n    }\n    // 아무것도 선택되지 않은 경우\n    return [];\n  }, [selectedCombination, selectedCombinations]);\n\n  useEffect(() => {\n    const getCombinationTexts = async () => {\n      if (!channel || effectiveCombinations.length === 0) return;\n      \n      setLoading(true);\n      try {\n        // 모든 선택된 조합을 API에 전달\n        const response = await fetchHeaderCombinationTextList(channel, effectiveCombinations);\n        console.log('Combination texts response:', response);\n        setCombinationTexts(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationTexts([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationTexts();\n  }, [channel, effectiveCombinations]);\n\n  // Generate FP-growth tree when combination texts change\n  useEffect(() => {\n    if (combinationTexts && combinationTexts.length > 0 && activeTab === '마이닝') {\n      generateFPGrowthTree(combinationTexts);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationTexts, activeTab, minSupport, minConfidence, maxDepth]);\n\n  // Function to generate FP-growth tree from text data\n  const generateFPGrowthTree = (textData) => {\n    if (!textData || textData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions by splitting each text by '>' and trimming\n    const transactions = textData\n      .filter(item => item.text)\n      .map(item => {\n        return item.text\n          .split('>')\n          .map(segment => segment.trim())\n          .filter(segment => segment.length > 0);\n      })\n      .filter(transaction => transaction.length > 0);\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    \n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    \n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n    \n    // FP-GROWTH for a single hierarchical tree\n    // Step 3: Reorder transactions based on frequency\n    const orderedTransactions = transactions.map(transaction => {\n      return transaction\n        .filter(item => frequentItems.includes(item))\n        .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    }).filter(transaction => transaction.length > 0);\n    \n    // Create a single root node for the most frequent item\n    const rootItem = frequentItems[0];\n    \n    const singleTreeRoot = {\n      id: rootItem,\n      name: rootItem,\n      support: itemCounts[rootItem],\n      confidence: itemCounts[rootItem] / totalTransactions,\n      children: []\n    };\n    \n    // Create a mapping of patterns to their support count\n    const patternSupports = {};\n    \n    // First pass - gather all pattern supports\n    orderedTransactions.forEach(transaction => {\n      if (transaction.length < 2) return;\n      \n      for (let i = 0; i < transaction.length; i++) {\n        for (let j = i + 1; j < transaction.length; j++) {\n          const pattern = [transaction[i], transaction[j]];\n          const key = pattern.join('-');\n          patternSupports[key] = (patternSupports[key] || 0) + 1;\n        }\n      }\n    });\n    \n    // Then build tree with those precomputed pattern supports\n    const buildOrderedFPTree = (currentNode, level) => {\n      if (level >= maxDepth) return;\n      \n      const currentItemIndex = frequentItems.indexOf(currentNode.name);\n      \n      for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n        const nextItem = frequentItems[i];\n        \n        // Check if the pair meets minimum support\n        const patternKey = [currentNode.name, nextItem].join('-');\n        const support = patternSupports[patternKey] || 0;\n        \n        if (support >= Math.max(2, minSupportCount)) {\n          const confidence = support / itemCounts[currentNode.name];\n          \n          if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n            const childNode = {\n              id: `${currentNode.id}-${nextItem}`,\n              name: nextItem,\n              support: support,\n              confidence: confidence,\n              children: []\n            };\n            \n            currentNode.children.push(childNode);\n            buildOrderedFPTree(childNode, level + 1);\n          }\n        }\n      }\n    };\n    \n    // Start building the tree from the root\n    buildOrderedFPTree(singleTreeRoot, 1);\n    \n    // Initialize expanded nodes for visualization\n    const initialExpanded = {};\n    initialExpanded[rootItem] = true; // Expand root node\n    \n    // Expand first level children\n    if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n      singleTreeRoot.children.slice(0, 5).forEach(child => {\n        initialExpanded[child.id] = true;\n        \n        // Also expand first grandchild if available\n        if (child.children && child.children.length > 0) {\n          initialExpanded[child.children[0].id] = true;\n        }\n      });\n    }\n    \n    // Set the result as a single-item array containing the root\n    setMiningData([singleTreeRoot]);\n    setExpandedNodes(initialExpanded);\n  };\n\n  // Toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  const handleConfidenceChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n\n  const handleDepthChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  const handleSectionNameChange = (e) => {\n    setSectionName(e.target.value);\n  };\n\n  // Render tree node\n  const renderTreeNode = (node, level = 0) => {\n    if (!node) return null;\n    \n    const isExpanded = expandedNodes[node.id];\n    const hasChildren = node.children && node.children.length > 0;\n    \n    return (\n      <div className=\"tree-node\" key={node.id} style={{ paddingLeft: `${level * 20}px` }}>\n        <div className=\"node-header\">\n          {hasChildren && (\n            <span \n              className={`toggle-icon ${isExpanded ? 'expanded' : 'collapsed'}`}\n              onClick={() => toggleNode(node.id)}\n            >\n              {isExpanded ? '▼' : '►'}\n            </span>\n          )}\n          <span className=\"node-name\">\n            {node.name} ({Math.round(node.support)} / {(node.confidence * 100).toFixed(1)}%)\n          </span>\n        </div>\n        \n        {isExpanded && hasChildren && (\n          <div className=\"node-children\">\n            {node.children.map(child => renderTreeNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render mining settings\n  const renderMiningSettings = () => {\n    return (\n      <div className=\"mining-settings\">\n        <h3>마이닝 설정</h3>\n        <div className=\"setting-group\">\n          <label>최소 지지도:</label>\n          <input \n            type=\"number\" \n            min=\"0.01\" \n            max=\"1\" \n            step=\"0.01\" \n            value={minSupport} \n            onChange={handleSupportChange}\n          />\n        </div>\n        <div className=\"setting-group\">\n          <label>최소 신뢰도:</label>\n          <input \n            type=\"number\" \n            min=\"0.01\" \n            max=\"1\" \n            step=\"0.01\" \n            value={minConfidence} \n            onChange={handleConfidenceChange}\n          />\n        </div>\n        <div className=\"setting-group\">\n          <label>최대 깊이:</label>\n          <input \n            type=\"number\" \n            min=\"1\" \n            max=\"100\" \n            step=\"1\" \n            value={maxDepth} \n            onChange={handleDepthChange}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  // Render mining view\n  const renderMiningView = () => {\n    return (\n      <div className=\"mining-view-container\">\n        {renderMiningSettings()}\n        <div className=\"fp-tree-container\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : miningData && miningData.length > 0 ? (\n            <div className=\"tree-container\">\n              {miningData.map(root => renderTreeNode(root))}\n            </div>\n          ) : (\n            <div className=\"empty-message\">마이닝 데이터가 없습니다.</div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  const handleCreateSection = () => {\n    if (!sectionName.trim()) {\n      alert('섹션명을 입력해주세요.');\n      return;\n    }\n    \n    // 여기에 섹션 생성 로직을 추가합니다\n    console.log('섹션 생성:', sectionName, '조합:', effectiveCombinations);\n    // TODO: API 호출 및 성공 후 처리\n    alert(`\"${sectionName}\" 섹션이 생성되었습니다.`);\n    setSectionName('');\n  };\n\n  if (!channel || effectiveCombinations.length === 0) {\n    return (\n      <div className=\"column-container\">\n        <div className=\"column-empty\">채널과 헤더 조합을 선택해주세요.</div>\n      </div>\n    );\n  }\n\n  const renderSectionCreationArea = () => {\n    // Count of selected combinations\n    const selectedCount = effectiveCombinations.length;\n    \n    return (\n      <div className=\"section-creation-area\">\n        <div className=\"section-creation-header\">\n          <div className=\"section-creation-title\">섹션 생성 영역</div>\n          <div className=\"selected-combination-count\">선택된 조합: {selectedCount}개</div>\n        </div>\n        <div className=\"section-creation-form\">\n          <div className=\"section-input-group\">\n            <label htmlFor=\"section-name\">섹션명:</label>\n            <input \n              type=\"text\" \n              id=\"section-name\" \n              value={sectionName}\n              onChange={handleSectionNameChange}\n              placeholder=\"새 섹션 이름을 입력하세요\"\n              className=\"section-name-input\"\n            />\n          </div>\n          <button \n            className=\"create-section-btn\"\n            onClick={handleCreateSection}\n            disabled={!sectionName.trim()}\n          >\n            섹션 등록\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"column-container\">\n      <h2 className=\"column-title\">섹션 생성</h2>\n      \n      {renderSectionCreationArea()}\n      \n      <div className=\"column-content\">\n        {activeTab === '텍스트조회' ? (\n          loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationTexts && combinationTexts.length > 0 ? (\n            combinationTexts.map((item, index) => (\n              <div\n                key={index}\n                className=\"column-item\"\n              >\n                <div className=\"item-text\">{item.text}</div>\n                <div className=\"item-count\">({item.count})</div>\n              </div>\n            ))\n          ) : (\n            <div className=\"column-empty\">헤더 조합 텍스트 정보가 없습니다.</div>\n          )\n        ) : (\n          renderMiningView()\n        )}\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === '텍스트조회' ? 'active' : ''}`}\n          onClick={() => setActiveTab('텍스트조회')}\n        >\n          텍스트조회\n        </button>\n        <button \n          className={`tab ${activeTab === '마이닝' ? 'active' : ''}`}\n          onClick={() => setActiveTab('마이닝')}\n        >\n          마이닝\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderCombinationTextList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}