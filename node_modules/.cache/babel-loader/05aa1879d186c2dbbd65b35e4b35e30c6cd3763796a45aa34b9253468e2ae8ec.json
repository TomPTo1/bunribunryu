{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationList = ({\n  channel,\n  selectedHeader,\n  onCombinationSelect,\n  selectedCombination\n}) => {\n  _s();\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningTree, setMiningTree] = useState(null);\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate simple mining tree data for test mode\n          generateMiningTree(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n\n          // Generate mining tree data from actual response\n          generateMiningTree(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningTree(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningTree(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Function to generate a simple FP Growth mining tree visualization data\n  const generateMiningTree = combinationData => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningTree(null);\n      return;\n    }\n\n    // Create a simple tree structure from the header combinations\n    const root = {\n      name: \"Root\",\n      children: [],\n      count: combinationData.length\n    };\n    const itemCounts = {};\n\n    // Count frequency of each header\n    combinationData.forEach(item => {\n      if (item.header_group) {\n        const headers = item.header_group.split('|');\n        headers.forEach(header => {\n          itemCounts[header] = (itemCounts[header] || 0) + 1;\n        });\n      }\n    });\n\n    // Sort items by frequency (descending)\n    const sortedItems = Object.keys(itemCounts).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create first level of tree (most frequent items)\n    sortedItems.forEach(item => {\n      root.children.push({\n        name: item,\n        count: itemCounts[item],\n        children: []\n      });\n    });\n\n    // For demonstration, add some children to the first few nodes\n    if (root.children.length > 0) {\n      const combinations = {};\n\n      // Find common combinations\n      combinationData.forEach(item => {\n        if (item.header_group) {\n          const headers = item.header_group.split('|');\n          for (let i = 0; i < headers.length; i++) {\n            for (let j = i + 1; j < headers.length; j++) {\n              const pair = `${headers[i]}:${headers[j]}`;\n              combinations[pair] = (combinations[pair] || 0) + 1;\n            }\n          }\n        }\n      });\n\n      // Add some child nodes based on common combinations\n      for (let i = 0; i < Math.min(3, root.children.length); i++) {\n        const parentName = root.children[i].name;\n        Object.keys(combinations).forEach(pair => {\n          const [first, second] = pair.split(':');\n          if (first === parentName && combinations[pair] > 1) {\n            root.children[i].children.push({\n              name: second,\n              count: combinations[pair],\n              children: []\n            });\n          }\n        });\n      }\n    }\n    setMiningTree(root);\n  };\n  const handleCombinationClick = combination => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = headerGroup => {\n    if (!headerGroup) return null;\n    const headers = headerGroup.split('|');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header-tags\",\n      children: headers.map((header, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"similarity-tag\",\n        children: header\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Function to render FP Growth mining tree\n  const renderMiningTree = (node, depth = 0) => {\n    if (!node) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-node\",\n      style: {\n        marginLeft: `${depth * 20}px`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-node-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mining-node-name\",\n          children: node.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"mining-node-count\",\n          children: [\"(\", node.count, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), node.children && node.children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-node-children\",\n        children: node.children.map((child, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-child\",\n          children: renderMiningTree(child, depth + 1)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this);\n  };\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n\n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n\n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningTree(null);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-title-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"column-title\",\n        children: !testMode && selectedHeader ? `헤더명 조합 목록: ${selectedHeader}` : '헤더명 조합 목록'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"test-mode-toggle\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"toggle-label\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Test Mode \", testMode ? 'ON' : 'OFF']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: testMode,\n            onChange: toggleTestMode\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-slider\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'combination' ? 'active' : ''}`,\n        onClick: () => setActiveTab('combination'),\n        children: \"\\uC870\\uD569\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === 'mining' ? 'active' : ''}`,\n        onClick: () => setActiveTab('mining'),\n        children: \"\\uB9C8\\uC774\\uB2DD\\uBDF0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), activeTab === 'combination' ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this) : combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-content\",\n        children: combinationHeaders.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `column-item ${selectedCombination === item.header_group ? 'selected' : ''}`,\n          onClick: () => handleCombinationClick(item.header_group),\n          children: renderHeaderGroupAsTags(item.header_group)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"테스트 모드가 활성화되었습니다.\" : \"채널과 헤더를 선택해주세요.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tab-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }, this) : miningTree ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-view\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-tree\",\n          children: renderMiningTree(miningTree)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 FP Growth 마이닝 트리가 표시됩니다.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationList, \"alA1o7cWtSmoQz2BsToLcyR2KAk=\");\n_c = HeaderCombinationList;\nexport default HeaderCombinationList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationList\");","map":{"version":3,"names":["React","useState","useEffect","fetchHeaderCombinationList","jsxDEV","_jsxDEV","HeaderCombinationList","channel","selectedHeader","onCombinationSelect","selectedCombination","_s","combinationHeaders","setCombinationHeaders","loading","setLoading","error","setError","activeTab","setActiveTab","testMode","setTestMode","miningTree","setMiningTree","getCombinationHeaders","response","console","log","list","generateMiningTree","headers","Array","isArray","err","message","combinationData","length","root","name","children","count","itemCounts","forEach","item","header_group","split","header","sortedItems","Object","keys","sort","a","b","push","combinations","i","j","pair","Math","min","parentName","first","second","handleCombinationClick","combination","renderHeaderGroupAsTags","headerGroup","className","map","index","fileName","_jsxFileName","lineNumber","columnNumber","renderMiningTree","node","depth","style","marginLeft","child","toggleTestMode","newTestMode","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/HeaderCombinationList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchHeaderCombinationList } from '../services/api';\nimport './Column.css';\n\nconst HeaderCombinationList = ({ channel, selectedHeader, onCombinationSelect, selectedCombination }) => {\n  const [combinationHeaders, setCombinationHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('combination'); // 'combination' or 'mining'\n  const [testMode, setTestMode] = useState(false); // Add test mode state\n  const [miningTree, setMiningTree] = useState(null);\n\n  useEffect(() => {\n    const getCombinationHeaders = async () => {\n      // Test mode can work without channel or header selection\n      if (!testMode && (!channel || !selectedHeader)) return;\n      \n      setLoading(true);\n      try {\n        if (testMode) {\n          // Use sample data in test mode\n          const response = await import('../sample_data/header_combination.json');\n          console.log('Using sample data for combination headers:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate simple mining tree data for test mode\n          generateMiningTree(response.list || []);\n        } else if (channel && selectedHeader) {\n          // Use API in normal mode only if channel and header are selected\n          const headers = Array.isArray(selectedHeader) ? selectedHeader : [selectedHeader];\n          const response = await fetchHeaderCombinationList(channel, headers);\n          console.log('Combination headers response:', response);\n          setCombinationHeaders(response.list || []);\n          \n          // Generate mining tree data from actual response\n          generateMiningTree(response.list || []);\n        } else {\n          // Clear data if test mode is turned off and no channel/header is selected\n          setCombinationHeaders([]);\n          setMiningTree(null);\n        }\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationHeaders([]);\n        setMiningTree(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationHeaders();\n  }, [channel, selectedHeader, testMode]); // Add testMode as dependency\n\n  // Function to generate a simple FP Growth mining tree visualization data\n  const generateMiningTree = (combinationData) => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningTree(null);\n      return;\n    }\n\n    // Create a simple tree structure from the header combinations\n    const root = { name: \"Root\", children: [], count: combinationData.length };\n    const itemCounts = {};\n    \n    // Count frequency of each header\n    combinationData.forEach(item => {\n      if (item.header_group) {\n        const headers = item.header_group.split('|');\n        headers.forEach(header => {\n          itemCounts[header] = (itemCounts[header] || 0) + 1;\n        });\n      }\n    });\n    \n    // Sort items by frequency (descending)\n    const sortedItems = Object.keys(itemCounts).sort((a, b) => \n      itemCounts[b] - itemCounts[a]\n    );\n    \n    // Create first level of tree (most frequent items)\n    sortedItems.forEach(item => {\n      root.children.push({\n        name: item,\n        count: itemCounts[item],\n        children: []\n      });\n    });\n    \n    // For demonstration, add some children to the first few nodes\n    if (root.children.length > 0) {\n      const combinations = {};\n      \n      // Find common combinations\n      combinationData.forEach(item => {\n        if (item.header_group) {\n          const headers = item.header_group.split('|');\n          for (let i = 0; i < headers.length; i++) {\n            for (let j = i + 1; j < headers.length; j++) {\n              const pair = `${headers[i]}:${headers[j]}`;\n              combinations[pair] = (combinations[pair] || 0) + 1;\n            }\n          }\n        }\n      });\n      \n      // Add some child nodes based on common combinations\n      for (let i = 0; i < Math.min(3, root.children.length); i++) {\n        const parentName = root.children[i].name;\n        \n        Object.keys(combinations).forEach(pair => {\n          const [first, second] = pair.split(':');\n          if (first === parentName && combinations[pair] > 1) {\n            root.children[i].children.push({\n              name: second,\n              count: combinations[pair],\n              children: []\n            });\n          }\n        });\n      }\n    }\n    \n    setMiningTree(root);\n  };\n\n  const handleCombinationClick = (combination) => {\n    if (onCombinationSelect) {\n      onCombinationSelect(combination);\n    }\n  };\n\n  // Function to render header_group as tags\n  const renderHeaderGroupAsTags = (headerGroup) => {\n    if (!headerGroup) return null;\n    \n    const headers = headerGroup.split('|');\n    return (\n      <div className=\"header-tags\">\n        {headers.map((header, index) => (\n          <span key={index} className=\"similarity-tag\">{header}</span>\n        ))}\n      </div>\n    );\n  };\n\n  // Function to render FP Growth mining tree\n  const renderMiningTree = (node, depth = 0) => {\n    if (!node) return null;\n    \n    return (\n      <div className=\"mining-node\" style={{ marginLeft: `${depth * 20}px` }}>\n        <div className=\"mining-node-content\">\n          <span className=\"mining-node-name\">{node.name}</span>\n          <span className=\"mining-node-count\">({node.count})</span>\n        </div>\n        {node.children && node.children.length > 0 && (\n          <div className=\"mining-node-children\">\n            {node.children.map((child, index) => (\n              <div key={index} className=\"mining-child\">\n                {renderMiningTree(child, depth + 1)}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const toggleTestMode = () => {\n    const newTestMode = !testMode;\n    setTestMode(newTestMode);\n    \n    // Log the test mode state change\n    console.log(`Test mode ${newTestMode ? 'enabled' : 'disabled'}`);\n    \n    // Clear combination data when turning off test mode if no channel/header selected\n    if (!newTestMode && (!channel || !selectedHeader)) {\n      setCombinationHeaders([]);\n      setMiningTree(null);\n    }\n  };\n\n  return (\n    <div className=\"column-container\">\n      <div className=\"column-title-container\">\n        <h2 className=\"column-title\">\n          {!testMode && selectedHeader \n            ? `헤더명 조합 목록: ${selectedHeader}` \n            : '헤더명 조합 목록'}\n        </h2>\n        <div className=\"test-mode-toggle\">\n          <label className=\"toggle-label\">\n            <span>Test Mode {testMode ? 'ON' : 'OFF'}</span>\n            <input \n              type=\"checkbox\" \n              checked={testMode}\n              onChange={toggleTestMode}\n            />\n            <span className=\"toggle-slider\"></span>\n          </label>\n        </div>\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === 'combination' ? 'active' : ''}`}\n          onClick={() => setActiveTab('combination')}\n        >\n          조합뷰\n        </button>\n        <button \n          className={`tab ${activeTab === 'mining' ? 'active' : ''}`}\n          onClick={() => setActiveTab('mining')}\n        >\n          마이닝뷰\n        </button>\n      </div>\n      \n      {activeTab === 'combination' ? (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationHeaders.length > 0 ? (\n            <div className=\"column-content\">\n              {combinationHeaders.map((item, index) => (\n                <div\n                  key={index}\n                  className={`column-item ${selectedCombination === item.header_group ? 'selected' : ''}`}\n                  onClick={() => handleCombinationClick(item.header_group)}\n                >\n                  {renderHeaderGroupAsTags(item.header_group)}\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"테스트 모드가 활성화되었습니다.\" \n                : \"채널과 헤더를 선택해주세요.\"}\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"tab-content\">\n          {loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : miningTree ? (\n            <div className=\"mining-view\">\n              <div className=\"mining-tree\">\n                {renderMiningTree(miningTree)}\n              </div>\n            </div>\n          ) : (\n            <div className=\"column-empty\">\n              {testMode \n                ? \"마이닝 데이터를 로딩 중입니다...\" \n                : \"채널과 헤더를 선택하면 FP Growth 마이닝 트리가 표시됩니다.\"}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HeaderCombinationList; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,0BAA0B,QAAQ,iBAAiB;AAC5D,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,cAAc;EAAEC,mBAAmB;EAAEC;AAAoB,CAAC,KAAK;EAAAC,EAAA;EACvG,MAAM,CAACC,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAChE,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;EACjD,MAAM,CAACqB,UAAU,EAAEC,aAAa,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAElDC,SAAS,CAAC,MAAM;IACd,MAAMsB,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC;MACA,IAAI,CAACJ,QAAQ,KAAK,CAACb,OAAO,IAAI,CAACC,cAAc,CAAC,EAAE;MAEhDO,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF,IAAIK,QAAQ,EAAE;UACZ;UACA,MAAMK,QAAQ,GAAG,MAAM,MAAM,CAAC,wCAAwC,CAAC;UACvEC,OAAO,CAACC,GAAG,CAAC,4CAA4C,EAAEF,QAAQ,CAAC;UACnEZ,qBAAqB,CAACY,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;;UAE1C;UACAC,kBAAkB,CAACJ,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;QACzC,CAAC,MAAM,IAAIrB,OAAO,IAAIC,cAAc,EAAE;UACpC;UACA,MAAMsB,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACxB,cAAc,CAAC,GAAGA,cAAc,GAAG,CAACA,cAAc,CAAC;UACjF,MAAMiB,QAAQ,GAAG,MAAMtB,0BAA0B,CAACI,OAAO,EAAEuB,OAAO,CAAC;UACnEJ,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;UACtDZ,qBAAqB,CAACY,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;;UAE1C;UACAC,kBAAkB,CAACJ,QAAQ,CAACG,IAAI,IAAI,EAAE,CAAC;QACzC,CAAC,MAAM;UACL;UACAf,qBAAqB,CAAC,EAAE,CAAC;UACzBU,aAAa,CAAC,IAAI,CAAC;QACrB;QACAN,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOgB,GAAG,EAAE;QACZhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,CAAC;QACrBrB,qBAAqB,CAAC,EAAE,CAAC;QACzBU,aAAa,CAAC,IAAI,CAAC;MACrB,CAAC,SAAS;QACRR,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDS,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACjB,OAAO,EAAEC,cAAc,EAAEY,QAAQ,CAAC,CAAC,CAAC,CAAC;;EAEzC;EACA,MAAMS,kBAAkB,GAAIM,eAAe,IAAK;IAC9C,IAAI,CAACA,eAAe,IAAIA,eAAe,CAACC,MAAM,KAAK,CAAC,EAAE;MACpDb,aAAa,CAAC,IAAI,CAAC;MACnB;IACF;;IAEA;IACA,MAAMc,IAAI,GAAG;MAAEC,IAAI,EAAE,MAAM;MAAEC,QAAQ,EAAE,EAAE;MAAEC,KAAK,EAAEL,eAAe,CAACC;IAAO,CAAC;IAC1E,MAAMK,UAAU,GAAG,CAAC,CAAC;;IAErB;IACAN,eAAe,CAACO,OAAO,CAACC,IAAI,IAAI;MAC9B,IAAIA,IAAI,CAACC,YAAY,EAAE;QACrB,MAAMd,OAAO,GAAGa,IAAI,CAACC,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC;QAC5Cf,OAAO,CAACY,OAAO,CAACI,MAAM,IAAI;UACxBL,UAAU,CAACK,MAAM,CAAC,GAAG,CAACL,UAAU,CAACK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC;QACpD,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;;IAEF;IACA,MAAMC,WAAW,GAAGC,MAAM,CAACC,IAAI,CAACR,UAAU,CAAC,CAACS,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACpDX,UAAU,CAACW,CAAC,CAAC,GAAGX,UAAU,CAACU,CAAC,CAC9B,CAAC;;IAED;IACAJ,WAAW,CAACL,OAAO,CAACC,IAAI,IAAI;MAC1BN,IAAI,CAACE,QAAQ,CAACc,IAAI,CAAC;QACjBf,IAAI,EAAEK,IAAI;QACVH,KAAK,EAAEC,UAAU,CAACE,IAAI,CAAC;QACvBJ,QAAQ,EAAE;MACZ,CAAC,CAAC;IACJ,CAAC,CAAC;;IAEF;IACA,IAAIF,IAAI,CAACE,QAAQ,CAACH,MAAM,GAAG,CAAC,EAAE;MAC5B,MAAMkB,YAAY,GAAG,CAAC,CAAC;;MAEvB;MACAnB,eAAe,CAACO,OAAO,CAACC,IAAI,IAAI;QAC9B,IAAIA,IAAI,CAACC,YAAY,EAAE;UACrB,MAAMd,OAAO,GAAGa,IAAI,CAACC,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC;UAC5C,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,OAAO,CAACM,MAAM,EAAEmB,CAAC,EAAE,EAAE;YACvC,KAAK,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAG1B,OAAO,CAACM,MAAM,EAAEoB,CAAC,EAAE,EAAE;cAC3C,MAAMC,IAAI,GAAG,GAAG3B,OAAO,CAACyB,CAAC,CAAC,IAAIzB,OAAO,CAAC0B,CAAC,CAAC,EAAE;cAC1CF,YAAY,CAACG,IAAI,CAAC,GAAG,CAACH,YAAY,CAACG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC;YACpD;UACF;QACF;MACF,CAAC,CAAC;;MAEF;MACA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEtB,IAAI,CAACE,QAAQ,CAACH,MAAM,CAAC,EAAEmB,CAAC,EAAE,EAAE;QAC1D,MAAMK,UAAU,GAAGvB,IAAI,CAACE,QAAQ,CAACgB,CAAC,CAAC,CAACjB,IAAI;QAExCU,MAAM,CAACC,IAAI,CAACK,YAAY,CAAC,CAACZ,OAAO,CAACe,IAAI,IAAI;UACxC,MAAM,CAACI,KAAK,EAAEC,MAAM,CAAC,GAAGL,IAAI,CAACZ,KAAK,CAAC,GAAG,CAAC;UACvC,IAAIgB,KAAK,KAAKD,UAAU,IAAIN,YAAY,CAACG,IAAI,CAAC,GAAG,CAAC,EAAE;YAClDpB,IAAI,CAACE,QAAQ,CAACgB,CAAC,CAAC,CAAChB,QAAQ,CAACc,IAAI,CAAC;cAC7Bf,IAAI,EAAEwB,MAAM;cACZtB,KAAK,EAAEc,YAAY,CAACG,IAAI,CAAC;cACzBlB,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ;QACF,CAAC,CAAC;MACJ;IACF;IAEAhB,aAAa,CAACc,IAAI,CAAC;EACrB,CAAC;EAED,MAAM0B,sBAAsB,GAAIC,WAAW,IAAK;IAC9C,IAAIvD,mBAAmB,EAAE;MACvBA,mBAAmB,CAACuD,WAAW,CAAC;IAClC;EACF,CAAC;;EAED;EACA,MAAMC,uBAAuB,GAAIC,WAAW,IAAK;IAC/C,IAAI,CAACA,WAAW,EAAE,OAAO,IAAI;IAE7B,MAAMpC,OAAO,GAAGoC,WAAW,CAACrB,KAAK,CAAC,GAAG,CAAC;IACtC,oBACExC,OAAA;MAAK8D,SAAS,EAAC,aAAa;MAAA5B,QAAA,EACzBT,OAAO,CAACsC,GAAG,CAAC,CAACtB,MAAM,EAAEuB,KAAK,kBACzBhE,OAAA;QAAkB8D,SAAS,EAAC,gBAAgB;QAAA5B,QAAA,EAAEO;MAAM,GAAzCuB,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAA2C,CAC5D;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAEV,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAACC,IAAI,EAAEC,KAAK,GAAG,CAAC,KAAK;IAC5C,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;IAEtB,oBACEtE,OAAA;MAAK8D,SAAS,EAAC,aAAa;MAACU,KAAK,EAAE;QAAEC,UAAU,EAAE,GAAGF,KAAK,GAAG,EAAE;MAAK,CAAE;MAAArC,QAAA,gBACpElC,OAAA;QAAK8D,SAAS,EAAC,qBAAqB;QAAA5B,QAAA,gBAClClC,OAAA;UAAM8D,SAAS,EAAC,kBAAkB;UAAA5B,QAAA,EAAEoC,IAAI,CAACrC;QAAI;UAAAgC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACrDpE,OAAA;UAAM8D,SAAS,EAAC,mBAAmB;UAAA5B,QAAA,GAAC,GAAC,EAACoC,IAAI,CAACnC,KAAK,EAAC,GAAC;QAAA;UAAA8B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtD,CAAC,EACLE,IAAI,CAACpC,QAAQ,IAAIoC,IAAI,CAACpC,QAAQ,CAACH,MAAM,GAAG,CAAC,iBACxC/B,OAAA;QAAK8D,SAAS,EAAC,sBAAsB;QAAA5B,QAAA,EAClCoC,IAAI,CAACpC,QAAQ,CAAC6B,GAAG,CAAC,CAACW,KAAK,EAAEV,KAAK,kBAC9BhE,OAAA;UAAiB8D,SAAS,EAAC,cAAc;UAAA5B,QAAA,EACtCmC,gBAAgB,CAACK,KAAK,EAAEH,KAAK,GAAG,CAAC;QAAC,GAD3BP,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAEV,CAAC;EAED,MAAMO,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG,CAAC7D,QAAQ;IAC7BC,WAAW,CAAC4D,WAAW,CAAC;;IAExB;IACAvD,OAAO,CAACC,GAAG,CAAC,aAAasD,WAAW,GAAG,SAAS,GAAG,UAAU,EAAE,CAAC;;IAEhE;IACA,IAAI,CAACA,WAAW,KAAK,CAAC1E,OAAO,IAAI,CAACC,cAAc,CAAC,EAAE;MACjDK,qBAAqB,CAAC,EAAE,CAAC;MACzBU,aAAa,CAAC,IAAI,CAAC;IACrB;EACF,CAAC;EAED,oBACElB,OAAA;IAAK8D,SAAS,EAAC,kBAAkB;IAAA5B,QAAA,gBAC/BlC,OAAA;MAAK8D,SAAS,EAAC,wBAAwB;MAAA5B,QAAA,gBACrClC,OAAA;QAAI8D,SAAS,EAAC,cAAc;QAAA5B,QAAA,EACzB,CAACnB,QAAQ,IAAIZ,cAAc,GACxB,cAAcA,cAAc,EAAE,GAC9B;MAAW;QAAA8D,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACb,CAAC,eACLpE,OAAA;QAAK8D,SAAS,EAAC,kBAAkB;QAAA5B,QAAA,eAC/BlC,OAAA;UAAO8D,SAAS,EAAC,cAAc;UAAA5B,QAAA,gBAC7BlC,OAAA;YAAAkC,QAAA,GAAM,YAAU,EAACnB,QAAQ,GAAG,IAAI,GAAG,KAAK;UAAA;YAAAkD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eAChDpE,OAAA;YACE6E,IAAI,EAAC,UAAU;YACfC,OAAO,EAAE/D,QAAS;YAClBgE,QAAQ,EAAEJ;UAAe;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC1B,CAAC,eACFpE,OAAA;YAAM8D,SAAS,EAAC;UAAe;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAClC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eAENpE,OAAA;MAAK8D,SAAS,EAAC,MAAM;MAAA5B,QAAA,gBACnBlC,OAAA;QACE8D,SAAS,EAAE,OAAOjD,SAAS,KAAK,aAAa,GAAG,QAAQ,GAAG,EAAE,EAAG;QAChEmE,OAAO,EAAEA,CAAA,KAAMlE,YAAY,CAAC,aAAa,CAAE;QAAAoB,QAAA,EAC5C;MAED;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpE,OAAA;QACE8D,SAAS,EAAE,OAAOjD,SAAS,KAAK,QAAQ,GAAG,QAAQ,GAAG,EAAE,EAAG;QAC3DmE,OAAO,EAAEA,CAAA,KAAMlE,YAAY,CAAC,QAAQ,CAAE;QAAAoB,QAAA,EACvC;MAED;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,EAELvD,SAAS,KAAK,aAAa,gBAC1Bb,OAAA;MAAK8D,SAAS,EAAC,aAAa;MAAA5B,QAAA,EACzBzB,OAAO,gBACNT,OAAA;QAAK8D,SAAS,EAAC,SAAS;QAAA5B,QAAA,EAAC;MAAO;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACpCzD,KAAK,gBACPX,OAAA;QAAK8D,SAAS,EAAC,OAAO;QAAA5B,QAAA,GAAC,gBAAI,EAACvB,KAAK;MAAA;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACtC7D,kBAAkB,CAACwB,MAAM,GAAG,CAAC,gBAC/B/B,OAAA;QAAK8D,SAAS,EAAC,gBAAgB;QAAA5B,QAAA,EAC5B3B,kBAAkB,CAACwD,GAAG,CAAC,CAACzB,IAAI,EAAE0B,KAAK,kBAClChE,OAAA;UAEE8D,SAAS,EAAE,eAAezD,mBAAmB,KAAKiC,IAAI,CAACC,YAAY,GAAG,UAAU,GAAG,EAAE,EAAG;UACxFyC,OAAO,EAAEA,CAAA,KAAMtB,sBAAsB,CAACpB,IAAI,CAACC,YAAY,CAAE;UAAAL,QAAA,EAExD0B,uBAAuB,CAACtB,IAAI,CAACC,YAAY;QAAC,GAJtCyB,KAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAKP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAENpE,OAAA;QAAK8D,SAAS,EAAC,cAAc;QAAA5B,QAAA,EAC1BnB,QAAQ,GACL,mBAAmB,GACnB;MAAiB;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClB;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC,gBAENpE,OAAA;MAAK8D,SAAS,EAAC,aAAa;MAAA5B,QAAA,EACzBzB,OAAO,gBACNT,OAAA;QAAK8D,SAAS,EAAC,SAAS;QAAA5B,QAAA,EAAC;MAAO;QAAA+B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,GACpCzD,KAAK,gBACPX,OAAA;QAAK8D,SAAS,EAAC,OAAO;QAAA5B,QAAA,GAAC,gBAAI,EAACvB,KAAK;MAAA;QAAAsD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACtCnD,UAAU,gBACZjB,OAAA;QAAK8D,SAAS,EAAC,aAAa;QAAA5B,QAAA,eAC1BlC,OAAA;UAAK8D,SAAS,EAAC,aAAa;UAAA5B,QAAA,EACzBmC,gBAAgB,CAACpD,UAAU;QAAC;UAAAgD,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CAAC,gBAENpE,OAAA;QAAK8D,SAAS,EAAC,cAAc;QAAA5B,QAAA,EAC1BnB,QAAQ,GACL,qBAAqB,GACrB;MAAuC;QAAAkD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxC;IACN;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9D,EAAA,CAxQIL,qBAAqB;AAAAgF,EAAA,GAArBhF,qBAAqB;AA0Q3B,eAAeA,qBAAqB;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}