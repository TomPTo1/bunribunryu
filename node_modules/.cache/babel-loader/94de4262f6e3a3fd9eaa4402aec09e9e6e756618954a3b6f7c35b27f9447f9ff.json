{"ast":null,"code":"import * as XLSX from 'xlsx';\nimport { getFileContent } from './fileSystemService';\n\n/**\n * Parse an XLSX file and extract its data structure\n * @param {string} filePath - The XLSX file path to parse\n * @returns {Object} The parsed data structure with sheets, headers, and data\n */\nexport const parseXLSXFile = async filePath => {\n  try {\n    // API를 통해 파일 내용 가져오기\n    const xlsxData = await getFileContent(filePath);\n    return xlsxData;\n  } catch (error) {\n    console.error(\"Error parsing XLSX file:\", error);\n    throw error;\n  }\n};\n\n/**\n * Parse an XLSX buffer\n * @param {ArrayBuffer} buffer - The XLSX file buffer\n * @returns {Object} The parsed data structure with sheets, headers, and data\n */\nconst parseXLSXBuffer = buffer => {\n  var _workbook$Props;\n  // Read the workbook\n  const workbook = XLSX.read(buffer, {\n    type: 'array'\n  });\n\n  // Process each sheet\n  const sheets = {};\n  workbook.SheetNames.forEach(sheetName => {\n    const sheet = workbook.Sheets[sheetName];\n    const data = XLSX.utils.sheet_to_json(sheet, {\n      header: 1\n    });\n\n    // Extract headers (first row)\n    const headers = data.length > 0 ? data[0] : [];\n\n    // Extract data (rows after headers)\n    const rows = data.slice(1);\n    sheets[sheetName] = {\n      headers,\n      rows\n    };\n  });\n  return {\n    fileName: ((_workbook$Props = workbook.Props) === null || _workbook$Props === void 0 ? void 0 : _workbook$Props.Title) || 'Unknown',\n    sheets\n  };\n};\n\n/**\n * Generate mock XLSX data for demo purposes\n * @param {string} filePath - The file path\n * @returns {Object} Mock XLSX data\n */\nconst generateMockXLSXData = filePath => {\n  // Extract filename from path\n  const fileName = filePath.split('/').pop();\n\n  // Generate mock data based on file name\n  if (fileName === '쿠팡.xlsx') {\n    return {\n      fileName: '쿠팡',\n      sheets: {\n        '상품목록': {\n          headers: ['상품ID', '상품명', '가격', '카테고리', '판매자', '평점', '리뷰수', '재고'],\n          rows: [['CP001', '유기농 바나나 1kg', 5900, '과일/채소', '신선마켓', 4.8, 342, 100], ['CP002', '프리미엄 소고기 등심 300g', 23800, '정육/계란', '프레시푸드', 4.9, 512, 50], ['CP003', '비타민C 1000mg x 180정', 19800, '건강식품', '웰니스마트', 4.7, 2342, 200], ['CP004', '올인원 노트북 파우치', 12900, '디지털/가전', '테크몰', 4.5, 1203, 150], ['CP005', '프리미엄 호텔 수건 세트', 34900, '생활용품', '데일리홈', 4.6, 821, 80], ['CP006', '고양이 자동 급식기', 45000, '반려동물', '펫라이프', 4.4, 437, 30], ['CP007', '울트라 와이드 모니터 34인치', 450000, '디지털/가전', '테크몰', 4.8, 293, 15], ['CP008', '프리미엄 원두커피 1kg', 28900, '식품', '커피마스터', 4.9, 1024, 60], ['CP009', '유아용 흡착 식판', 15900, '유아/아동', '키즈존', 4.7, 532, 90], ['CP010', '헤어 트리트먼트 500ml', 18900, '뷰티', '뷰티샵', 4.6, 831, 120]]\n        },\n        '카테고리': {\n          headers: ['카테고리ID', '카테고리명', '상품수', '평균가격'],\n          rows: [['CAT001', '과일/채소', 1243, 8500], ['CAT002', '정육/계란', 876, 15800], ['CAT003', '건강식품', 2341, 24600], ['CAT004', '디지털/가전', 3421, 187000], ['CAT005', '생활용품', 5243, 12400], ['CAT006', '반려동물', 1432, 23500], ['CAT007', '유아/아동', 3210, 19800], ['CAT008', '뷰티', 4321, 16500]]\n        }\n      }\n    };\n  }\n\n  // Default mock data for unknown files\n  return {\n    fileName: fileName.replace('.xlsx', ''),\n    sheets: {\n      'Sheet1': {\n        headers: ['Header1', 'Header2', 'Header3', 'Header4'],\n        rows: [['Value1-1', 'Value1-2', 'Value1-3', 'Value1-4'], ['Value2-1', 'Value2-2', 'Value2-3', 'Value2-4'], ['Value3-1', 'Value3-2', 'Value3-3', 'Value3-4']]\n      }\n    }\n  };\n};","map":{"version":3,"names":["XLSX","getFileContent","parseXLSXFile","filePath","xlsxData","error","console","parseXLSXBuffer","buffer","_workbook$Props","workbook","read","type","sheets","SheetNames","forEach","sheetName","sheet","Sheets","data","utils","sheet_to_json","header","headers","length","rows","slice","fileName","Props","Title","generateMockXLSXData","split","pop","replace"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/services/xlsxParserService.js"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport { getFileContent } from './fileSystemService';\n\n/**\n * Parse an XLSX file and extract its data structure\n * @param {string} filePath - The XLSX file path to parse\n * @returns {Object} The parsed data structure with sheets, headers, and data\n */\nexport const parseXLSXFile = async (filePath) => {\n  try {\n    // API를 통해 파일 내용 가져오기\n    const xlsxData = await getFileContent(filePath);\n    return xlsxData;\n  } catch (error) {\n    console.error(\"Error parsing XLSX file:\", error);\n    throw error;\n  }\n};\n\n/**\n * Parse an XLSX buffer\n * @param {ArrayBuffer} buffer - The XLSX file buffer\n * @returns {Object} The parsed data structure with sheets, headers, and data\n */\nconst parseXLSXBuffer = (buffer) => {\n  // Read the workbook\n  const workbook = XLSX.read(buffer, { type: 'array' });\n  \n  // Process each sheet\n  const sheets = {};\n  workbook.SheetNames.forEach(sheetName => {\n    const sheet = workbook.Sheets[sheetName];\n    const data = XLSX.utils.sheet_to_json(sheet, { header: 1 });\n    \n    // Extract headers (first row)\n    const headers = data.length > 0 ? data[0] : [];\n    \n    // Extract data (rows after headers)\n    const rows = data.slice(1);\n    \n    sheets[sheetName] = {\n      headers,\n      rows\n    };\n  });\n  \n  return {\n    fileName: workbook.Props?.Title || 'Unknown',\n    sheets\n  };\n};\n\n/**\n * Generate mock XLSX data for demo purposes\n * @param {string} filePath - The file path\n * @returns {Object} Mock XLSX data\n */\nconst generateMockXLSXData = (filePath) => {\n  // Extract filename from path\n  const fileName = filePath.split('/').pop();\n  \n  // Generate mock data based on file name\n  if (fileName === '쿠팡.xlsx') {\n    return {\n      fileName: '쿠팡',\n      sheets: {\n        '상품목록': {\n          headers: ['상품ID', '상품명', '가격', '카테고리', '판매자', '평점', '리뷰수', '재고'],\n          rows: [\n            ['CP001', '유기농 바나나 1kg', 5900, '과일/채소', '신선마켓', 4.8, 342, 100],\n            ['CP002', '프리미엄 소고기 등심 300g', 23800, '정육/계란', '프레시푸드', 4.9, 512, 50],\n            ['CP003', '비타민C 1000mg x 180정', 19800, '건강식품', '웰니스마트', 4.7, 2342, 200],\n            ['CP004', '올인원 노트북 파우치', 12900, '디지털/가전', '테크몰', 4.5, 1203, 150],\n            ['CP005', '프리미엄 호텔 수건 세트', 34900, '생활용품', '데일리홈', 4.6, 821, 80],\n            ['CP006', '고양이 자동 급식기', 45000, '반려동물', '펫라이프', 4.4, 437, 30],\n            ['CP007', '울트라 와이드 모니터 34인치', 450000, '디지털/가전', '테크몰', 4.8, 293, 15],\n            ['CP008', '프리미엄 원두커피 1kg', 28900, '식품', '커피마스터', 4.9, 1024, 60],\n            ['CP009', '유아용 흡착 식판', 15900, '유아/아동', '키즈존', 4.7, 532, 90],\n            ['CP010', '헤어 트리트먼트 500ml', 18900, '뷰티', '뷰티샵', 4.6, 831, 120]\n          ]\n        },\n        '카테고리': {\n          headers: ['카테고리ID', '카테고리명', '상품수', '평균가격'],\n          rows: [\n            ['CAT001', '과일/채소', 1243, 8500],\n            ['CAT002', '정육/계란', 876, 15800],\n            ['CAT003', '건강식품', 2341, 24600],\n            ['CAT004', '디지털/가전', 3421, 187000],\n            ['CAT005', '생활용품', 5243, 12400],\n            ['CAT006', '반려동물', 1432, 23500],\n            ['CAT007', '유아/아동', 3210, 19800],\n            ['CAT008', '뷰티', 4321, 16500]\n          ]\n        }\n      }\n    };\n  }\n  \n  // Default mock data for unknown files\n  return {\n    fileName: fileName.replace('.xlsx', ''),\n    sheets: {\n      'Sheet1': {\n        headers: ['Header1', 'Header2', 'Header3', 'Header4'],\n        rows: [\n          ['Value1-1', 'Value1-2', 'Value1-3', 'Value1-4'],\n          ['Value2-1', 'Value2-2', 'Value2-3', 'Value2-4'],\n          ['Value3-1', 'Value3-2', 'Value3-3', 'Value3-4']\n        ]\n      }\n    }\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}