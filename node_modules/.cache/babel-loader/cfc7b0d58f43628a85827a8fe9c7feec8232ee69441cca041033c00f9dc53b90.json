{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData,\n  groupingData,\n  showProcessedData,\n  isGroupingActive\n}) => {\n  _s();\n  // Add state for user-defined groups (columns)\n  const [columns, setColumns] = useState([{\n    id: 'unprocessed',\n    name: '미처리',\n    items: []\n  }]);\n  const [newColumnName, setNewColumnName] = useState('');\n  const [editingColumnIndex, setEditingColumnIndex] = useState(null);\n  const [editingColumnName, setEditingColumnName] = useState('');\n\n  // 분절값이 어떤 칼럼에 속해있는지 추적\n  const [valueToColumn, setValueToColumn] = useState({});\n  if (!processedData && !groupingData && !isGroupingActive) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Check if a value is already assigned to a column\n  const isValueAssigned = value => {\n    return !!valueToColumn[value];\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    e.stopPropagation();\n    const segmentValue = typeof segment === 'string' ? segment : segment.text;\n\n    // 첫 번째가 아닌 활성화된 열로 값 이동 시도\n    const activeColumns = columns.filter(col => col.id !== 'unprocessed');\n    if (activeColumns.length > 0) {\n      handleValueClick(segmentValue, activeColumns[0].id);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = value => {\n    console.log('Segment clicked:', value);\n\n    // 첫 번째가 아닌 활성화된 열로 값 이동 시도\n    const activeColumns = columns.filter(col => col.id !== 'unprocessed');\n    if (activeColumns.length > 0) {\n      handleValueClick(value, activeColumns[0].id);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Add class if this value is already used in a group\n    if (isValueAssigned(typeof value === 'string' ? value : value.value)) {\n      className += ' used-value';\n    }\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${className} tag-container ${isValueAssigned(valueText) ? 'used-value' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whole-tag-button\",\n          onClick: () => handleTagClick(valueText),\n          title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n          disabled: isValueAssigned(valueText),\n          children: valueText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segments-container\",\n          children: segmentation.segments.map((segment, segIdx) => {\n            const segmentText = segment.text;\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueAssigned(segmentText) ? 'used-value' : ''}`,\n              onClick: e => handleSegmentClick(segment, e),\n              disabled: isValueAssigned(segmentText),\n              children: segmentText\n            }, `seg-${segIdx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 111,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally but still clickable\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${className} clickable-tag simple-tag-button ${isValueAssigned(valueText) ? 'used-value' : ''}`,\n      onClick: () => handleTagClick(valueText),\n      disabled: isValueAssigned(valueText),\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n        const source = item.source || 'text';\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueAssigned(value) ? 'used-value' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"whole-tag-button\",\n              onClick: () => handleTagClick(value),\n              title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n              disabled: isValueAssigned(value),\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segments-container\",\n              children: segments.map((segment, segIdx) => {\n                const segmentText = segment.text;\n                return /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueAssigned(segmentText) ? 'used-value' : ''}`,\n                  onClick: e => handleSegmentClick(segment, e),\n                  disabled: isValueAssigned(segmentText),\n                  children: segmentText\n                }, `seg-${segIdx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 240,\n                  columnNumber: 23\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueAssigned(value) ? 'used-value' : ''}`,\n          onClick: () => handleTagClick(value),\n          disabled: isValueAssigned(value),\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n\n  // 초기화 - 컴포넌트 마운트시 한번만 분절값 불러오기 \n  React.useEffect(() => {\n    if (groupingData && groupingData['분절값'] && columns[0].items.length === 0) {\n      // 분절값들을 '미처리' 칼럼에 할당\n      setColumns(prev => [{\n        ...prev[0],\n        items: [...groupingData['분절값']]\n      }, ...prev.slice(1)]);\n    }\n  }, [groupingData]);\n\n  // 값이 클릭됐을 때 처리 (엑셀 시트의 셀 클릭)\n  const handleValueClick = (value, columnId) => {\n    if (columnId === 'unprocessed') {\n      // 미처리 칼럼에서 클릭한 경우, 아무것도 하지 않음\n      return;\n    }\n\n    // 이미 다른 열에 속한 값이면 해당 열에서 제거\n    const currentColumnId = valueToColumn[value];\n    if (currentColumnId && currentColumnId !== columnId) {\n      setColumns(prev => {\n        return prev.map(col => {\n          if (col.id === currentColumnId) {\n            return {\n              ...col,\n              items: col.items.filter(item => item !== value)\n            };\n          }\n          return col;\n        });\n      });\n    }\n\n    // 새 열에 추가\n    setColumns(prev => {\n      return prev.map(col => {\n        if (col.id === columnId) {\n          // 이미 이 열에 있는 경우 제거 (토글)\n          if (col.items.includes(value)) {\n            return {\n              ...col,\n              items: col.items.filter(item => item !== value)\n            };\n          }\n          // 없는 경우 추가\n          else {\n            return {\n              ...col,\n              items: [...col.items, value]\n            };\n          }\n        }\n        return col;\n      });\n    });\n\n    // valueToColumn 업데이트\n    setValueToColumn(prev => {\n      var _columns$find;\n      const newMap = {\n        ...prev\n      };\n      if ((_columns$find = columns.find(col => col.id === columnId)) !== null && _columns$find !== void 0 && _columns$find.items.includes(value)) {\n        // 이미 있다면 제거\n        delete newMap[value];\n      } else {\n        // 없다면 추가\n        newMap[value] = columnId;\n      }\n      return newMap;\n    });\n  };\n\n  // 새 열(그룹) 추가\n  const addNewColumn = () => {\n    if (newColumnName.trim() === '') return;\n    const newColumn = {\n      id: `column-${Date.now()}`,\n      name: newColumnName.trim(),\n      items: []\n    };\n    setColumns([...columns, newColumn]);\n    setNewColumnName('');\n  };\n\n  // 열 삭제\n  const deleteColumn = columnId => {\n    // 미처리 열은 삭제 불가\n    if (columnId === 'unprocessed') return;\n\n    // 해당 열에 있던 모든 값들의 매핑 제거\n    const columnsToDelete = columns.find(col => col.id === columnId);\n    if (columnsToDelete) {\n      const newValueToColumn = {\n        ...valueToColumn\n      };\n      columnsToDelete.items.forEach(item => {\n        delete newValueToColumn[item];\n      });\n      setValueToColumn(newValueToColumn);\n    }\n\n    // 열 삭제\n    setColumns(columns.filter(col => col.id !== columnId));\n  };\n\n  // 열 이름 수정 시작\n  const startEditingColumn = (columnId, name) => {\n    // 미처리 열은 수정 불가\n    if (columnId === 'unprocessed') return;\n    setEditingColumnIndex(columnId);\n    setEditingColumnName(name);\n  };\n\n  // 열 이름 수정 저장\n  const saveColumnName = columnId => {\n    if (editingColumnName.trim() === '') return;\n    setColumns(columns.map(col => col.id === columnId ? {\n      ...col,\n      name: editingColumnName.trim()\n    } : col));\n    setEditingColumnIndex(null);\n    setEditingColumnName('');\n  };\n\n  // 엑셀 스타일 그리드 렌더링\n  const renderExcelGrid = () => {\n    // 모든 분절값들 (미처리 + 사용자 정의 그룹들에 있는 값들)\n    const allValues = Array.from(new Set([...columns[0].items, ...columns.slice(1).flatMap(col => col.items)]));\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"excel-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excel-header-row\",\n        children: [columns.map((column, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"excel-header-cell\",\n          children: editingColumnIndex === column.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"excel-header-edit\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: editingColumnName,\n              onChange: e => setEditingColumnName(e.target.value),\n              onBlur: () => saveColumnName(column.id),\n              onKeyDown: e => {\n                if (e.key === 'Enter') saveColumnName(column.id);\n                if (e.key === 'Escape') {\n                  setEditingColumnIndex(null);\n                  setEditingColumnName('');\n                }\n              },\n              autoFocus: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 432,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"excel-header-content\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"excel-column-name\",\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 19\n            }, this), column.id !== 'unprocessed' && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"excel-header-actions\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"edit-column-button\",\n                onClick: () => startEditingColumn(column.id, column.name),\n                title: \"\\uADF8\\uB8F9\\uBA85 \\uC218\\uC815\",\n                children: \"\\u270F\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 452,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"delete-column-button\",\n                onClick: () => deleteColumn(column.id),\n                title: \"\\uADF8\\uB8F9 \\uC0AD\\uC81C\",\n                children: \"\\u2715\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 451,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 17\n          }, this)\n        }, column.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"excel-add-column\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newColumnName,\n            onChange: e => setNewColumnName(e.target.value),\n            placeholder: \"\\uC0C8 \\uADF8\\uB8F9 \\uC774\\uB984\",\n            className: \"add-column-input\",\n            onKeyDown: e => e.key === 'Enter' && addNewColumn()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 475,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addNewColumn,\n            className: \"add-column-button\",\n            disabled: !newColumnName.trim(),\n            children: \"+\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"excel-body\",\n        children: allValues.map((value, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"excel-row\",\n          children: [columns.map(column => {\n            const isInThisColumn = column.items.includes(value);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `excel-cell ${isInThisColumn ? 'excel-cell-selected' : ''}`,\n              onClick: () => handleValueClick(value, column.id),\n              children: isInThisColumn && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"cell-value\",\n                children: value\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 506,\n                columnNumber: 40\n              }, this)\n            }, `cell-${rowIndex}-${column.id}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 19\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"excel-cell excel-cell-empty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 510,\n            columnNumber: 15\n          }, this)]\n        }, `row-${rowIndex}`, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 425,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Main render\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: isGroupingActive ?\n    /*#__PURE__*/\n    // 새로운 엑셀 형태의 그룹핑 뷰\n    _jsxDEV(\"div\", {\n      className: \"excel-grid-container\",\n      children: renderExcelGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 9\n    }, this) :\n    // Regular mode - show processed data with original table layout\n    showProcessedData && processedData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processed-data-section\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"data-table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"td\", {\n              className: \"enhanced-view\",\n              children: renderEnhancedView(row)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 21\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 520,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"FksEgNE8y51+yZEcUVjfuFTNUNM=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","segmentationData","groupingData","showProcessedData","isGroupingActive","_s","columns","setColumns","id","name","items","newColumnName","setNewColumnName","editingColumnIndex","setEditingColumnIndex","editingColumnName","setEditingColumnName","valueToColumn","setValueToColumn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","hasSegmentationData","value","segmentations","some","seg","segments","getSegmentationData","find","isValueAssigned","handleSegmentClick","segment","e","stopPropagation","segmentValue","activeColumns","filter","col","handleValueClick","handleTagClick","console","log","renderTag","source","key","isLastStep","valueText","segmentation","onClick","title","disabled","map","segIdx","segmentText","isSubstring","renderEnhancedView","row","type","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","item","Array","isArray","every","v","val","useEffect","prev","slice","columnId","currentColumnId","_columns$find","newMap","addNewColumn","trim","newColumn","Date","now","deleteColumn","columnsToDelete","newValueToColumn","startEditingColumn","saveColumnName","renderExcelGrid","allValues","from","Set","flatMap","column","colIndex","onChange","target","onBlur","onKeyDown","autoFocus","placeholder","rowIndex","isInThisColumn","index","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData, groupingData, showProcessedData, isGroupingActive }) => {\n  // Add state for user-defined groups (columns)\n  const [columns, setColumns] = useState([\n    { id: 'unprocessed', name: '미처리', items: [] }\n  ]);\n  const [newColumnName, setNewColumnName] = useState('');\n  const [editingColumnIndex, setEditingColumnIndex] = useState(null);\n  const [editingColumnName, setEditingColumnName] = useState('');\n  \n  // 분절값이 어떤 칼럼에 속해있는지 추적\n  const [valueToColumn, setValueToColumn] = useState({});\n\n  if (!processedData && !groupingData && !isGroupingActive) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Check if a value is already assigned to a column\n  const isValueAssigned = (value) => {\n    return !!valueToColumn[value];\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    e.stopPropagation();\n    const segmentValue = typeof segment === 'string' ? segment : segment.text;\n    \n    // 첫 번째가 아닌 활성화된 열로 값 이동 시도\n    const activeColumns = columns.filter(col => col.id !== 'unprocessed');\n    if (activeColumns.length > 0) {\n      handleValueClick(segmentValue, activeColumns[0].id);\n    }\n  };\n\n  // Handle whole tag click\n  const handleTagClick = (value) => {\n    console.log('Segment clicked:', value);\n    \n    // 첫 번째가 아닌 활성화된 열로 값 이동 시도\n    const activeColumns = columns.filter(col => col.id !== 'unprocessed');\n    if (activeColumns.length > 0) {\n      handleValueClick(value, activeColumns[0].id);\n    }\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Add class if this value is already used in a group\n    if (isValueAssigned(typeof value === 'string' ? value : value.value)) {\n      className += ' used-value';\n    }\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <div key={key} className={`${className} tag-container ${isValueAssigned(valueText) ? 'used-value' : ''}`}>\n          <button \n            className=\"whole-tag-button\" \n            onClick={() => handleTagClick(valueText)}\n            title=\"전체 태그 선택\"\n            disabled={isValueAssigned(valueText)}\n          >\n            {valueText}\n          </button>\n          <div className=\"segments-container\">\n            {segmentation.segments.map((segment, segIdx) => {\n              const segmentText = segment.text;\n              return (\n                <button \n                  key={`seg-${segIdx}`} \n                  className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueAssigned(segmentText) ? 'used-value' : ''}`}\n                  onClick={(e) => handleSegmentClick(segment, e)}\n                  disabled={isValueAssigned(segmentText)}\n                >\n                  {segmentText}\n                </button>\n              );\n            })}\n          </div>\n        </div>\n      );\n    }\n    \n    // No segmentation, render normally but still clickable\n    return (\n      <button \n        key={key} \n        className={`${className} clickable-tag simple-tag-button ${isValueAssigned(valueText) ? 'used-value' : ''}`}\n        onClick={() => handleTagClick(valueText)}\n        disabled={isValueAssigned(valueText)}\n      >\n        {valueText}\n      </button>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          const source = item.source || 'text';\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <div \n                key={idx} \n                className={`value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueAssigned(value) ? 'used-value' : ''}`}\n              >\n                <button \n                  className=\"whole-tag-button\" \n                  onClick={() => handleTagClick(value)}\n                  title=\"전체 태그 선택\"\n                  disabled={isValueAssigned(value)}\n                >\n                  {value}\n                </button>\n                <div className=\"segments-container\">\n                  {segments.map((segment, segIdx) => {\n                    const segmentText = segment.text;\n                    return (\n                      <button \n                        key={`seg-${segIdx}`} \n                        className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'} ${isValueAssigned(segmentText) ? 'used-value' : ''}`}\n                        onClick={(e) => handleSegmentClick(segment, e)}\n                        disabled={isValueAssigned(segmentText)}\n                      >\n                        {segmentText}\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <button \n              key={idx} \n              className={`value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'} ${isValueAssigned(value) ? 'used-value' : ''}`}\n              onClick={() => handleTagClick(value)}\n              disabled={isValueAssigned(value)}\n            >\n              {value}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n  \n  // 초기화 - 컴포넌트 마운트시 한번만 분절값 불러오기 \n  React.useEffect(() => {\n    if (groupingData && groupingData['분절값'] && columns[0].items.length === 0) {\n      // 분절값들을 '미처리' 칼럼에 할당\n      setColumns(prev => [\n        { ...prev[0], items: [...groupingData['분절값']] },\n        ...prev.slice(1)\n      ]);\n    }\n  }, [groupingData]);\n\n  // 값이 클릭됐을 때 처리 (엑셀 시트의 셀 클릭)\n  const handleValueClick = (value, columnId) => {\n    if (columnId === 'unprocessed') {\n      // 미처리 칼럼에서 클릭한 경우, 아무것도 하지 않음\n      return;\n    }\n    \n    // 이미 다른 열에 속한 값이면 해당 열에서 제거\n    const currentColumnId = valueToColumn[value];\n    if (currentColumnId && currentColumnId !== columnId) {\n      setColumns(prev => {\n        return prev.map(col => {\n          if (col.id === currentColumnId) {\n            return {\n              ...col,\n              items: col.items.filter(item => item !== value)\n            };\n          }\n          return col;\n        });\n      });\n    }\n    \n    // 새 열에 추가\n    setColumns(prev => {\n      return prev.map(col => {\n        if (col.id === columnId) {\n          // 이미 이 열에 있는 경우 제거 (토글)\n          if (col.items.includes(value)) {\n            return {\n              ...col,\n              items: col.items.filter(item => item !== value)\n            };\n          }\n          // 없는 경우 추가\n          else {\n            return {\n              ...col,\n              items: [...col.items, value]\n            };\n          }\n        }\n        return col;\n      });\n    });\n    \n    // valueToColumn 업데이트\n    setValueToColumn(prev => {\n      const newMap = { ...prev };\n      if (columns.find(col => col.id === columnId)?.items.includes(value)) {\n        // 이미 있다면 제거\n        delete newMap[value];\n      } else {\n        // 없다면 추가\n        newMap[value] = columnId;\n      }\n      return newMap;\n    });\n  };\n  \n  // 새 열(그룹) 추가\n  const addNewColumn = () => {\n    if (newColumnName.trim() === '') return;\n    \n    const newColumn = {\n      id: `column-${Date.now()}`,\n      name: newColumnName.trim(),\n      items: []\n    };\n    \n    setColumns([...columns, newColumn]);\n    setNewColumnName('');\n  };\n  \n  // 열 삭제\n  const deleteColumn = (columnId) => {\n    // 미처리 열은 삭제 불가\n    if (columnId === 'unprocessed') return;\n    \n    // 해당 열에 있던 모든 값들의 매핑 제거\n    const columnsToDelete = columns.find(col => col.id === columnId);\n    if (columnsToDelete) {\n      const newValueToColumn = { ...valueToColumn };\n      columnsToDelete.items.forEach(item => {\n        delete newValueToColumn[item];\n      });\n      setValueToColumn(newValueToColumn);\n    }\n    \n    // 열 삭제\n    setColumns(columns.filter(col => col.id !== columnId));\n  };\n  \n  // 열 이름 수정 시작\n  const startEditingColumn = (columnId, name) => {\n    // 미처리 열은 수정 불가\n    if (columnId === 'unprocessed') return;\n    \n    setEditingColumnIndex(columnId);\n    setEditingColumnName(name);\n  };\n  \n  // 열 이름 수정 저장\n  const saveColumnName = (columnId) => {\n    if (editingColumnName.trim() === '') return;\n    \n    setColumns(columns.map(col => \n      col.id === columnId \n        ? { ...col, name: editingColumnName.trim() } \n        : col\n    ));\n    \n    setEditingColumnIndex(null);\n    setEditingColumnName('');\n  };\n  \n  // 엑셀 스타일 그리드 렌더링\n  const renderExcelGrid = () => {\n    // 모든 분절값들 (미처리 + 사용자 정의 그룹들에 있는 값들)\n    const allValues = Array.from(new Set([\n      ...columns[0].items,\n      ...columns.slice(1).flatMap(col => col.items)\n    ]));\n    \n    return (\n      <div className=\"excel-grid\">\n        {/* 상단 헤더 행 (열 이름들) */}\n        <div className=\"excel-header-row\">\n          {columns.map((column, colIndex) => (\n            <div key={column.id} className=\"excel-header-cell\">\n              {editingColumnIndex === column.id ? (\n                <div className=\"excel-header-edit\">\n                  <input\n                    type=\"text\"\n                    value={editingColumnName}\n                    onChange={(e) => setEditingColumnName(e.target.value)}\n                    onBlur={() => saveColumnName(column.id)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Enter') saveColumnName(column.id);\n                      if (e.key === 'Escape') {\n                        setEditingColumnIndex(null);\n                        setEditingColumnName('');\n                      }\n                    }}\n                    autoFocus\n                  />\n                </div>\n              ) : (\n                <div className=\"excel-header-content\">\n                  <span className=\"excel-column-name\">{column.name}</span>\n                  {column.id !== 'unprocessed' && (\n                    <div className=\"excel-header-actions\">\n                      <button\n                        className=\"edit-column-button\"\n                        onClick={() => startEditingColumn(column.id, column.name)}\n                        title=\"그룹명 수정\"\n                      >\n                        ✏️\n                      </button>\n                      <button\n                        className=\"delete-column-button\"\n                        onClick={() => deleteColumn(column.id)}\n                        title=\"그룹 삭제\"\n                      >\n                        ✕\n                      </button>\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          ))}\n          \n          {/* 새 열 추가 버튼 */}\n          <div className=\"excel-add-column\">\n            <input\n              type=\"text\"\n              value={newColumnName}\n              onChange={(e) => setNewColumnName(e.target.value)}\n              placeholder=\"새 그룹 이름\"\n              className=\"add-column-input\"\n              onKeyDown={(e) => e.key === 'Enter' && addNewColumn()}\n            />\n            <button \n              onClick={addNewColumn}\n              className=\"add-column-button\"\n              disabled={!newColumnName.trim()}\n            >\n              +\n            </button>\n          </div>\n        </div>\n        \n        {/* 데이터 행들 */}\n        <div className=\"excel-body\">\n          {allValues.map((value, rowIndex) => (\n            <div key={`row-${rowIndex}`} className=\"excel-row\">\n              {columns.map(column => {\n                const isInThisColumn = column.items.includes(value);\n                \n                return (\n                  <div \n                    key={`cell-${rowIndex}-${column.id}`} \n                    className={`excel-cell ${isInThisColumn ? 'excel-cell-selected' : ''}`}\n                    onClick={() => handleValueClick(value, column.id)}\n                  >\n                    {isInThisColumn && <span className=\"cell-value\">{value}</span>}\n                  </div>\n                );\n              })}\n              <div className=\"excel-cell excel-cell-empty\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Main render\n  return (\n    <div className=\"data-display\">\n      {isGroupingActive ? (\n        // 새로운 엑셀 형태의 그룹핑 뷰\n        <div className=\"excel-grid-container\">\n          {renderExcelGrid()}\n        </div>\n      ) : (\n        // Regular mode - show processed data with original table layout\n        showProcessedData && processedData ? (\n          <div className=\"processed-data-section\">\n            <table className=\"data-table\">\n              <tbody>\n                {flattenData(processedData).map((row, index) => (\n                  <tr key={index}>\n                    <td className=\"enhanced-view\">\n                      {renderEnhancedView(row)}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"no-data\">처리된 데이터가 없습니다</div>\n        )\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}