{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/FileExplorerColumn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './FileExplorerColumn.css';\nimport { getDirectoryStructure } from '../../services/fileSystemService';\nimport { parseXLSXFile } from '../../services/xlsxParserService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileExplorerColumn = ({\n  onFileSelect\n}) => {\n  _s();\n  const [rootDirectory, setRootDirectory] = useState(null);\n  const [expandedFolders, setExpandedFolders] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [parsedXlsxFiles, setParsedXlsxFiles] = useState({});\n  useEffect(() => {\n    // Load the initial directory structure\n    loadDirectory('src/browse_mode_sample_data');\n  }, []);\n  const loadDirectory = async path => {\n    try {\n      setLoading(true);\n      const data = await getDirectoryStructure(path);\n      setRootDirectory(data);\n      // Automatically expand the root directory\n      setExpandedFolders(prev => ({\n        ...prev,\n        [data.id]: true\n      }));\n      setError(null);\n    } catch (err) {\n      setError('Failed to load directory structure');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleFolderToggle = async folder => {\n    const folderId = folder.id;\n    const isExpanded = expandedFolders[folderId];\n    if (!isExpanded && !folder.childrenLoaded) {\n      // Load children only if we're expanding and haven't loaded children before\n      try {\n        const data = await getDirectoryStructure(folder.path);\n\n        // Update the root directory with the new children\n        updateFolderChildren(rootDirectory, folder.id, data.children);\n\n        // Mark this folder as having its children loaded\n        updateFolderLoadedState(rootDirectory, folder.id, true);\n      } catch (err) {\n        console.error('Failed to load folder contents:', err);\n      }\n    }\n\n    // Toggle expanded state\n    setExpandedFolders(prev => ({\n      ...prev,\n      [folderId]: !isExpanded\n    }));\n  };\n  const updateFolderChildren = (node, folderId, children) => {\n    if (node.id === folderId) {\n      node.children = children;\n      return true;\n    }\n    if (node.children) {\n      for (let child of node.children) {\n        if (child.type === 'folder') {\n          if (updateFolderChildren(child, folderId, children)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const updateFolderLoadedState = (node, folderId, loadedState) => {\n    if (node.id === folderId) {\n      node.childrenLoaded = loadedState;\n      return true;\n    }\n    if (node.children) {\n      for (let child of node.children) {\n        if (child.type === 'folder') {\n          if (updateFolderLoadedState(child, folderId, loadedState)) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  };\n  const handleFileClick = async file => {\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n\n    // Special handling for XLSX files\n    if (fileExtension === 'xlsx') {\n      // Check if we've already parsed this file\n      if (!parsedXlsxFiles[file.path]) {\n        try {\n          setLoading(true);\n          const xlsxData = await parseXLSXFile(file.path);\n\n          // Store the parsed data\n          setParsedXlsxFiles(prev => ({\n            ...prev,\n            [file.path]: xlsxData\n          }));\n\n          // Create virtual headers as children of the XLSX file\n          const headerChildren = [];\n\n          // Add sheet and header entries\n          Object.entries(xlsxData.sheets).forEach(([sheetName, sheetData]) => {\n            const sheetId = `${file.id}_sheet_${sheetName}`;\n\n            // Create a sheet node\n            const sheetNode = {\n              id: sheetId,\n              name: sheetName,\n              type: 'xlsx_sheet',\n              path: `${file.path}#${sheetName}`,\n              parentFile: file,\n              sheetData: sheetData\n            };\n            headerChildren.push(sheetNode);\n\n            // Add headers as children of the sheet\n            sheetData.headers.forEach((header, index) => {\n              headerChildren.push({\n                id: `${sheetId}_header_${index}`,\n                name: header,\n                type: 'xlsx_header',\n                path: `${file.path}#${sheetName}#${header}`,\n                parentFile: file,\n                parentSheet: sheetName,\n                headerIndex: index,\n                sheetData: sheetData\n              });\n            });\n          });\n\n          // Update file with virtual children\n          file.children = headerChildren;\n          file.isXlsxExpanded = true;\n\n          // Force a re-render\n          setRootDirectory({\n            ...rootDirectory\n          });\n\n          // Also expand this file\n          setExpandedFolders(prev => ({\n            ...prev,\n            [file.id]: true\n          }));\n        } catch (err) {\n          console.error('Failed to parse XLSX file:', err);\n          setError(`Failed to parse XLSX file: ${err.message}`);\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        // We've already parsed this file, just toggle expansion\n        file.isXlsxExpanded = !file.isXlsxExpanded;\n\n        // Force a re-render\n        setRootDirectory({\n          ...rootDirectory\n        });\n\n        // Toggle expanded state\n        setExpandedFolders(prev => ({\n          ...prev,\n          [file.id]: !prev[file.id]\n        }));\n      }\n    }\n\n    // For all files (including XLSX), notify parent component\n    if (onFileSelect) {\n      onFileSelect(file);\n    }\n  };\n  const handleHeaderClick = header => {\n    // When a header is clicked, notify parent with header info\n    if (onFileSelect) {\n      onFileSelect(header);\n    }\n  };\n  const handleSearchChange = e => {\n    setSearchTerm(e.target.value);\n  };\n  const filterItems = (items, term) => {\n    if (!term) return items;\n    return items.filter(item => {\n      const matchesName = item.name.toLowerCase().includes(term.toLowerCase());\n\n      // For folders, also check children\n      if (item.type === 'folder' && item.children) {\n        const matchingChildren = filterItems(item.children, term);\n        return matchesName || matchingChildren.length > 0;\n      }\n      return matchesName;\n    });\n  };\n  const renderTree = node => {\n    if (!node) return null;\n\n    // Filter children if search term exists\n    const filteredChildren = node.children ? filterItems(node.children, searchTerm) : [];\n    const isExpanded = expandedFolders[node.id] || node.isXlsxExpanded;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `tree-item ${node.type}`,\n        onClick: () => {\n          if (node.type === 'folder') {\n            handleFolderToggle(node);\n          } else if (node.type === 'file') {\n            handleFileClick(node);\n          } else if (node.type === 'xlsx_header') {\n            handleHeaderClick(node);\n          } else if (node.type === 'xlsx_sheet') {\n            // Do nothing for now, or handle sheet clicks separately\n          }\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"icon\",\n          children: node.type === 'folder' ? isExpanded ? '📂' : '📁' : node.type === 'xlsx_sheet' ? '📑' : node.type === 'xlsx_header' ? '🔍' : getFileIcon(node.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"name\",\n          children: node.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this), (node.type === 'folder' || node.type === 'file') && isExpanded && node.children && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-children\",\n        children: filteredChildren.length > 0 ? filteredChildren.map(child => renderTree(child)) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-folder-message\",\n          children: searchTerm ? 'No matching files or folders' : 'Empty folder'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this);\n  };\n  const getFileIcon = filename => {\n    const extension = filename.split('.').pop().toLowerCase();\n\n    // Return different icons based on file extension\n    switch (extension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'xls':\n      case 'xlsx':\n        return '📊';\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return '🖼️';\n      case 'mp3':\n      case 'wav':\n        return '🎵';\n      case 'mp4':\n      case 'mov':\n        return '🎬';\n      default:\n        return '📄';\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column file-explorer-column\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"File Explorer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search-box\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search files...\",\n        value: searchTerm,\n        onChange: handleSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-view\",\n      children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-message\",\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 21\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error-message\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 19\n      }, this), !loading && !error && rootDirectory && renderTree(rootDirectory)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n};\n_s(FileExplorerColumn, \"RaqSjrwvwu8hTs9lNtUy7aGLJQ4=\");\n_c = FileExplorerColumn;\nexport default FileExplorerColumn;\nvar _c;\n$RefreshReg$(_c, \"FileExplorerColumn\");","map":{"version":3,"names":["React","useState","useEffect","getDirectoryStructure","parseXLSXFile","jsxDEV","_jsxDEV","FileExplorerColumn","onFileSelect","_s","rootDirectory","setRootDirectory","expandedFolders","setExpandedFolders","loading","setLoading","error","setError","searchTerm","setSearchTerm","parsedXlsxFiles","setParsedXlsxFiles","loadDirectory","path","data","prev","id","err","console","handleFolderToggle","folder","folderId","isExpanded","childrenLoaded","updateFolderChildren","children","updateFolderLoadedState","node","child","type","loadedState","handleFileClick","file","fileExtension","name","split","pop","toLowerCase","xlsxData","headerChildren","Object","entries","sheets","forEach","sheetName","sheetData","sheetId","sheetNode","parentFile","push","headers","header","index","parentSheet","headerIndex","isXlsxExpanded","message","handleHeaderClick","handleSearchChange","e","target","value","filterItems","items","term","filter","item","matchesName","includes","matchingChildren","length","renderTree","filteredChildren","className","onClick","getFileIcon","fileName","_jsxFileName","lineNumber","columnNumber","map","filename","extension","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/FileExplorerColumn.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './FileExplorerColumn.css';\nimport { getDirectoryStructure } from '../../services/fileSystemService';\nimport { parseXLSXFile } from '../../services/xlsxParserService';\n\nconst FileExplorerColumn = ({ onFileSelect }) => {\n  const [rootDirectory, setRootDirectory] = useState(null);\n  const [expandedFolders, setExpandedFolders] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [parsedXlsxFiles, setParsedXlsxFiles] = useState({});\n\n  useEffect(() => {\n    // Load the initial directory structure\n    loadDirectory('src/browse_mode_sample_data');\n  }, []);\n\n  const loadDirectory = async (path) => {\n    try {\n      setLoading(true);\n      const data = await getDirectoryStructure(path);\n      setRootDirectory(data);\n      // Automatically expand the root directory\n      setExpandedFolders(prev => ({ ...prev, [data.id]: true }));\n      setError(null);\n    } catch (err) {\n      setError('Failed to load directory structure');\n      console.error(err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFolderToggle = async (folder) => {\n    const folderId = folder.id;\n    const isExpanded = expandedFolders[folderId];\n\n    if (!isExpanded && !folder.childrenLoaded) {\n      // Load children only if we're expanding and haven't loaded children before\n      try {\n        const data = await getDirectoryStructure(folder.path);\n        \n        // Update the root directory with the new children\n        updateFolderChildren(rootDirectory, folder.id, data.children);\n        \n        // Mark this folder as having its children loaded\n        updateFolderLoadedState(rootDirectory, folder.id, true);\n      } catch (err) {\n        console.error('Failed to load folder contents:', err);\n      }\n    }\n\n    // Toggle expanded state\n    setExpandedFolders(prev => ({\n      ...prev,\n      [folderId]: !isExpanded\n    }));\n  };\n\n  const updateFolderChildren = (node, folderId, children) => {\n    if (node.id === folderId) {\n      node.children = children;\n      return true;\n    }\n    \n    if (node.children) {\n      for (let child of node.children) {\n        if (child.type === 'folder') {\n          if (updateFolderChildren(child, folderId, children)) {\n            return true;\n          }\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  const updateFolderLoadedState = (node, folderId, loadedState) => {\n    if (node.id === folderId) {\n      node.childrenLoaded = loadedState;\n      return true;\n    }\n    \n    if (node.children) {\n      for (let child of node.children) {\n        if (child.type === 'folder') {\n          if (updateFolderLoadedState(child, folderId, loadedState)) {\n            return true;\n          }\n        }\n      }\n    }\n    \n    return false;\n  };\n\n  const handleFileClick = async (file) => {\n    const fileExtension = file.name.split('.').pop().toLowerCase();\n    \n    // Special handling for XLSX files\n    if (fileExtension === 'xlsx') {\n      // Check if we've already parsed this file\n      if (!parsedXlsxFiles[file.path]) {\n        try {\n          setLoading(true);\n          const xlsxData = await parseXLSXFile(file.path);\n          \n          // Store the parsed data\n          setParsedXlsxFiles(prev => ({\n            ...prev,\n            [file.path]: xlsxData\n          }));\n          \n          // Create virtual headers as children of the XLSX file\n          const headerChildren = [];\n          \n          // Add sheet and header entries\n          Object.entries(xlsxData.sheets).forEach(([sheetName, sheetData]) => {\n            const sheetId = `${file.id}_sheet_${sheetName}`;\n            \n            // Create a sheet node\n            const sheetNode = {\n              id: sheetId,\n              name: sheetName,\n              type: 'xlsx_sheet',\n              path: `${file.path}#${sheetName}`,\n              parentFile: file,\n              sheetData: sheetData\n            };\n            \n            headerChildren.push(sheetNode);\n            \n            // Add headers as children of the sheet\n            sheetData.headers.forEach((header, index) => {\n              headerChildren.push({\n                id: `${sheetId}_header_${index}`,\n                name: header,\n                type: 'xlsx_header',\n                path: `${file.path}#${sheetName}#${header}`,\n                parentFile: file,\n                parentSheet: sheetName,\n                headerIndex: index,\n                sheetData: sheetData\n              });\n            });\n          });\n          \n          // Update file with virtual children\n          file.children = headerChildren;\n          file.isXlsxExpanded = true;\n          \n          // Force a re-render\n          setRootDirectory({...rootDirectory});\n          \n          // Also expand this file\n          setExpandedFolders(prev => ({\n            ...prev,\n            [file.id]: true\n          }));\n        } catch (err) {\n          console.error('Failed to parse XLSX file:', err);\n          setError(`Failed to parse XLSX file: ${err.message}`);\n        } finally {\n          setLoading(false);\n        }\n      } else {\n        // We've already parsed this file, just toggle expansion\n        file.isXlsxExpanded = !file.isXlsxExpanded;\n        \n        // Force a re-render\n        setRootDirectory({...rootDirectory});\n        \n        // Toggle expanded state\n        setExpandedFolders(prev => ({\n          ...prev,\n          [file.id]: !prev[file.id]\n        }));\n      }\n    }\n    \n    // For all files (including XLSX), notify parent component\n    if (onFileSelect) {\n      onFileSelect(file);\n    }\n  };\n\n  const handleHeaderClick = (header) => {\n    // When a header is clicked, notify parent with header info\n    if (onFileSelect) {\n      onFileSelect(header);\n    }\n  };\n\n  const handleSearchChange = (e) => {\n    setSearchTerm(e.target.value);\n  };\n\n  const filterItems = (items, term) => {\n    if (!term) return items;\n    \n    return items.filter(item => {\n      const matchesName = item.name.toLowerCase().includes(term.toLowerCase());\n      \n      // For folders, also check children\n      if (item.type === 'folder' && item.children) {\n        const matchingChildren = filterItems(item.children, term);\n        return matchesName || matchingChildren.length > 0;\n      }\n      \n      return matchesName;\n    });\n  };\n\n  const renderTree = (node) => {\n    if (!node) return null;\n\n    // Filter children if search term exists\n    const filteredChildren = node.children \n      ? filterItems(node.children, searchTerm)\n      : [];\n\n    const isExpanded = expandedFolders[node.id] || node.isXlsxExpanded;\n    \n    return (\n      <div className=\"tree-node\" key={node.id}>\n        <div \n          className={`tree-item ${node.type}`}\n          onClick={() => {\n            if (node.type === 'folder') {\n              handleFolderToggle(node);\n            } else if (node.type === 'file') {\n              handleFileClick(node);\n            } else if (node.type === 'xlsx_header') {\n              handleHeaderClick(node);\n            } else if (node.type === 'xlsx_sheet') {\n              // Do nothing for now, or handle sheet clicks separately\n            }\n          }}\n        >\n          <span className=\"icon\">\n            {node.type === 'folder' \n              ? (isExpanded ? '📂' : '📁') \n              : node.type === 'xlsx_sheet'\n                ? '📑'\n                : node.type === 'xlsx_header'\n                  ? '🔍'\n                  : getFileIcon(node.name)}\n          </span>\n          <span className=\"name\">{node.name}</span>\n        </div>\n        \n        {(node.type === 'folder' || node.type === 'file') && isExpanded && node.children && (\n          <div className=\"tree-children\">\n            {filteredChildren.length > 0 ? (\n              filteredChildren.map(child => renderTree(child))\n            ) : (\n              <div className=\"empty-folder-message\">\n                {searchTerm ? 'No matching files or folders' : 'Empty folder'}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  const getFileIcon = (filename) => {\n    const extension = filename.split('.').pop().toLowerCase();\n    \n    // Return different icons based on file extension\n    switch (extension) {\n      case 'pdf':\n        return '📄';\n      case 'doc':\n      case 'docx':\n        return '📝';\n      case 'xls':\n      case 'xlsx':\n        return '📊';\n      case 'jpg':\n      case 'jpeg':\n      case 'png':\n      case 'gif':\n        return '🖼️';\n      case 'mp3':\n      case 'wav':\n        return '🎵';\n      case 'mp4':\n      case 'mov':\n        return '🎬';\n      default:\n        return '📄';\n    }\n  };\n\n  return (\n    <div className=\"column file-explorer-column\">\n      <h3>File Explorer</h3>\n      <div className=\"search-box\">\n        <input \n          type=\"text\" \n          placeholder=\"Search files...\" \n          value={searchTerm}\n          onChange={handleSearchChange}\n        />\n      </div>\n      \n      <div className=\"tree-view\">\n        {loading && <div className=\"loading-message\">Loading...</div>}\n        {error && <div className=\"error-message\">{error}</div>}\n        {!loading && !error && rootDirectory && renderTree(rootDirectory)}\n      </div>\n    </div>\n  );\n};\n\nexport default FileExplorerColumn; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,0BAA0B;AACjC,SAASC,qBAAqB,QAAQ,kCAAkC;AACxE,SAASC,aAAa,QAAQ,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,kBAAkB,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EAC/C,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACiB,UAAU,EAAEC,aAAa,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACd;IACAoB,aAAa,CAAC,6BAA6B,CAAC;EAC9C,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAG,MAAOC,IAAI,IAAK;IACpC,IAAI;MACFR,UAAU,CAAC,IAAI,CAAC;MAChB,MAAMS,IAAI,GAAG,MAAMrB,qBAAqB,CAACoB,IAAI,CAAC;MAC9CZ,gBAAgB,CAACa,IAAI,CAAC;MACtB;MACAX,kBAAkB,CAACY,IAAI,KAAK;QAAE,GAAGA,IAAI;QAAE,CAACD,IAAI,CAACE,EAAE,GAAG;MAAK,CAAC,CAAC,CAAC;MAC1DT,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZV,QAAQ,CAAC,oCAAoC,CAAC;MAC9CW,OAAO,CAACZ,KAAK,CAACW,GAAG,CAAC;IACpB,CAAC,SAAS;MACRZ,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMc,kBAAkB,GAAG,MAAOC,MAAM,IAAK;IAC3C,MAAMC,QAAQ,GAAGD,MAAM,CAACJ,EAAE;IAC1B,MAAMM,UAAU,GAAGpB,eAAe,CAACmB,QAAQ,CAAC;IAE5C,IAAI,CAACC,UAAU,IAAI,CAACF,MAAM,CAACG,cAAc,EAAE;MACzC;MACA,IAAI;QACF,MAAMT,IAAI,GAAG,MAAMrB,qBAAqB,CAAC2B,MAAM,CAACP,IAAI,CAAC;;QAErD;QACAW,oBAAoB,CAACxB,aAAa,EAAEoB,MAAM,CAACJ,EAAE,EAAEF,IAAI,CAACW,QAAQ,CAAC;;QAE7D;QACAC,uBAAuB,CAAC1B,aAAa,EAAEoB,MAAM,CAACJ,EAAE,EAAE,IAAI,CAAC;MACzD,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACZ,KAAK,CAAC,iCAAiC,EAAEW,GAAG,CAAC;MACvD;IACF;;IAEA;IACAd,kBAAkB,CAACY,IAAI,KAAK;MAC1B,GAAGA,IAAI;MACP,CAACM,QAAQ,GAAG,CAACC;IACf,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAME,oBAAoB,GAAGA,CAACG,IAAI,EAAEN,QAAQ,EAAEI,QAAQ,KAAK;IACzD,IAAIE,IAAI,CAACX,EAAE,KAAKK,QAAQ,EAAE;MACxBM,IAAI,CAACF,QAAQ,GAAGA,QAAQ;MACxB,OAAO,IAAI;IACb;IAEA,IAAIE,IAAI,CAACF,QAAQ,EAAE;MACjB,KAAK,IAAIG,KAAK,IAAID,IAAI,CAACF,QAAQ,EAAE;QAC/B,IAAIG,KAAK,CAACC,IAAI,KAAK,QAAQ,EAAE;UAC3B,IAAIL,oBAAoB,CAACI,KAAK,EAAEP,QAAQ,EAAEI,QAAQ,CAAC,EAAE;YACnD,OAAO,IAAI;UACb;QACF;MACF;IACF;IAEA,OAAO,KAAK;EACd,CAAC;EAED,MAAMC,uBAAuB,GAAGA,CAACC,IAAI,EAAEN,QAAQ,EAAES,WAAW,KAAK;IAC/D,IAAIH,IAAI,CAACX,EAAE,KAAKK,QAAQ,EAAE;MACxBM,IAAI,CAACJ,cAAc,GAAGO,WAAW;MACjC,OAAO,IAAI;IACb;IAEA,IAAIH,IAAI,CAACF,QAAQ,EAAE;MACjB,KAAK,IAAIG,KAAK,IAAID,IAAI,CAACF,QAAQ,EAAE;QAC/B,IAAIG,KAAK,CAACC,IAAI,KAAK,QAAQ,EAAE;UAC3B,IAAIH,uBAAuB,CAACE,KAAK,EAAEP,QAAQ,EAAES,WAAW,CAAC,EAAE;YACzD,OAAO,IAAI;UACb;QACF;MACF;IACF;IAEA,OAAO,KAAK;EACd,CAAC;EAED,MAAMC,eAAe,GAAG,MAAOC,IAAI,IAAK;IACtC,MAAMC,aAAa,GAAGD,IAAI,CAACE,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;IAE9D;IACA,IAAIJ,aAAa,KAAK,MAAM,EAAE;MAC5B;MACA,IAAI,CAACvB,eAAe,CAACsB,IAAI,CAACnB,IAAI,CAAC,EAAE;QAC/B,IAAI;UACFR,UAAU,CAAC,IAAI,CAAC;UAChB,MAAMiC,QAAQ,GAAG,MAAM5C,aAAa,CAACsC,IAAI,CAACnB,IAAI,CAAC;;UAE/C;UACAF,kBAAkB,CAACI,IAAI,KAAK;YAC1B,GAAGA,IAAI;YACP,CAACiB,IAAI,CAACnB,IAAI,GAAGyB;UACf,CAAC,CAAC,CAAC;;UAEH;UACA,MAAMC,cAAc,GAAG,EAAE;;UAEzB;UACAC,MAAM,CAACC,OAAO,CAACH,QAAQ,CAACI,MAAM,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,SAAS,EAAEC,SAAS,CAAC,KAAK;YAClE,MAAMC,OAAO,GAAG,GAAGd,IAAI,CAAChB,EAAE,UAAU4B,SAAS,EAAE;;YAE/C;YACA,MAAMG,SAAS,GAAG;cAChB/B,EAAE,EAAE8B,OAAO;cACXZ,IAAI,EAAEU,SAAS;cACff,IAAI,EAAE,YAAY;cAClBhB,IAAI,EAAE,GAAGmB,IAAI,CAACnB,IAAI,IAAI+B,SAAS,EAAE;cACjCI,UAAU,EAAEhB,IAAI;cAChBa,SAAS,EAAEA;YACb,CAAC;YAEDN,cAAc,CAACU,IAAI,CAACF,SAAS,CAAC;;YAE9B;YACAF,SAAS,CAACK,OAAO,CAACP,OAAO,CAAC,CAACQ,MAAM,EAAEC,KAAK,KAAK;cAC3Cb,cAAc,CAACU,IAAI,CAAC;gBAClBjC,EAAE,EAAE,GAAG8B,OAAO,WAAWM,KAAK,EAAE;gBAChClB,IAAI,EAAEiB,MAAM;gBACZtB,IAAI,EAAE,aAAa;gBACnBhB,IAAI,EAAE,GAAGmB,IAAI,CAACnB,IAAI,IAAI+B,SAAS,IAAIO,MAAM,EAAE;gBAC3CH,UAAU,EAAEhB,IAAI;gBAChBqB,WAAW,EAAET,SAAS;gBACtBU,WAAW,EAAEF,KAAK;gBAClBP,SAAS,EAAEA;cACb,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;;UAEF;UACAb,IAAI,CAACP,QAAQ,GAAGc,cAAc;UAC9BP,IAAI,CAACuB,cAAc,GAAG,IAAI;;UAE1B;UACAtD,gBAAgB,CAAC;YAAC,GAAGD;UAAa,CAAC,CAAC;;UAEpC;UACAG,kBAAkB,CAACY,IAAI,KAAK;YAC1B,GAAGA,IAAI;YACP,CAACiB,IAAI,CAAChB,EAAE,GAAG;UACb,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,OAAOC,GAAG,EAAE;UACZC,OAAO,CAACZ,KAAK,CAAC,4BAA4B,EAAEW,GAAG,CAAC;UAChDV,QAAQ,CAAC,8BAA8BU,GAAG,CAACuC,OAAO,EAAE,CAAC;QACvD,CAAC,SAAS;UACRnD,UAAU,CAAC,KAAK,CAAC;QACnB;MACF,CAAC,MAAM;QACL;QACA2B,IAAI,CAACuB,cAAc,GAAG,CAACvB,IAAI,CAACuB,cAAc;;QAE1C;QACAtD,gBAAgB,CAAC;UAAC,GAAGD;QAAa,CAAC,CAAC;;QAEpC;QACAG,kBAAkB,CAACY,IAAI,KAAK;UAC1B,GAAGA,IAAI;UACP,CAACiB,IAAI,CAAChB,EAAE,GAAG,CAACD,IAAI,CAACiB,IAAI,CAAChB,EAAE;QAC1B,CAAC,CAAC,CAAC;MACL;IACF;;IAEA;IACA,IAAIlB,YAAY,EAAE;MAChBA,YAAY,CAACkC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,MAAMyB,iBAAiB,GAAIN,MAAM,IAAK;IACpC;IACA,IAAIrD,YAAY,EAAE;MAChBA,YAAY,CAACqD,MAAM,CAAC;IACtB;EACF,CAAC;EAED,MAAMO,kBAAkB,GAAIC,CAAC,IAAK;IAChClD,aAAa,CAACkD,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC/B,CAAC;EAED,MAAMC,WAAW,GAAGA,CAACC,KAAK,EAAEC,IAAI,KAAK;IACnC,IAAI,CAACA,IAAI,EAAE,OAAOD,KAAK;IAEvB,OAAOA,KAAK,CAACE,MAAM,CAACC,IAAI,IAAI;MAC1B,MAAMC,WAAW,GAAGD,IAAI,CAAChC,IAAI,CAACG,WAAW,CAAC,CAAC,CAAC+B,QAAQ,CAACJ,IAAI,CAAC3B,WAAW,CAAC,CAAC,CAAC;;MAExE;MACA,IAAI6B,IAAI,CAACrC,IAAI,KAAK,QAAQ,IAAIqC,IAAI,CAACzC,QAAQ,EAAE;QAC3C,MAAM4C,gBAAgB,GAAGP,WAAW,CAACI,IAAI,CAACzC,QAAQ,EAAEuC,IAAI,CAAC;QACzD,OAAOG,WAAW,IAAIE,gBAAgB,CAACC,MAAM,GAAG,CAAC;MACnD;MAEA,OAAOH,WAAW;IACpB,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,UAAU,GAAI5C,IAAI,IAAK;IAC3B,IAAI,CAACA,IAAI,EAAE,OAAO,IAAI;;IAEtB;IACA,MAAM6C,gBAAgB,GAAG7C,IAAI,CAACF,QAAQ,GAClCqC,WAAW,CAACnC,IAAI,CAACF,QAAQ,EAAEjB,UAAU,CAAC,GACtC,EAAE;IAEN,MAAMc,UAAU,GAAGpB,eAAe,CAACyB,IAAI,CAACX,EAAE,CAAC,IAAIW,IAAI,CAAC4B,cAAc;IAElE,oBACE3D,OAAA;MAAK6E,SAAS,EAAC,WAAW;MAAAhD,QAAA,gBACxB7B,OAAA;QACE6E,SAAS,EAAE,aAAa9C,IAAI,CAACE,IAAI,EAAG;QACpC6C,OAAO,EAAEA,CAAA,KAAM;UACb,IAAI/C,IAAI,CAACE,IAAI,KAAK,QAAQ,EAAE;YAC1BV,kBAAkB,CAACQ,IAAI,CAAC;UAC1B,CAAC,MAAM,IAAIA,IAAI,CAACE,IAAI,KAAK,MAAM,EAAE;YAC/BE,eAAe,CAACJ,IAAI,CAAC;UACvB,CAAC,MAAM,IAAIA,IAAI,CAACE,IAAI,KAAK,aAAa,EAAE;YACtC4B,iBAAiB,CAAC9B,IAAI,CAAC;UACzB,CAAC,MAAM,IAAIA,IAAI,CAACE,IAAI,KAAK,YAAY,EAAE;YACrC;UAAA;QAEJ,CAAE;QAAAJ,QAAA,gBAEF7B,OAAA;UAAM6E,SAAS,EAAC,MAAM;UAAAhD,QAAA,EACnBE,IAAI,CAACE,IAAI,KAAK,QAAQ,GAClBP,UAAU,GAAG,IAAI,GAAG,IAAI,GACzBK,IAAI,CAACE,IAAI,KAAK,YAAY,GACxB,IAAI,GACJF,IAAI,CAACE,IAAI,KAAK,aAAa,GACzB,IAAI,GACJ8C,WAAW,CAAChD,IAAI,CAACO,IAAI;QAAC;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1B,CAAC,eACPnF,OAAA;UAAM6E,SAAS,EAAC,MAAM;UAAAhD,QAAA,EAAEE,IAAI,CAACO;QAAI;UAAA0C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,EAEL,CAACpD,IAAI,CAACE,IAAI,KAAK,QAAQ,IAAIF,IAAI,CAACE,IAAI,KAAK,MAAM,KAAKP,UAAU,IAAIK,IAAI,CAACF,QAAQ,iBAC9E7B,OAAA;QAAK6E,SAAS,EAAC,eAAe;QAAAhD,QAAA,EAC3B+C,gBAAgB,CAACF,MAAM,GAAG,CAAC,GAC1BE,gBAAgB,CAACQ,GAAG,CAACpD,KAAK,IAAI2C,UAAU,CAAC3C,KAAK,CAAC,CAAC,gBAEhDhC,OAAA;UAAK6E,SAAS,EAAC,sBAAsB;UAAAhD,QAAA,EAClCjB,UAAU,GAAG,8BAA8B,GAAG;QAAc;UAAAoE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1D;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CACN;IAAA,GArC6BpD,IAAI,CAACX,EAAE;MAAA4D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAsClC,CAAC;EAEV,CAAC;EAED,MAAMJ,WAAW,GAAIM,QAAQ,IAAK;IAChC,MAAMC,SAAS,GAAGD,QAAQ,CAAC9C,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;;IAEzD;IACA,QAAQ6C,SAAS;MACf,KAAK,KAAK;QACR,OAAO,IAAI;MACb,KAAK,KAAK;MACV,KAAK,MAAM;QACT,OAAO,IAAI;MACb,KAAK,KAAK;MACV,KAAK,MAAM;QACT,OAAO,IAAI;MACb,KAAK,KAAK;MACV,KAAK,MAAM;MACX,KAAK,KAAK;MACV,KAAK,KAAK;QACR,OAAO,KAAK;MACd,KAAK,KAAK;MACV,KAAK,KAAK;QACR,OAAO,IAAI;MACb,KAAK,KAAK;MACV,KAAK,KAAK;QACR,OAAO,IAAI;MACb;QACE,OAAO,IAAI;IACf;EACF,CAAC;EAED,oBACEtF,OAAA;IAAK6E,SAAS,EAAC,6BAA6B;IAAAhD,QAAA,gBAC1C7B,OAAA;MAAA6B,QAAA,EAAI;IAAa;MAAAmD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBnF,OAAA;MAAK6E,SAAS,EAAC,YAAY;MAAAhD,QAAA,eACzB7B,OAAA;QACEiC,IAAI,EAAC,MAAM;QACXsD,WAAW,EAAC,iBAAiB;QAC7BtB,KAAK,EAAErD,UAAW;QAClB4E,QAAQ,EAAE1B;MAAmB;QAAAkB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAENnF,OAAA;MAAK6E,SAAS,EAAC,WAAW;MAAAhD,QAAA,GACvBrB,OAAO,iBAAIR,OAAA;QAAK6E,SAAS,EAAC,iBAAiB;QAAAhD,QAAA,EAAC;MAAU;QAAAmD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,EAC5DzE,KAAK,iBAAIV,OAAA;QAAK6E,SAAS,EAAC,eAAe;QAAAhD,QAAA,EAAEnB;MAAK;QAAAsE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,EACrD,CAAC3E,OAAO,IAAI,CAACE,KAAK,IAAIN,aAAa,IAAIuE,UAAU,CAACvE,aAAa,CAAC;IAAA;MAAA4E,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAChF,EAAA,CAvTIF,kBAAkB;AAAAwF,EAAA,GAAlBxF,kBAAkB;AAyTxB,eAAeA,kBAAkB;AAAC,IAAAwF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}