{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupingSheet.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './GroupingSheet.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupingSheet = ({\n  segmentValues = []\n}) => {\n  _s();\n  // 기본 빈 그룹들 생성 (미처리 + 추가 빈 그룹들)\n  const [groups, setGroups] = useState([{\n    id: 'unprocessed',\n    name: '미처리',\n    items: [],\n    isDefault: true,\n    isEditable: false\n  }, {\n    id: 'group-1',\n    name: '그룹 1',\n    items: [],\n    isDefault: false,\n    isEditable: true\n  }, {\n    id: 'group-2',\n    name: '그룹 2',\n    items: [],\n    isDefault: false,\n    isEditable: true\n  }, {\n    id: 'group-3',\n    name: '그룹 3',\n    items: [],\n    isDefault: false,\n    isEditable: true\n  }]);\n\n  // 값들의 그룹 할당 상태 관리\n  const [valueGroups, setValueGroups] = useState({});\n\n  // 선택된 그룹 관리\n  const [selectedGroupId, setSelectedGroupId] = useState('group-1');\n\n  // 각 그룹별 정렬 상태 관리\n  const [sortStates, setSortStates] = useState({});\n\n  // 미처리 칼럼의 그리드 레이아웃 상태 관리 (1xn, 2xn, 3xn, 4xn)\n  const [columnCount, setColumnCount] = useState(2);\n\n  // 스크롤 가능한 영역 참조\n  const scrollableRef = useRef(null);\n\n  // 각 그룹 칼럼 참조를 저장하는 객체\n  const columnRefs = useRef({});\n\n  // 미처리 아이템 스크롤 영역 참조\n  const unprocessedItemsRef = useRef(null);\n\n  // 컴포넌트 마운트시 미처리 그룹에 모든 분절값 추가\n  useEffect(() => {\n    if (segmentValues.length > 0) {\n      // 초기 상태에서 모든 값은 미처리 그룹에 할당\n      const initialValueGroups = {};\n      segmentValues.forEach(value => {\n        initialValueGroups[value] = 'unprocessed';\n      });\n      setValueGroups(initialValueGroups);\n\n      // 미처리 그룹에 값 할당\n      setGroups(prevGroups => {\n        const updatedGroups = [...prevGroups];\n        const unprocessedGroup = updatedGroups.find(g => g.id === 'unprocessed');\n        if (unprocessedGroup) {\n          unprocessedGroup.items = [...segmentValues];\n        }\n        return updatedGroups;\n      });\n\n      // 각 그룹의 정렬 상태 초기화\n      const initialSortStates = {};\n      groups.forEach(group => {\n        initialSortStates[group.id] = {\n          type: 'none' // 'none', 'firstAsc', 'firstDesc', 'lastAsc', 'lastDesc'\n        };\n      });\n      setSortStates(initialSortStates);\n    }\n  }, [segmentValues]);\n\n  // 그룹 선택 함수\n  const selectGroup = groupId => {\n    if (groupId !== 'unprocessed') {\n      setSelectedGroupId(groupId);\n      scrollToGroup(groupId);\n    }\n  };\n\n  // 특정 그룹으로 스크롤하는 함수\n  const scrollToGroup = groupId => {\n    if (scrollableRef.current && columnRefs.current[groupId]) {\n      const container = scrollableRef.current;\n      const element = columnRefs.current[groupId];\n      const containerRect = container.getBoundingClientRect();\n      const elementRect = element.getBoundingClientRect();\n\n      // 요소가 컨테이너 범위 밖에 있는지 확인\n      if (elementRect.left < containerRect.left || elementRect.right > containerRect.right) {\n        // 요소의 왼쪽 위치로 스크롤 (부드러운 스크롤 애니메이션 적용)\n        container.scrollTo({\n          left: element.offsetLeft - container.offsetLeft,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n\n  // 값을 그룹에 할당하는 함수\n  const assignToGroup = (value, groupId) => {\n    // 같은 그룹으로 이동이면 무시\n    if (valueGroups[value] === groupId) return;\n\n    // 현재 할당된 그룹에서 제거\n    const currentGroupId = valueGroups[value];\n    if (currentGroupId) {\n      setGroups(prevGroups => {\n        return prevGroups.map(group => {\n          if (group.id === currentGroupId) {\n            return {\n              ...group,\n              items: group.items.filter(item => item !== value)\n            };\n          }\n          return group;\n        });\n      });\n    }\n\n    // 새 그룹에 추가\n    setGroups(prevGroups => {\n      return prevGroups.map(group => {\n        if (group.id === groupId) {\n          return {\n            ...group,\n            items: [...group.items, value]\n          };\n        }\n        return group;\n      });\n    });\n\n    // 값의 그룹 매핑 업데이트\n    setValueGroups({\n      ...valueGroups,\n      [value]: groupId\n    });\n  };\n\n  // 아이템 클릭 핸들러\n  const handleItemClick = (value, currentGroupId) => {\n    // 미처리 항목을 클릭한 경우, 선택된 그룹으로 이동\n    if (currentGroupId === 'unprocessed' && selectedGroupId !== 'unprocessed') {\n      assignToGroup(value, selectedGroupId);\n    }\n    // 다른 그룹의 항목을 클릭한 경우, 미처리로 되돌림\n    else if (currentGroupId !== 'unprocessed') {\n      assignToGroup(value, 'unprocessed');\n    }\n  };\n\n  // 그룹명 변경 함수\n  const [editingGroupId, setEditingGroupId] = useState(null);\n  const [editingGroupName, setEditingGroupName] = useState('');\n  const startEditingGroupName = (group, e) => {\n    // 이벤트 전파 방지 (그룹 선택과 충돌방지)\n    e.stopPropagation();\n    if (!group.isEditable) return; // 수정 불가 그룹은 변경 불가\n    setEditingGroupId(group.id);\n    setEditingGroupName(group.name);\n  };\n  const saveGroupName = () => {\n    if (!editingGroupName.trim()) return;\n    setGroups(prevGroups => {\n      return prevGroups.map(group => {\n        if (group.id === editingGroupId) {\n          return {\n            ...group,\n            name: editingGroupName.trim()\n          };\n        }\n        return group;\n      });\n    });\n    setEditingGroupId(null);\n    setEditingGroupName('');\n  };\n\n  // 그룹 추가 함수\n  const addGroup = () => {\n    const newGroupId = `group-${Date.now()}`;\n    const newGroup = {\n      id: newGroupId,\n      name: `그룹 ${groups.length}`,\n      items: [],\n      isDefault: false,\n      isEditable: true\n    };\n    setGroups([...groups, newGroup]);\n\n    // 새 그룹의 정렬 상태 초기화\n    setSortStates(prevStates => ({\n      ...prevStates,\n      [newGroupId]: {\n        type: 'none'\n      }\n    }));\n  };\n\n  // 정렬 상태 순서 정의\n  const sortCycle = ['none', 'firstAsc', 'firstDesc', 'lastAsc', 'lastDesc'];\n\n  // 정렬 버튼 클릭시 순환하는 함수\n  const cycleSortType = groupId => {\n    var _sortStates$groupId;\n    const currentType = ((_sortStates$groupId = sortStates[groupId]) === null || _sortStates$groupId === void 0 ? void 0 : _sortStates$groupId.type) || 'none';\n    const currentIndex = sortCycle.indexOf(currentType);\n    const nextIndex = (currentIndex + 1) % sortCycle.length;\n    const nextType = sortCycle[nextIndex];\n    sortItems(groupId, nextType);\n  };\n\n  // 정렬 함수\n  const sortItems = (groupId, sortType) => {\n    setSortStates(prevStates => ({\n      ...prevStates,\n      [groupId]: {\n        type: sortType\n      }\n    }));\n    setGroups(prevGroups => {\n      return prevGroups.map(group => {\n        if (group.id === groupId) {\n          const sortedItems = [...group.items];\n          switch (sortType) {\n            case 'firstAsc':\n              sortedItems.sort((a, b) => a.localeCompare(b));\n              break;\n            case 'firstDesc':\n              sortedItems.sort((a, b) => b.localeCompare(a));\n              break;\n            case 'lastAsc':\n              sortedItems.sort((a, b) => {\n                const aLast = a.charAt(a.length - 1);\n                const bLast = b.charAt(b.length - 1);\n                return aLast.localeCompare(bLast) || a.localeCompare(b);\n              });\n              break;\n            case 'lastDesc':\n              sortedItems.sort((a, b) => {\n                const aLast = a.charAt(a.length - 1);\n                const bLast = b.charAt(b.length - 1);\n                return bLast.localeCompare(aLast) || b.localeCompare(a);\n              });\n              break;\n            default:\n              break;\n          }\n          return {\n            ...group,\n            items: sortedItems\n          };\n        }\n        return group;\n      });\n    });\n  };\n\n  // 정렬 상태에 따른 아이콘 및 텍스트 표시\n  const getSortLabel = groupId => {\n    var _sortStates$groupId2;\n    const currentSort = ((_sortStates$groupId2 = sortStates[groupId]) === null || _sortStates$groupId2 === void 0 ? void 0 : _sortStates$groupId2.type) || 'none';\n    switch (currentSort) {\n      case 'firstAsc':\n        return '앞글자 A→Z';\n      case 'firstDesc':\n        return '앞글자 Z→A';\n      case 'lastAsc':\n        return '끝글자 A→Z';\n      case 'lastDesc':\n        return '끝글자 Z→A';\n      default:\n        return '정렬';\n    }\n  };\n\n  // 미처리 칼럼의 레이아웃 변경 함수\n  const cycleColumnCount = e => {\n    e.stopPropagation(); // 그룹 선택과 충돌방지\n    setColumnCount(prevCount => {\n      // 1, 2, 3, 4 순으로 순환\n      return prevCount === 4 ? 1 : prevCount + 1;\n    });\n  };\n\n  // 레이아웃 변경 버튼 텍스트 반환\n  const getLayoutLabel = () => {\n    return `${columnCount}x`;\n  };\n\n  // 일반 그룹만 따로 필터링 (미처리 제외)\n  const normalGroups = groups.filter(group => group.id !== 'unprocessed');\n\n  // 미처리 그룹 찾기\n  const unprocessedGroup = groups.find(group => group.id === 'unprocessed');\n\n  // 인덱스 그룹으로 스크롤 함수\n  const scrollToIndex = index => {\n    if (!unprocessedItemsRef.current) return;\n    const indexElement = document.getElementById(`index-${index}`);\n    if (indexElement) {\n      unprocessedItemsRef.current.scrollTop = indexElement.offsetTop;\n    }\n  };\n\n  // 항목을 인덱스별로 그룹화하는 함수\n  const getGroupedItems = items => {\n    const grouped = {};\n\n    // 한글 자음 및 알파벳 인덱스 정의\n    const koreanIndices = ['ㄱ', 'ㄴ', 'ㄷ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n    const alphabetIndices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    const numericIndex = '#';\n\n    // 인덱스 초기화\n    [...koreanIndices, ...alphabetIndices, numericIndex].forEach(index => {\n      grouped[index] = [];\n    });\n\n    // 각 항목을 해당 인덱스에 분류\n    items.forEach(item => {\n      const firstChar = item.charAt(0).toUpperCase();\n\n      // 첫 글자가 한글인지 확인\n      if (/[가-힣]/.test(firstChar)) {\n        // 한글 자음 결정 (초성 추출)\n        const code = firstChar.charCodeAt(0) - 44032;\n        const cho = Math.floor(code / 588);\n        const index = koreanIndices[cho] || koreanIndices[0];\n        grouped[index].push(item);\n      }\n      // 첫 글자가 알파벳인지 확인\n      else if (/[A-Z]/.test(firstChar)) {\n        grouped[firstChar].push(item);\n      }\n      // 숫자 및 기타 문자\n      else {\n        grouped[numericIndex].push(item);\n      }\n    });\n\n    // 비어있지 않은 그룹만 필터링\n    const filteredGroups = {};\n    [...koreanIndices, ...alphabetIndices, numericIndex].forEach(index => {\n      if (grouped[index].length > 0) {\n        filteredGroups[index] = grouped[index];\n      }\n    });\n    return filteredGroups;\n  };\n\n  // 그룹 헤더 렌더링 함수\n  const renderGroupHeader = group => {\n    var _sortStates$group$id;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `group-header ${selectedGroupId === group.id ? 'selected-group-header' : ''} ${group.id === 'unprocessed' ? 'unprocessed-header' : ''}`,\n      onClick: () => selectGroup(group.id),\n      children: editingGroupId === group.id ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-name-edit\",\n        onClick: e => e.stopPropagation(),\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: editingGroupName,\n          onChange: e => setEditingGroupName(e.target.value),\n          onBlur: saveGroupName,\n          onKeyDown: e => e.key === 'Enter' && saveGroupName(),\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-title\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"group-name\",\n          onClick: e => startEditingGroupName(group, e),\n          title: !group.isEditable ? \"이 그룹명은 변경할 수 없습니다\" : \"클릭하여 그룹명 변경\",\n          children: [group.name, \" (\", group.items.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"header-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `sort-cycle-btn ${((_sortStates$group$id = sortStates[group.id]) === null || _sortStates$group$id === void 0 ? void 0 : _sortStates$group$id.type) !== 'none' ? 'active' : ''}`,\n            onClick: e => {\n              e.stopPropagation();\n              cycleSortType(group.id);\n            },\n            title: \"\\uD074\\uB9AD\\uD558\\uC5EC \\uC815\\uB82C \\uBC29\\uC2DD \\uBCC0\\uACBD\",\n            children: getSortLabel(group.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this), group.id === 'unprocessed' && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"column-layout-btn\",\n            onClick: cycleColumnCount,\n            title: \"\\uD074\\uB9AD\\uD558\\uC5EC \\uC5F4 \\uB808\\uC774\\uC544\\uC6C3 \\uBCC0\\uACBD\",\n            children: getLayoutLabel()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 5\n    }, this);\n  };\n\n  // 그룹 아이템 렌더링 함수\n  const renderGroupItems = group => {\n    if (group.id === 'unprocessed') {\n      // 미처리 항목은 동적 그리드로 표시\n      const groupedItems = getGroupedItems(group.items);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"unprocessed-items-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alphabet-index\",\n          children: Object.keys(groupedItems).map(index => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"index-item\",\n            onClick: () => scrollToIndex(index),\n            children: index\n          }, `alphabet-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 417,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"unprocessed-items\",\n          ref: unprocessedItemsRef,\n          children: Object.entries(groupedItems).map(([index, items]) => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"index-header\",\n              id: `index-${index}`,\n              children: index\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `multi-column-grid columns-${columnCount}`,\n              children: items.map(value => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"group-item clickable\",\n                onClick: () => handleItemClick(value, group.id),\n                children: value\n              }, `${group.id}-${value}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this)]\n          }, `section-${index}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 9\n      }, this);\n    } else {\n      // 일반 그룹은 기존 방식대로 표시\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-items\",\n        children: [group.items.map(value => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `group-item ${group.id === 'unprocessed' || group.id !== 'unprocessed' ? 'clickable' : ''}`,\n          onClick: () => handleItemClick(value, group.id),\n          children: value\n        }, `${group.id}-${value}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 13\n        }, this)), group.items.length === 0 && group.id !== 'unprocessed' && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"empty-group-message\",\n          children: \"\\uBBF8\\uCC98\\uB9AC \\uD56D\\uBAA9\\uC744 \\uD074\\uB9AD\\uD558\\uC5EC \\uC774 \\uADF8\\uB8F9\\uC5D0 \\uCD94\\uAC00\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 461,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grouping-sheet\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouping-actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-group-btn\",\n        onClick: addGroup,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"btn-icon\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 474,\n          columnNumber: 11\n        }, this), \"\\uC0C8 \\uADF8\\uB8F9 \\uCD94\\uAC00\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"group-tags\",\n        children: normalGroups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `group-tag ${selectedGroupId === group.id ? 'active' : ''}`,\n          onClick: () => selectGroup(group.id),\n          children: group.name\n        }, `tag-${group.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 479,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sheet-container\",\n      children: [unprocessedGroup && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"freeze-column\",\n        children: [renderGroupHeader(unprocessedGroup), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"group-column unprocessed-column\",\n          children: renderGroupItems(unprocessedGroup)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scrollable-columns\",\n        ref: scrollableRef,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grouping-grid\",\n          children: normalGroups.map(group => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-col fixed-width\",\n            ref: el => columnRefs.current[group.id] = el,\n            children: [renderGroupHeader(group), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `group-column ${selectedGroupId === group.id ? 'selected-group' : ''}`,\n              children: renderGroupItems(group)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 509,\n              columnNumber: 17\n            }, this)]\n          }, group.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 471,\n    columnNumber: 5\n  }, this);\n};\n_s(GroupingSheet, \"MJgFAItGsVFntUtdv/vYVUNHBlM=\");\n_c = GroupingSheet;\nexport default GroupingSheet;\nvar _c;\n$RefreshReg$(_c, \"GroupingSheet\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","GroupingSheet","segmentValues","_s","groups","setGroups","id","name","items","isDefault","isEditable","valueGroups","setValueGroups","selectedGroupId","setSelectedGroupId","sortStates","setSortStates","columnCount","setColumnCount","scrollableRef","columnRefs","unprocessedItemsRef","length","initialValueGroups","forEach","value","prevGroups","updatedGroups","unprocessedGroup","find","g","initialSortStates","group","type","selectGroup","groupId","scrollToGroup","current","container","element","containerRect","getBoundingClientRect","elementRect","left","right","scrollTo","offsetLeft","behavior","assignToGroup","currentGroupId","map","filter","item","handleItemClick","editingGroupId","setEditingGroupId","editingGroupName","setEditingGroupName","startEditingGroupName","e","stopPropagation","saveGroupName","trim","addGroup","newGroupId","Date","now","newGroup","prevStates","sortCycle","cycleSortType","_sortStates$groupId","currentType","currentIndex","indexOf","nextIndex","nextType","sortItems","sortType","sortedItems","sort","a","b","localeCompare","aLast","charAt","bLast","getSortLabel","_sortStates$groupId2","currentSort","cycleColumnCount","prevCount","getLayoutLabel","normalGroups","scrollToIndex","index","indexElement","document","getElementById","scrollTop","offsetTop","getGroupedItems","grouped","koreanIndices","alphabetIndices","numericIndex","firstChar","toUpperCase","test","code","charCodeAt","cho","Math","floor","push","filteredGroups","renderGroupHeader","_sortStates$group$id","className","onClick","children","onChange","target","onBlur","onKeyDown","key","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","title","renderGroupItems","groupedItems","Object","keys","ref","entries","el","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupingSheet.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './GroupingSheet.css';\n\nconst GroupingSheet = ({ segmentValues = [] }) => {\n  // 기본 빈 그룹들 생성 (미처리 + 추가 빈 그룹들)\n  const [groups, setGroups] = useState([\n    { id: 'unprocessed', name: '미처리', items: [], isDefault: true, isEditable: false },\n    { id: 'group-1', name: '그룹 1', items: [], isDefault: false, isEditable: true },\n    { id: 'group-2', name: '그룹 2', items: [], isDefault: false, isEditable: true },\n    { id: 'group-3', name: '그룹 3', items: [], isDefault: false, isEditable: true }\n  ]);\n  \n  // 값들의 그룹 할당 상태 관리\n  const [valueGroups, setValueGroups] = useState({});\n  \n  // 선택된 그룹 관리\n  const [selectedGroupId, setSelectedGroupId] = useState('group-1');\n  \n  // 각 그룹별 정렬 상태 관리\n  const [sortStates, setSortStates] = useState({});\n  \n  // 미처리 칼럼의 그리드 레이아웃 상태 관리 (1xn, 2xn, 3xn, 4xn)\n  const [columnCount, setColumnCount] = useState(2);\n  \n  // 스크롤 가능한 영역 참조\n  const scrollableRef = useRef(null);\n  \n  // 각 그룹 칼럼 참조를 저장하는 객체\n  const columnRefs = useRef({});\n  \n  // 미처리 아이템 스크롤 영역 참조\n  const unprocessedItemsRef = useRef(null);\n  \n  // 컴포넌트 마운트시 미처리 그룹에 모든 분절값 추가\n  useEffect(() => {\n    if (segmentValues.length > 0) {\n      // 초기 상태에서 모든 값은 미처리 그룹에 할당\n      const initialValueGroups = {};\n      segmentValues.forEach(value => {\n        initialValueGroups[value] = 'unprocessed';\n      });\n      \n      setValueGroups(initialValueGroups);\n      \n      // 미처리 그룹에 값 할당\n      setGroups(prevGroups => {\n        const updatedGroups = [...prevGroups];\n        const unprocessedGroup = updatedGroups.find(g => g.id === 'unprocessed');\n        if (unprocessedGroup) {\n          unprocessedGroup.items = [...segmentValues];\n        }\n        return updatedGroups;\n      });\n      \n      // 각 그룹의 정렬 상태 초기화\n      const initialSortStates = {};\n      groups.forEach(group => {\n        initialSortStates[group.id] = {\n          type: 'none', // 'none', 'firstAsc', 'firstDesc', 'lastAsc', 'lastDesc'\n        };\n      });\n      setSortStates(initialSortStates);\n    }\n  }, [segmentValues]);\n  \n  // 그룹 선택 함수\n  const selectGroup = (groupId) => {\n    if (groupId !== 'unprocessed') {\n      setSelectedGroupId(groupId);\n      scrollToGroup(groupId);\n    }\n  };\n  \n  // 특정 그룹으로 스크롤하는 함수\n  const scrollToGroup = (groupId) => {\n    if (scrollableRef.current && columnRefs.current[groupId]) {\n      const container = scrollableRef.current;\n      const element = columnRefs.current[groupId];\n      const containerRect = container.getBoundingClientRect();\n      const elementRect = element.getBoundingClientRect();\n      \n      // 요소가 컨테이너 범위 밖에 있는지 확인\n      if (elementRect.left < containerRect.left || elementRect.right > containerRect.right) {\n        // 요소의 왼쪽 위치로 스크롤 (부드러운 스크롤 애니메이션 적용)\n        container.scrollTo({\n          left: element.offsetLeft - container.offsetLeft,\n          behavior: 'smooth'\n        });\n      }\n    }\n  };\n  \n  // 값을 그룹에 할당하는 함수\n  const assignToGroup = (value, groupId) => {\n    // 같은 그룹으로 이동이면 무시\n    if (valueGroups[value] === groupId) return;\n    \n    // 현재 할당된 그룹에서 제거\n    const currentGroupId = valueGroups[value];\n    if (currentGroupId) {\n      setGroups(prevGroups => {\n        return prevGroups.map(group => {\n          if (group.id === currentGroupId) {\n            return {\n              ...group,\n              items: group.items.filter(item => item !== value)\n            };\n          }\n          return group;\n        });\n      });\n    }\n    \n    // 새 그룹에 추가\n    setGroups(prevGroups => {\n      return prevGroups.map(group => {\n        if (group.id === groupId) {\n          return {\n            ...group,\n            items: [...group.items, value]\n          };\n        }\n        return group;\n      });\n    });\n    \n    // 값의 그룹 매핑 업데이트\n    setValueGroups({\n      ...valueGroups,\n      [value]: groupId\n    });\n  };\n  \n  // 아이템 클릭 핸들러\n  const handleItemClick = (value, currentGroupId) => {\n    // 미처리 항목을 클릭한 경우, 선택된 그룹으로 이동\n    if (currentGroupId === 'unprocessed' && selectedGroupId !== 'unprocessed') {\n      assignToGroup(value, selectedGroupId);\n    }\n    // 다른 그룹의 항목을 클릭한 경우, 미처리로 되돌림\n    else if (currentGroupId !== 'unprocessed') {\n      assignToGroup(value, 'unprocessed');\n    }\n  };\n  \n  // 그룹명 변경 함수\n  const [editingGroupId, setEditingGroupId] = useState(null);\n  const [editingGroupName, setEditingGroupName] = useState('');\n  \n  const startEditingGroupName = (group, e) => {\n    // 이벤트 전파 방지 (그룹 선택과 충돌방지)\n    e.stopPropagation();\n    \n    if (!group.isEditable) return; // 수정 불가 그룹은 변경 불가\n    setEditingGroupId(group.id);\n    setEditingGroupName(group.name);\n  };\n  \n  const saveGroupName = () => {\n    if (!editingGroupName.trim()) return;\n    \n    setGroups(prevGroups => {\n      return prevGroups.map(group => {\n        if (group.id === editingGroupId) {\n          return {\n            ...group,\n            name: editingGroupName.trim()\n          };\n        }\n        return group;\n      });\n    });\n    \n    setEditingGroupId(null);\n    setEditingGroupName('');\n  };\n  \n  // 그룹 추가 함수\n  const addGroup = () => {\n    const newGroupId = `group-${Date.now()}`;\n    const newGroup = {\n      id: newGroupId,\n      name: `그룹 ${groups.length}`,\n      items: [],\n      isDefault: false,\n      isEditable: true\n    };\n    \n    setGroups([...groups, newGroup]);\n    \n    // 새 그룹의 정렬 상태 초기화\n    setSortStates(prevStates => ({\n      ...prevStates,\n      [newGroupId]: { type: 'none' }\n    }));\n  };\n  \n  // 정렬 상태 순서 정의\n  const sortCycle = ['none', 'firstAsc', 'firstDesc', 'lastAsc', 'lastDesc'];\n  \n  // 정렬 버튼 클릭시 순환하는 함수\n  const cycleSortType = (groupId) => {\n    const currentType = sortStates[groupId]?.type || 'none';\n    const currentIndex = sortCycle.indexOf(currentType);\n    const nextIndex = (currentIndex + 1) % sortCycle.length;\n    const nextType = sortCycle[nextIndex];\n    \n    sortItems(groupId, nextType);\n  };\n  \n  // 정렬 함수\n  const sortItems = (groupId, sortType) => {\n    setSortStates(prevStates => ({\n      ...prevStates,\n      [groupId]: { type: sortType }\n    }));\n    \n    setGroups(prevGroups => {\n      return prevGroups.map(group => {\n        if (group.id === groupId) {\n          const sortedItems = [...group.items];\n          \n          switch (sortType) {\n            case 'firstAsc':\n              sortedItems.sort((a, b) => a.localeCompare(b));\n              break;\n            case 'firstDesc':\n              sortedItems.sort((a, b) => b.localeCompare(a));\n              break;\n            case 'lastAsc':\n              sortedItems.sort((a, b) => {\n                const aLast = a.charAt(a.length - 1);\n                const bLast = b.charAt(b.length - 1);\n                return aLast.localeCompare(bLast) || a.localeCompare(b);\n              });\n              break;\n            case 'lastDesc':\n              sortedItems.sort((a, b) => {\n                const aLast = a.charAt(a.length - 1);\n                const bLast = b.charAt(b.length - 1);\n                return bLast.localeCompare(aLast) || b.localeCompare(a);\n              });\n              break;\n            default:\n              break;\n          }\n          \n          return {\n            ...group,\n            items: sortedItems\n          };\n        }\n        return group;\n      });\n    });\n  };\n  \n  // 정렬 상태에 따른 아이콘 및 텍스트 표시\n  const getSortLabel = (groupId) => {\n    const currentSort = sortStates[groupId]?.type || 'none';\n    \n    switch (currentSort) {\n      case 'firstAsc':\n        return '앞글자 A→Z';\n      case 'firstDesc':\n        return '앞글자 Z→A';\n      case 'lastAsc':\n        return '끝글자 A→Z';\n      case 'lastDesc':\n        return '끝글자 Z→A';\n      default:\n        return '정렬';\n    }\n  };\n  \n  // 미처리 칼럼의 레이아웃 변경 함수\n  const cycleColumnCount = (e) => {\n    e.stopPropagation(); // 그룹 선택과 충돌방지\n    setColumnCount(prevCount => {\n      // 1, 2, 3, 4 순으로 순환\n      return prevCount === 4 ? 1 : prevCount + 1;\n    });\n  };\n  \n  // 레이아웃 변경 버튼 텍스트 반환\n  const getLayoutLabel = () => {\n    return `${columnCount}x`;\n  };\n  \n  // 일반 그룹만 따로 필터링 (미처리 제외)\n  const normalGroups = groups.filter(group => group.id !== 'unprocessed');\n  \n  // 미처리 그룹 찾기\n  const unprocessedGroup = groups.find(group => group.id === 'unprocessed');\n\n  // 인덱스 그룹으로 스크롤 함수\n  const scrollToIndex = (index) => {\n    if (!unprocessedItemsRef.current) return;\n    \n    const indexElement = document.getElementById(`index-${index}`);\n    if (indexElement) {\n      unprocessedItemsRef.current.scrollTop = indexElement.offsetTop;\n    }\n  };\n\n  // 항목을 인덱스별로 그룹화하는 함수\n  const getGroupedItems = (items) => {\n    const grouped = {};\n    \n    // 한글 자음 및 알파벳 인덱스 정의\n    const koreanIndices = ['ㄱ', 'ㄴ', 'ㄷ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n    const alphabetIndices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];\n    const numericIndex = '#';\n    \n    // 인덱스 초기화\n    [...koreanIndices, ...alphabetIndices, numericIndex].forEach(index => {\n      grouped[index] = [];\n    });\n    \n    // 각 항목을 해당 인덱스에 분류\n    items.forEach(item => {\n      const firstChar = item.charAt(0).toUpperCase();\n      \n      // 첫 글자가 한글인지 확인\n      if (/[가-힣]/.test(firstChar)) {\n        // 한글 자음 결정 (초성 추출)\n        const code = firstChar.charCodeAt(0) - 44032;\n        const cho = Math.floor(code / 588);\n        const index = koreanIndices[cho] || koreanIndices[0];\n        grouped[index].push(item);\n      }\n      // 첫 글자가 알파벳인지 확인\n      else if (/[A-Z]/.test(firstChar)) {\n        grouped[firstChar].push(item);\n      }\n      // 숫자 및 기타 문자\n      else {\n        grouped[numericIndex].push(item);\n      }\n    });\n    \n    // 비어있지 않은 그룹만 필터링\n    const filteredGroups = {};\n    [...koreanIndices, ...alphabetIndices, numericIndex].forEach(index => {\n      if (grouped[index].length > 0) {\n        filteredGroups[index] = grouped[index];\n      }\n    });\n    \n    return filteredGroups;\n  };\n\n  // 그룹 헤더 렌더링 함수\n  const renderGroupHeader = (group) => (\n    <div \n      className={`group-header ${selectedGroupId === group.id ? 'selected-group-header' : ''} ${group.id === 'unprocessed' ? 'unprocessed-header' : ''}`}\n      onClick={() => selectGroup(group.id)}\n    >\n      {editingGroupId === group.id ? (\n        <div className=\"group-name-edit\" onClick={(e) => e.stopPropagation()}>\n          <input\n            type=\"text\"\n            value={editingGroupName}\n            onChange={(e) => setEditingGroupName(e.target.value)}\n            onBlur={saveGroupName}\n            onKeyDown={(e) => e.key === 'Enter' && saveGroupName()}\n            autoFocus\n          />\n        </div>\n      ) : (\n        <div className=\"group-title\">\n          <span \n            className=\"group-name\"\n            onClick={(e) => startEditingGroupName(group, e)}\n            title={!group.isEditable ? \"이 그룹명은 변경할 수 없습니다\" : \"클릭하여 그룹명 변경\"}\n          >\n            {group.name} ({group.items.length})\n          </span>\n          \n          <div className=\"header-actions\">\n            <button \n              className={`sort-cycle-btn ${sortStates[group.id]?.type !== 'none' ? 'active' : ''}`}\n              onClick={(e) => {\n                e.stopPropagation();\n                cycleSortType(group.id);\n              }}\n              title=\"클릭하여 정렬 방식 변경\"\n            >\n              {getSortLabel(group.id)}\n            </button>\n            \n            {group.id === 'unprocessed' && (\n              <button \n                className=\"column-layout-btn\"\n                onClick={cycleColumnCount}\n                title=\"클릭하여 열 레이아웃 변경\"\n              >\n                {getLayoutLabel()}\n              </button>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  // 그룹 아이템 렌더링 함수\n  const renderGroupItems = (group) => {\n    if (group.id === 'unprocessed') {\n      // 미처리 항목은 동적 그리드로 표시\n      const groupedItems = getGroupedItems(group.items);\n      \n      return (\n        <div className=\"unprocessed-items-container\">\n          <div className=\"alphabet-index\">\n            {Object.keys(groupedItems).map(index => (\n              <div \n                key={`alphabet-${index}`} \n                className=\"index-item\"\n                onClick={() => scrollToIndex(index)}\n              >\n                {index}\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"unprocessed-items\" ref={unprocessedItemsRef}>\n            {Object.entries(groupedItems).map(([index, items]) => (\n              <div key={`section-${index}`}>\n                <div className=\"index-header\" id={`index-${index}`}>{index}</div>\n                <div className={`multi-column-grid columns-${columnCount}`}>\n                  {items.map(value => (\n                    <div \n                      key={`${group.id}-${value}`}\n                      className=\"group-item clickable\"\n                      onClick={() => handleItemClick(value, group.id)}\n                    >\n                      {value}\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    } else {\n      // 일반 그룹은 기존 방식대로 표시\n      return (\n        <div className=\"group-items\">\n          {group.items.map(value => (\n            <div \n              key={`${group.id}-${value}`}\n              className={`group-item ${(group.id === 'unprocessed' || group.id !== 'unprocessed') ? 'clickable' : ''}`}\n              onClick={() => handleItemClick(value, group.id)}\n            >\n              {value}\n            </div>\n          ))}\n          {group.items.length === 0 && group.id !== 'unprocessed' && (\n            <div className=\"empty-group-message\">\n              미처리 항목을 클릭하여 이 그룹에 추가하세요\n            </div>\n          )}\n        </div>\n      );\n    }\n  };\n  \n  return (\n    <div className=\"grouping-sheet\">\n      <div className=\"grouping-actions\">\n        <button className=\"add-group-btn\" onClick={addGroup}>\n          <span className=\"btn-icon\">+</span>새 그룹 추가\n        </button>\n        \n        <div className=\"group-tags\">\n          {normalGroups.map(group => (\n            <div \n              key={`tag-${group.id}`}\n              className={`group-tag ${selectedGroupId === group.id ? 'active' : ''}`}\n              onClick={() => selectGroup(group.id)}\n            >\n              {group.name}\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"sheet-container\">\n        {unprocessedGroup && (\n          <div className=\"freeze-column\">\n            {renderGroupHeader(unprocessedGroup)}\n            <div className=\"group-column unprocessed-column\">\n              {renderGroupItems(unprocessedGroup)}\n            </div>\n          </div>\n        )}\n        \n        <div className=\"scrollable-columns\" ref={scrollableRef}>\n          <div className=\"grouping-grid\">\n            {normalGroups.map(group => (\n              <div \n                key={group.id} \n                className=\"group-col fixed-width\"\n                ref={el => columnRefs.current[group.id] = el}\n              >\n                {renderGroupHeader(group)}\n                <div \n                  className={`group-column ${selectedGroupId === group.id ? 'selected-group' : ''}`}\n                >\n                  {renderGroupItems(group)}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupingSheet; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}