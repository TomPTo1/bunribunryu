{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SeparationClassifier = ({\n  data,\n  onReset\n}) => {\n  _s();\n  const [processedData, setProcessedData] = useState(null);\n\n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // First pipeline step: 괄호값 분리 (Bracket Value Separation)\n      const processBracketSeparation = input => {\n        if (typeof input === 'string') {\n          // Extract content within brackets\n          const bracketRegex = /\\[(.*?)\\]|\\((.*?)\\)|\\{(.*?)\\}/g;\n          const matches = [];\n          let match;\n          while ((match = bracketRegex.exec(input)) !== null) {\n            // Find which capture group has the value (depends on bracket type)\n            const value = match[1] || match[2] || match[3];\n            if (value) matches.push(value);\n          }\n          return {\n            original: input,\n            separated: matches,\n            type: 'bracket-separation'\n          };\n        } else if (Array.isArray(input)) {\n          return input.map(item => processBracketSeparation(item));\n        } else if (typeof input === 'object' && input !== null) {\n          const result = {};\n          for (const key in input) {\n            result[key] = processBracketSeparation(input[key]);\n          }\n          return result;\n        }\n\n        // Return unchanged if not a string, array or object\n        return input;\n      };\n\n      // Apply pipeline\n      setProcessedData(processBracketSeparation(data));\n    } else {\n      setProcessedData(null);\n    }\n  }, [data]);\n  const renderProcessedItem = item => {\n    if (item && item.type === 'bracket-separation') {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"processed-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"original-value\",\n          children: [\"\\uC6D0\\uBCF8: \", item.original]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"processed-value\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\uAD04\\uD638\\uAC12 \\uBD84\\uB9AC \\uACB0\\uACFC:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this), item.separated.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"separated-values\",\n            children: item.separated.map((val, idx) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: val\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\uBD84\\uB9AC\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this);\n    } else if (Array.isArray(item)) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-container\",\n        children: item.map((subItem, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"array-item\",\n          children: renderProcessedItem(subItem)\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this);\n    } else if (typeof item === 'object' && item !== null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"object-container\",\n        children: Object.entries(item).map(([key, value]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"object-property\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [key, \":\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 15\n          }, this), renderProcessedItem(value)]\n        }, key, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this);\n    }\n\n    // Fallback for simple values\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: String(item)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"separation-classifier-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uB370\\uC774\\uD130 \\uD30C\\uC774\\uD504\\uB77C\\uC778 \\uCC98\\uB9AC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pipeline-steps\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pipeline-step active\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"step-name\",\n          children: \"\\uAD04\\uD638\\uAC12 \\uBD84\\uB9AC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"processed-data-display\",\n      children: processedData ? renderProcessedItem(processedData) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"reset-button\",\n      onClick: onReset,\n      children: \"\\uCD08\\uAE30\\uD654\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(SeparationClassifier, \"XUpq7l4RDJK2+3AZ1/cM3qhgogg=\");\n_c = SeparationClassifier;\nexport default SeparationClassifier;\nvar _c;\n$RefreshReg$(_c, \"SeparationClassifier\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SeparationClassifier","data","onReset","_s","processedData","setProcessedData","processBracketSeparation","input","bracketRegex","matches","match","exec","value","push","original","separated","type","Array","isArray","map","item","result","key","renderProcessedItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","val","idx","subItem","Object","entries","String","onClick","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst SeparationClassifier = ({ data, onReset }) => {\n  const [processedData, setProcessedData] = useState(null);\n  \n  // Process data through pipeline steps\n  useEffect(() => {\n    if (data) {\n      // First pipeline step: 괄호값 분리 (Bracket Value Separation)\n      const processBracketSeparation = (input) => {\n        if (typeof input === 'string') {\n          // Extract content within brackets\n          const bracketRegex = /\\[(.*?)\\]|\\((.*?)\\)|\\{(.*?)\\}/g;\n          const matches = [];\n          let match;\n          \n          while ((match = bracketRegex.exec(input)) !== null) {\n            // Find which capture group has the value (depends on bracket type)\n            const value = match[1] || match[2] || match[3];\n            if (value) matches.push(value);\n          }\n          \n          return {\n            original: input,\n            separated: matches,\n            type: 'bracket-separation'\n          };\n        } else if (Array.isArray(input)) {\n          return input.map(item => processBracketSeparation(item));\n        } else if (typeof input === 'object' && input !== null) {\n          const result = {};\n          for (const key in input) {\n            result[key] = processBracketSeparation(input[key]);\n          }\n          return result;\n        }\n        \n        // Return unchanged if not a string, array or object\n        return input;\n      };\n      \n      // Apply pipeline\n      setProcessedData(processBracketSeparation(data));\n    } else {\n      setProcessedData(null);\n    }\n  }, [data]);\n\n  const renderProcessedItem = (item) => {\n    if (item && item.type === 'bracket-separation') {\n      return (\n        <div className=\"processed-item\">\n          <div className=\"original-value\">원본: {item.original}</div>\n          <div className=\"processed-value\">\n            <span>괄호값 분리 결과:</span>\n            {item.separated.length > 0 ? (\n              <ul className=\"separated-values\">\n                {item.separated.map((val, idx) => (\n                  <li key={idx}>{val}</li>\n                ))}\n              </ul>\n            ) : (\n              <p>분리된 값 없음</p>\n            )}\n          </div>\n        </div>\n      );\n    } else if (Array.isArray(item)) {\n      return (\n        <div className=\"array-container\">\n          {item.map((subItem, idx) => (\n            <div key={idx} className=\"array-item\">\n              {renderProcessedItem(subItem)}\n            </div>\n          ))}\n        </div>\n      );\n    } else if (typeof item === 'object' && item !== null) {\n      return (\n        <div className=\"object-container\">\n          {Object.entries(item).map(([key, value]) => (\n            <div key={key} className=\"object-property\">\n              <h4>{key}:</h4>\n              {renderProcessedItem(value)}\n            </div>\n          ))}\n        </div>\n      );\n    }\n    \n    // Fallback for simple values\n    return <div>{String(item)}</div>;\n  };\n\n  return (\n    <div className=\"separation-classifier-container\">\n      <h3>데이터 파이프라인 처리</h3>\n      <div className=\"pipeline-steps\">\n        <div className=\"pipeline-step active\">\n          <span className=\"step-name\">괄호값 분리</span>\n        </div>\n        {/* More pipeline steps can be added here later */}\n      </div>\n      \n      <div className=\"processed-data-display\">\n        {processedData ? (\n          renderProcessedItem(processedData)\n        ) : (\n          <p>처리할 데이터가 없습니다</p>\n        )}\n      </div>\n      \n      <button \n        className=\"reset-button\" \n        onClick={onReset}\n      >\n        초기화\n      </button>\n    </div>\n  );\n};\n\nexport default SeparationClassifier; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}