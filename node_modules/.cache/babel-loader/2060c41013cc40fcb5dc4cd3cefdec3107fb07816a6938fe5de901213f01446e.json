{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/HeaderCombinationTextList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { fetchHeaderCombinationTextList } from '../services/api';\nimport './HeaderCombinationTextList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderCombinationTextList = ({\n  channel,\n  selectedCombination,\n  selectedCombinations = []\n}) => {\n  _s();\n  const [combinationTexts, setCombinationTexts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('텍스트조회');\n  const [sectionName, setSectionName] = useState('');\n  // Mining states\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [minSupport, setMinSupport] = useState(0.01);\n  const [minConfidence, setMinConfidence] = useState(0.01);\n  const [maxDepth, setMaxDepth] = useState(100);\n  const [showSettingsPopup, setShowSettingsPopup] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const settingsPopupRef = useRef(null);\n\n  // 실제 사용할 조합 목록 결정 (단일 selectedCombination과 다중 selectedCombinations 지원)\n  const effectiveCombinations = useMemo(() => {\n    // 다중 선택이 있는 경우 우선 사용\n    if (selectedCombinations && selectedCombinations.length > 0) {\n      return selectedCombinations;\n    }\n    // 다중 선택이 없고 단일 선택이 있는 경우\n    if (selectedCombination) {\n      return [selectedCombination];\n    }\n    // 아무것도 선택되지 않은 경우\n    return [];\n  }, [selectedCombination, selectedCombinations]);\n  useEffect(() => {\n    const getCombinationTexts = async () => {\n      if (!channel || effectiveCombinations.length === 0) return;\n      setLoading(true);\n      try {\n        // 모든 선택된 조합을 API에 전달\n        const response = await fetchHeaderCombinationTextList(channel, effectiveCombinations);\n        console.log('Combination texts response:', response);\n        setCombinationTexts(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationTexts([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getCombinationTexts();\n  }, [channel, effectiveCombinations]);\n\n  // Generate FP-growth tree when combination texts change\n  useEffect(() => {\n    if (combinationTexts && combinationTexts.length > 0 && activeTab === '마이닝') {\n      generateFPGrowthTree(combinationTexts);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationTexts, activeTab, minSupport, minConfidence, maxDepth]);\n\n  // Close settings popup when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (settingsPopupRef.current && !settingsPopupRef.current.contains(event.target)) {\n        setShowSettingsPopup(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Function to generate FP-growth tree from text data\n  const generateFPGrowthTree = textData => {\n    if (!textData || textData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions by splitting each text \n    // If text contains '>' delimiter, split by it, otherwise use the whole text as a single item\n    const transactions = textData.filter(item => item.text).map(item => {\n      if (item.text.includes('>')) {\n        return item.text.split('>').map(segment => segment.trim()).filter(segment => segment.length > 0);\n      } else {\n        // If no delimiter, use the whole text as a single item\n        return [item.text.trim()];\n      }\n    }).filter(transaction => transaction.length > 0);\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n\n    // FP-GROWTH for a single hierarchical tree\n    // Step 3: Reorder transactions based on frequency\n    const orderedTransactions = transactions.map(transaction => {\n      return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n    }).filter(transaction => transaction.length > 0);\n\n    // Create a single root node for the most frequent item\n    const rootItem = frequentItems[0];\n    const singleTreeRoot = {\n      id: rootItem,\n      name: rootItem,\n      support: itemCounts[rootItem],\n      confidence: itemCounts[rootItem] / totalTransactions,\n      children: []\n    };\n\n    // Create a mapping of patterns to their support count\n    const patternSupports = {};\n\n    // First pass - gather all pattern supports\n    orderedTransactions.forEach(transaction => {\n      if (transaction.length < 2) return;\n      for (let i = 0; i < transaction.length; i++) {\n        for (let j = i + 1; j < transaction.length; j++) {\n          const pattern = [transaction[i], transaction[j]];\n          const key = pattern.join('-');\n          patternSupports[key] = (patternSupports[key] || 0) + 1;\n        }\n      }\n    });\n\n    // Then build tree with those precomputed pattern supports\n    const buildOrderedFPTree = (currentNode, level) => {\n      if (level >= maxDepth) return;\n      const currentItemIndex = frequentItems.indexOf(currentNode.name);\n      for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n        const nextItem = frequentItems[i];\n\n        // Check if the pair meets minimum support\n        const patternKey = [currentNode.name, nextItem].join('-');\n        const support = patternSupports[patternKey] || 0;\n        if (support >= Math.max(2, minSupportCount)) {\n          const confidence = support / itemCounts[currentNode.name];\n          if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n            const childNode = {\n              id: `${currentNode.id}-${nextItem}`,\n              name: nextItem,\n              support: support,\n              confidence: confidence,\n              children: []\n            };\n            currentNode.children.push(childNode);\n            buildOrderedFPTree(childNode, level + 1);\n          }\n        }\n      }\n\n      // Sort children by support\n      if (currentNode.children.length > 0) {\n        currentNode.children.sort((a, b) => b.support - a.support);\n      }\n    };\n\n    // Start building the tree from the root\n    buildOrderedFPTree(singleTreeRoot, 1);\n\n    // Initialize expanded nodes for visualization - initially expand all nodes\n    const initialExpanded = {};\n\n    // Function to recursively expand all nodes\n    const expandAllNodes = node => {\n      if (!node) return;\n      initialExpanded[node.id] = true;\n      if (node.children && node.children.length > 0) {\n        node.children.forEach(child => expandAllNodes(child));\n      }\n    };\n\n    // Start expanding from the root\n    expandAllNodes(singleTreeRoot);\n\n    // Set the result as a single-item array containing the root\n    setMiningData([singleTreeRoot]);\n    setExpandedNodes(initialExpanded);\n  };\n\n  // Toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Select a node and update section name\n  const handleNodeSelect = node => {\n    const isDeselecting = node === selectedNode;\n    setSelectedNode(isDeselecting ? null : node);\n\n    // 노드 선택 시 섹션명 입력창에 노드 이름 설정\n    if (!isDeselecting) {\n      setSectionName(node.name);\n    }\n  };\n\n  // Toggle all nodes\n  const toggleAllNodes = expand => {\n    if (!miningData || miningData.length === 0) return;\n    const newExpandedState = {};\n    const processNode = node => {\n      if (!node) return;\n      newExpandedState[node.id] = expand;\n      if (node.children && node.children.length > 0) {\n        node.children.forEach(child => processNode(child));\n      }\n    };\n    miningData.forEach(root => processNode(root));\n    setExpandedNodes(newExpandedState);\n  };\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  const handleConfidenceChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n  const handleDepthChange = e => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n  const handleSectionNameChange = e => {\n    setSectionName(e.target.value);\n  };\n\n  // Render tree node with improved display\n  const renderTreeNode = (node, level = 0) => {\n    var _miningData$;\n    if (!node) return null;\n    const isExpanded = expandedNodes[node.id];\n    const hasChildren = node.children && node.children.length > 0;\n    const isSelected = selectedNode && selectedNode.id === node.id;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `itemset-node ${isSelected ? 'selected' : ''}`,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemset-header\",\n        onClick: () => handleNodeSelect(node),\n        title: `노드 선택 - 섹션명으로 설정: ${node.name}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-prefix\",\n          style: {\n            width: `${level * 20}px`\n          },\n          children: hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"toggle-btn\",\n            onClick: e => {\n              e.stopPropagation();\n              toggleNode(node.id);\n            },\n            title: isExpanded ? \"노드 접기\" : \"노드 펼치기\",\n            children: isExpanded ? '▼' : '►'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-name\",\n            title: node.name,\n            children: node.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-metrics\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-badge support\",\n              title: `지지도: ${Math.round(node.support)} (${(node.support / ((miningData === null || miningData === void 0 ? void 0 : (_miningData$ = miningData[0]) === null || _miningData$ === void 0 ? void 0 : _miningData$.support) || 1) * 100).toFixed(1)}%)`,\n              children: [\"\\uC9C0\\uC9C0\\uB3C4: \", Math.round(node.support)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"metric-badge confidence\",\n              title: `신뢰도: ${(node.confidence * 100).toFixed(1)}%`,\n              children: [\"\\uC2E0\\uB8B0\\uB3C4: \", (node.confidence * 100).toFixed(1), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 329,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), isExpanded && hasChildren && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"itemset-children\",\n        children: node.children.map(child => renderTreeNode(child, level + 1))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this)]\n    }, node.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render settings popup\n  const renderSettingsPopup = () => {\n    if (!showSettingsPopup) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"settings-popup-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"settings-popup\",\n        ref: settingsPopupRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-popup-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"\\uB9C8\\uC774\\uB2DD \\uC124\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"close-popup-btn\",\n            onClick: () => setShowSettingsPopup(false),\n            children: \"\\u2715\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-popup-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"setting-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0.01\",\n              max: \"1\",\n              step: \"0.01\",\n              value: minSupport,\n              onChange: handleSupportChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"setting-description\",\n              children: \"\\uC804\\uCCB4 \\uAC70\\uB798 \\uC911 \\uD574\\uB2F9 \\uD328\\uD134\\uC774 \\uB098\\uD0C0\\uB098\\uB294 \\uBE44\\uC728 (0.01 ~ 1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 372,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"setting-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\uCD5C\\uC18C \\uC2E0\\uB8B0\\uB3C4:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"0.01\",\n              max: \"1\",\n              step: \"0.01\",\n              value: minConfidence,\n              onChange: handleConfidenceChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"setting-description\",\n              children: \"\\uC120\\uD589 \\uD56D\\uBAA9\\uC774 \\uC788\\uC744 \\uB54C \\uACB0\\uACFC \\uD56D\\uBAA9\\uC774 \\uB098\\uD0C0\\uB0A0 \\uD655\\uB960 (0.01 ~ 1)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 386,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"setting-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"\\uCD5C\\uB300 \\uAE4A\\uC774:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 391,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              min: \"1\",\n              max: \"100\",\n              step: \"1\",\n              value: maxDepth,\n              onChange: handleDepthChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"setting-description\",\n              children: \"\\uD328\\uD134\\uC758 \\uCD5C\\uB300 \\uAE38\\uC774 \\uC124\\uC815 (1 ~ 100)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 390,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"settings-popup-footer\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"apply-settings-btn\",\n            onClick: () => setShowSettingsPopup(false),\n            children: \"\\uC801\\uC6A9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 406,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render mining view\n  const renderMiningView = () => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-content-inner\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mining-header-title\",\n            children: \"FP-Growth \\uD328\\uD134 \\uBD84\\uC11D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 424,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mining-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"create-section-btn small-btn\",\n              onClick: () => setShowSettingsPopup(true),\n              title: \"\\uB9C8\\uC774\\uB2DD \\uC124\\uC815 \\uBCC0\\uACBD\",\n              children: \"\\uC124\\uC815\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-btn\",\n              onClick: () => toggleAllNodes(true),\n              title: \"\\uBAA8\\uB4E0 \\uB178\\uB4DC \\uD3BC\\uCE58\\uAE30\",\n              children: \"\\u25BC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 433,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"action-btn\",\n              onClick: () => toggleAllNodes(false),\n              title: \"\\uBAA8\\uB4E0 \\uB178\\uB4DC \\uC811\\uAE30\",\n              children: \"\\u25B2\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 440,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 423,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mining-content\",\n          children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading\",\n            children: \"\\uB85C\\uB529 \\uC911...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error\",\n            children: [\"\\uC5D0\\uB7EC: \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 15\n          }, this) : miningData && miningData.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"itemset-tree-container\",\n            children: miningData.map(root => renderTreeNode(root))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 456,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column-empty\",\n            children: \"\\uB9C8\\uC774\\uB2DD \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this), renderSettingsPopup()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 7\n    }, this);\n  };\n  const handleCreateSection = () => {\n    if (!sectionName.trim()) {\n      alert('섹션명을 입력해주세요.');\n      return;\n    }\n\n    // 여기에 섹션 생성 로직을 추가합니다\n    console.log('섹션 생성:', sectionName, '조합:', effectiveCombinations);\n    // TODO: API 호출 및 성공 후 처리\n    alert(`\"${sectionName}\" 섹션이 생성되었습니다.`);\n    setSectionName('');\n  };\n  if (!channel || effectiveCombinations.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uCC44\\uB110\\uACFC \\uD5E4\\uB354 \\uC870\\uD569\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }, this);\n  }\n  const renderSectionCreationArea = () => {\n    // Count of selected combinations\n    const selectedCount = effectiveCombinations.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-creation-area\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-creation-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-creation-title\",\n          children: \"\\uC139\\uC158 \\uC0DD\\uC131 \\uC601\\uC5ED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"selected-combination-count\",\n          children: [\"\\uC120\\uD0DD\\uB41C \\uC870\\uD569: \", selectedCount, \"\\uAC1C\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section-creation-form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"section-input-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"section-name\",\n            children: \"\\uC139\\uC158\\uBA85:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"section-name\",\n            value: sectionName,\n            onChange: handleSectionNameChange,\n            placeholder: \"\\uC0C8 \\uC139\\uC158 \\uC774\\uB984\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n            className: \"section-name-input\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"create-section-btn\",\n            onClick: handleCreateSection,\n            disabled: !sectionName.trim(),\n            children: \"\\uC139\\uC158 \\uB4F1\\uB85D\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 511,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"column-title\",\n      children: \"\\uC139\\uC158 \\uC0DD\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), renderSectionCreationArea(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-content\",\n      children: activeTab === '텍스트조회' ? loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 13\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 13\n      }, this) : combinationTexts && combinationTexts.length > 0 ? combinationTexts.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-text\",\n          children: item.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 542,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item-count\",\n          children: [\"(\", item.count, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 543,\n          columnNumber: 17\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uD5E4\\uB354 \\uC870\\uD569 \\uD14D\\uC2A4\\uD2B8 \\uC815\\uBCF4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 13\n      }, this) : renderMiningView()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tabs\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === '마이닝' ? 'active' : ''}`,\n        onClick: () => setActiveTab('마이닝'),\n        children: \"\\uB9C8\\uC774\\uB2DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `tab ${activeTab === '텍스트조회' ? 'active' : ''}`,\n        onClick: () => setActiveTab('텍스트조회'),\n        children: \"\\uD14D\\uC2A4\\uD2B8\\uC870\\uD68C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 554,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderCombinationTextList, \"wCRlWx5iVKBLENiS05GW2n9LRT8=\");\n_c = HeaderCombinationTextList;\nexport default HeaderCombinationTextList;\nvar _c;\n$RefreshReg$(_c, \"HeaderCombinationTextList\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","useRef","fetchHeaderCombinationTextList","jsxDEV","_jsxDEV","HeaderCombinationTextList","channel","selectedCombination","selectedCombinations","_s","combinationTexts","setCombinationTexts","loading","setLoading","error","setError","activeTab","setActiveTab","sectionName","setSectionName","miningData","setMiningData","expandedNodes","setExpandedNodes","minSupport","setMinSupport","minConfidence","setMinConfidence","maxDepth","setMaxDepth","showSettingsPopup","setShowSettingsPopup","selectedNode","setSelectedNode","settingsPopupRef","effectiveCombinations","length","getCombinationTexts","response","console","log","list","err","message","generateFPGrowthTree","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","textData","transactions","filter","item","text","map","includes","split","segment","trim","transaction","itemCounts","totalTransactions","forEach","minSupportCount","Math","max","floor","frequentItems","Object","keys","sort","a","b","orderedTransactions","rootItem","singleTreeRoot","id","name","support","confidence","children","patternSupports","i","j","pattern","key","join","buildOrderedFPTree","currentNode","level","currentItemIndex","indexOf","nextItem","patternKey","childNode","push","initialExpanded","expandAllNodes","node","child","toggleNode","nodeId","prev","handleNodeSelect","isDeselecting","toggleAllNodes","expand","newExpandedState","processNode","root","handleSupportChange","e","value","parseFloat","isNaN","handleConfidenceChange","handleDepthChange","parseInt","handleSectionNameChange","renderTreeNode","_miningData$","isExpanded","hasChildren","isSelected","className","onClick","title","style","width","stopPropagation","fileName","_jsxFileName","lineNumber","columnNumber","round","toFixed","renderSettingsPopup","ref","type","min","step","onChange","renderMiningView","handleCreateSection","alert","renderSectionCreationArea","selectedCount","htmlFor","placeholder","disabled","index","count","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/HeaderCombinationTextList.js"],"sourcesContent":["import React, { useState, useEffect, useMemo, useRef } from 'react';\nimport { fetchHeaderCombinationTextList } from '../services/api';\nimport './HeaderCombinationTextList.css';\n\nconst HeaderCombinationTextList = ({ channel, selectedCombination, selectedCombinations = [] }) => {\n  const [combinationTexts, setCombinationTexts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState('텍스트조회');\n  const [sectionName, setSectionName] = useState('');\n  // Mining states\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [minSupport, setMinSupport] = useState(0.01);\n  const [minConfidence, setMinConfidence] = useState(0.01);\n  const [maxDepth, setMaxDepth] = useState(100);\n  const [showSettingsPopup, setShowSettingsPopup] = useState(false);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const settingsPopupRef = useRef(null);\n\n  // 실제 사용할 조합 목록 결정 (단일 selectedCombination과 다중 selectedCombinations 지원)\n  const effectiveCombinations = useMemo(() => {\n    // 다중 선택이 있는 경우 우선 사용\n    if (selectedCombinations && selectedCombinations.length > 0) {\n      return selectedCombinations;\n    }\n    // 다중 선택이 없고 단일 선택이 있는 경우\n    if (selectedCombination) {\n      return [selectedCombination];\n    }\n    // 아무것도 선택되지 않은 경우\n    return [];\n  }, [selectedCombination, selectedCombinations]);\n\n  useEffect(() => {\n    const getCombinationTexts = async () => {\n      if (!channel || effectiveCombinations.length === 0) return;\n      \n      setLoading(true);\n      try {\n        // 모든 선택된 조합을 API에 전달\n        const response = await fetchHeaderCombinationTextList(channel, effectiveCombinations);\n        console.log('Combination texts response:', response);\n        setCombinationTexts(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setCombinationTexts([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getCombinationTexts();\n  }, [channel, effectiveCombinations]);\n\n  // Generate FP-growth tree when combination texts change\n  useEffect(() => {\n    if (combinationTexts && combinationTexts.length > 0 && activeTab === '마이닝') {\n      generateFPGrowthTree(combinationTexts);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationTexts, activeTab, minSupport, minConfidence, maxDepth]);\n\n  // Close settings popup when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (settingsPopupRef.current && !settingsPopupRef.current.contains(event.target)) {\n        setShowSettingsPopup(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // Function to generate FP-growth tree from text data\n  const generateFPGrowthTree = (textData) => {\n    if (!textData || textData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions by splitting each text \n    // If text contains '>' delimiter, split by it, otherwise use the whole text as a single item\n    const transactions = textData\n      .filter(item => item.text)\n      .map(item => {\n        if (item.text.includes('>')) {\n          return item.text\n            .split('>')\n            .map(segment => segment.trim())\n            .filter(segment => segment.length > 0);\n        } else {\n          // If no delimiter, use the whole text as a single item\n          return [item.text.trim()];\n        }\n      })\n      .filter(transaction => transaction.length > 0);\n\n    // Step 2: Count item frequencies\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    \n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    \n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n    \n    // FP-GROWTH for a single hierarchical tree\n    // Step 3: Reorder transactions based on frequency\n    const orderedTransactions = transactions.map(transaction => {\n      return transaction\n        .filter(item => frequentItems.includes(item))\n        .sort((a, b) => itemCounts[b] - itemCounts[a]);\n    }).filter(transaction => transaction.length > 0);\n    \n    // Create a single root node for the most frequent item\n    const rootItem = frequentItems[0];\n    \n    const singleTreeRoot = {\n      id: rootItem,\n      name: rootItem,\n      support: itemCounts[rootItem],\n      confidence: itemCounts[rootItem] / totalTransactions,\n      children: []\n    };\n    \n    // Create a mapping of patterns to their support count\n    const patternSupports = {};\n    \n    // First pass - gather all pattern supports\n    orderedTransactions.forEach(transaction => {\n      if (transaction.length < 2) return;\n      \n      for (let i = 0; i < transaction.length; i++) {\n        for (let j = i + 1; j < transaction.length; j++) {\n          const pattern = [transaction[i], transaction[j]];\n          const key = pattern.join('-');\n          patternSupports[key] = (patternSupports[key] || 0) + 1;\n        }\n      }\n    });\n    \n    // Then build tree with those precomputed pattern supports\n    const buildOrderedFPTree = (currentNode, level) => {\n      if (level >= maxDepth) return;\n      \n      const currentItemIndex = frequentItems.indexOf(currentNode.name);\n      \n      for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n        const nextItem = frequentItems[i];\n        \n        // Check if the pair meets minimum support\n        const patternKey = [currentNode.name, nextItem].join('-');\n        const support = patternSupports[patternKey] || 0;\n        \n        if (support >= Math.max(2, minSupportCount)) {\n          const confidence = support / itemCounts[currentNode.name];\n          \n          if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n            const childNode = {\n              id: `${currentNode.id}-${nextItem}`,\n              name: nextItem,\n              support: support,\n              confidence: confidence,\n              children: []\n            };\n            \n            currentNode.children.push(childNode);\n            buildOrderedFPTree(childNode, level + 1);\n          }\n        }\n      }\n      \n      // Sort children by support\n      if (currentNode.children.length > 0) {\n        currentNode.children.sort((a, b) => b.support - a.support);\n      }\n    };\n    \n    // Start building the tree from the root\n    buildOrderedFPTree(singleTreeRoot, 1);\n    \n    // Initialize expanded nodes for visualization - initially expand all nodes\n    const initialExpanded = {};\n    \n    // Function to recursively expand all nodes\n    const expandAllNodes = (node) => {\n      if (!node) return;\n      \n      initialExpanded[node.id] = true;\n      \n      if (node.children && node.children.length > 0) {\n        node.children.forEach(child => expandAllNodes(child));\n      }\n    };\n    \n    // Start expanding from the root\n    expandAllNodes(singleTreeRoot);\n    \n    // Set the result as a single-item array containing the root\n    setMiningData([singleTreeRoot]);\n    setExpandedNodes(initialExpanded);\n  };\n\n  // Toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  // Select a node and update section name\n  const handleNodeSelect = (node) => {\n    const isDeselecting = node === selectedNode;\n    setSelectedNode(isDeselecting ? null : node);\n    \n    // 노드 선택 시 섹션명 입력창에 노드 이름 설정\n    if (!isDeselecting) {\n      setSectionName(node.name);\n    }\n  };\n\n  // Toggle all nodes\n  const toggleAllNodes = (expand) => {\n    if (!miningData || miningData.length === 0) return;\n    \n    const newExpandedState = {};\n    \n    const processNode = (node) => {\n      if (!node) return;\n      \n      newExpandedState[node.id] = expand;\n      \n      if (node.children && node.children.length > 0) {\n        node.children.forEach(child => processNode(child));\n      }\n    };\n    \n    miningData.forEach(root => processNode(root));\n    setExpandedNodes(newExpandedState);\n  };\n\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  const handleConfidenceChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value >= 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n\n  const handleDepthChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  const handleSectionNameChange = (e) => {\n    setSectionName(e.target.value);\n  };\n\n  // Render tree node with improved display\n  const renderTreeNode = (node, level = 0) => {\n    if (!node) return null;\n    \n    const isExpanded = expandedNodes[node.id];\n    const hasChildren = node.children && node.children.length > 0;\n    const isSelected = selectedNode && selectedNode.id === node.id;\n    \n    return (\n      <div \n        className={`itemset-node ${isSelected ? 'selected' : ''}`} \n        key={node.id}\n      >\n        <div \n          className=\"itemset-header\" \n          onClick={() => handleNodeSelect(node)}\n          title={`노드 선택 - 섹션명으로 설정: ${node.name}`}\n        >\n          <div className=\"node-prefix\" style={{ width: `${level * 20}px` }}>\n            {hasChildren && (\n              <button \n                className=\"toggle-btn\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  toggleNode(node.id);\n                }}\n                title={isExpanded ? \"노드 접기\" : \"노드 펼치기\"}\n              >\n                {isExpanded ? '▼' : '►'}\n              </button>\n            )}\n          </div>\n          <div className=\"node-content\">\n            <div className=\"node-name\" title={node.name}>\n              {node.name}\n            </div>\n            <div className=\"node-metrics\">\n              <span className=\"metric-badge support\" title={`지지도: ${Math.round(node.support)} (${(node.support / (miningData?.[0]?.support || 1) * 100).toFixed(1)}%)`}>\n                지지도: {Math.round(node.support)}\n              </span>\n              <span className=\"metric-badge confidence\" title={`신뢰도: ${(node.confidence * 100).toFixed(1)}%`}>\n                신뢰도: {(node.confidence * 100).toFixed(1)}%\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        {isExpanded && hasChildren && (\n          <div className=\"itemset-children\">\n            {node.children.map(child => renderTreeNode(child, level + 1))}\n          </div>\n        )}\n      </div>\n    );\n  };\n\n  // Render settings popup\n  const renderSettingsPopup = () => {\n    if (!showSettingsPopup) return null;\n    \n    return (\n      <div className=\"settings-popup-overlay\">\n        <div className=\"settings-popup\" ref={settingsPopupRef}>\n          <div className=\"settings-popup-header\">\n            <h3>마이닝 설정</h3>\n            <button \n              className=\"close-popup-btn\"\n              onClick={() => setShowSettingsPopup(false)}\n            >\n              ✕\n            </button>\n          </div>\n          <div className=\"settings-popup-content\">\n            <div className=\"setting-group\">\n              <label>최소 지지도:</label>\n              <input \n                type=\"number\" \n                min=\"0.01\" \n                max=\"1\" \n                step=\"0.01\" \n                value={minSupport} \n                onChange={handleSupportChange}\n              />\n              <span className=\"setting-description\">\n                전체 거래 중 해당 패턴이 나타나는 비율 (0.01 ~ 1)\n              </span>\n            </div>\n            <div className=\"setting-group\">\n              <label>최소 신뢰도:</label>\n              <input \n                type=\"number\" \n                min=\"0.01\" \n                max=\"1\" \n                step=\"0.01\" \n                value={minConfidence} \n                onChange={handleConfidenceChange}\n              />\n              <span className=\"setting-description\">\n                선행 항목이 있을 때 결과 항목이 나타날 확률 (0.01 ~ 1)\n              </span>\n            </div>\n            <div className=\"setting-group\">\n              <label>최대 깊이:</label>\n              <input \n                type=\"number\" \n                min=\"1\" \n                max=\"100\" \n                step=\"1\" \n                value={maxDepth} \n                onChange={handleDepthChange}\n              />\n              <span className=\"setting-description\">\n                패턴의 최대 길이 설정 (1 ~ 100)\n              </span>\n            </div>\n          </div>\n          <div className=\"settings-popup-footer\">\n            <button \n              className=\"apply-settings-btn\"\n              onClick={() => setShowSettingsPopup(false)}\n            >\n              적용\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render mining view\n  const renderMiningView = () => {\n    return (\n      <div className=\"column-content-inner\">\n        <div className=\"mining-container\">\n          <div className=\"mining-header\">\n            <div className=\"mining-header-title\">FP-Growth 패턴 분석</div>\n            <div className=\"mining-actions\">\n              <button \n                className=\"create-section-btn small-btn\"\n                onClick={() => setShowSettingsPopup(true)}\n                title=\"마이닝 설정 변경\"\n              >\n                설정\n              </button>\n              <button\n                className=\"action-btn\"\n                onClick={() => toggleAllNodes(true)}\n                title=\"모든 노드 펼치기\"\n              >\n                ▼\n              </button>\n              <button\n                className=\"action-btn\"\n                onClick={() => toggleAllNodes(false)}\n                title=\"모든 노드 접기\"\n              >\n                ▲\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"mining-content\">\n            {loading ? (\n              <div className=\"loading\">로딩 중...</div>\n            ) : error ? (\n              <div className=\"error\">에러: {error}</div>\n            ) : miningData && miningData.length > 0 ? (\n              <div className=\"itemset-tree-container\">\n                {miningData.map(root => renderTreeNode(root))}\n              </div>\n            ) : (\n              <div className=\"column-empty\">마이닝 데이터가 없습니다.</div>\n            )}\n          </div>\n        </div>\n        {renderSettingsPopup()}\n      </div>\n    );\n  };\n\n  const handleCreateSection = () => {\n    if (!sectionName.trim()) {\n      alert('섹션명을 입력해주세요.');\n      return;\n    }\n    \n    // 여기에 섹션 생성 로직을 추가합니다\n    console.log('섹션 생성:', sectionName, '조합:', effectiveCombinations);\n    // TODO: API 호출 및 성공 후 처리\n    alert(`\"${sectionName}\" 섹션이 생성되었습니다.`);\n    setSectionName('');\n  };\n\n  if (!channel || effectiveCombinations.length === 0) {\n    return (\n      <div className=\"column-container\">\n        <div className=\"column-empty\">채널과 헤더 조합을 선택해주세요.</div>\n      </div>\n    );\n  }\n\n  const renderSectionCreationArea = () => {\n    // Count of selected combinations\n    const selectedCount = effectiveCombinations.length;\n    \n    return (\n      <div className=\"section-creation-area\">\n        <div className=\"section-creation-header\">\n          <div className=\"section-creation-title\">섹션 생성 영역</div>\n          <div className=\"selected-combination-count\">선택된 조합: {selectedCount}개</div>\n        </div>\n        <div className=\"section-creation-form\">\n          <div className=\"section-input-group\">\n            <label htmlFor=\"section-name\">섹션명:</label>\n            <input \n              type=\"text\" \n              id=\"section-name\" \n              value={sectionName}\n              onChange={handleSectionNameChange}\n              placeholder=\"새 섹션 이름을 입력하세요\"\n              className=\"section-name-input\"\n            />\n            <button \n              className=\"create-section-btn\"\n              onClick={handleCreateSection}\n              disabled={!sectionName.trim()}\n            >\n              섹션 등록\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"column-container\">\n      <h2 className=\"column-title\">섹션 생성</h2>\n      \n      {renderSectionCreationArea()}\n      \n      <div className=\"column-content\">\n        {activeTab === '텍스트조회' ? (\n          loading ? (\n            <div className=\"loading\">로딩 중...</div>\n          ) : error ? (\n            <div className=\"error\">에러: {error}</div>\n          ) : combinationTexts && combinationTexts.length > 0 ? (\n            combinationTexts.map((item, index) => (\n              <div\n                key={index}\n                className=\"column-item\"\n              >\n                <div className=\"item-text\">{item.text}</div>\n                <div className=\"item-count\">({item.count})</div>\n              </div>\n            ))\n          ) : (\n            <div className=\"column-empty\">헤더 조합 텍스트 정보가 없습니다.</div>\n          )\n        ) : (\n          renderMiningView()\n        )}\n      </div>\n      \n      <div className=\"tabs\">\n        <button \n          className={`tab ${activeTab === '마이닝' ? 'active' : ''}`}\n          onClick={() => setActiveTab('마이닝')}\n        >\n          마이닝\n        </button>\n        <button \n          className={`tab ${activeTab === '텍스트조회' ? 'active' : ''}`}\n          onClick={() => setActiveTab('텍스트조회')}\n        >\n          텍스트조회\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderCombinationTextList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}