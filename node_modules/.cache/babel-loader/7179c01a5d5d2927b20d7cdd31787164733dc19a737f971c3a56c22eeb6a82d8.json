{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/HeaderList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchHeaderList } from '../services/api';\nimport Column from './Column';\nimport './Column.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HeaderList = ({\n  channel,\n  onHeaderSelect,\n  selectedHeader,\n  similarityGroups\n}) => {\n  _s();\n  const [headers, setHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const getHeaders = async () => {\n      if (!channel) return;\n      setLoading(true);\n      try {\n        const response = await fetchHeaderList(channel);\n        console.log('Header list response:', response);\n        setHeaders(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setHeaders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    getHeaders();\n  }, [channel]);\n\n  // 유사군에 포함된 모든 헤더 추출\n  const groupedHeaders = similarityGroups && similarityGroups.length > 0 ? similarityGroups.flatMap(group => group.items.map(item => item.header)) : [];\n\n  // 유사군에 속하지 않은 헤더만 필터링\n  const filteredHeaders = headers.filter(item => !groupedHeaders.includes(item.header));\n  if (!channel) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uCC44\\uB110\\uC744 \\uC120\\uD0DD\\uD574\\uC8FC\\uC138\\uC694.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"column-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"column-title\",\n      children: [\"\\uD5E4\\uB354 \\uBAA9\\uB85D: \", channel, similarityGroups && similarityGroups.length > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"similarity-badge\",\n        children: similarityGroups.length\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-content\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: [\"\\uC5D0\\uB7EC: \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : filteredHeaders.length > 0 ? filteredHeaders.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `column-item ${selectedHeader === item.header ? 'selected' : ''}`,\n        onClick: () => onHeaderSelect(item.header),\n        children: item.header\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"column-empty\",\n        children: \"\\uD5E4\\uB354 \\uC815\\uBCF4\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(HeaderList, \"D3Yao2wsxtQMHD+hQw6SGkJ9P5g=\");\n_c = HeaderList;\nexport default HeaderList;\nvar _c;\n$RefreshReg$(_c, \"HeaderList\");","map":{"version":3,"names":["React","useState","useEffect","fetchHeaderList","Column","jsxDEV","_jsxDEV","HeaderList","channel","onHeaderSelect","selectedHeader","similarityGroups","_s","headers","setHeaders","loading","setLoading","error","setError","getHeaders","response","console","log","list","err","message","groupedHeaders","length","flatMap","group","items","map","item","header","filteredHeaders","filter","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","onClick","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/HeaderList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchHeaderList } from '../services/api';\nimport Column from './Column';\nimport './Column.css';\n\nconst HeaderList = ({ channel, onHeaderSelect, selectedHeader, similarityGroups }) => {\n  const [headers, setHeaders] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const getHeaders = async () => {\n      if (!channel) return;\n      \n      setLoading(true);\n      try {\n        const response = await fetchHeaderList(channel);\n        console.log('Header list response:', response);\n        setHeaders(response.list || []);\n        setError(null);\n      } catch (err) {\n        setError(err.message);\n        setHeaders([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getHeaders();\n  }, [channel]);\n\n  // 유사군에 포함된 모든 헤더 추출\n  const groupedHeaders = similarityGroups && similarityGroups.length > 0\n    ? similarityGroups.flatMap(group => group.items.map(item => item.header))\n    : [];\n\n  // 유사군에 속하지 않은 헤더만 필터링\n  const filteredHeaders = headers.filter(item => !groupedHeaders.includes(item.header));\n\n  if (!channel) {\n    return (\n      <div className=\"column-container\">\n        <div className=\"column-empty\">채널을 선택해주세요.</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"column-container\">\n      <h2 className=\"column-title\">\n        헤더 목록: {channel}\n        {similarityGroups && similarityGroups.length > 0 && (\n          <span className=\"similarity-badge\">{similarityGroups.length}</span>\n        )}\n      </h2>\n      <div className=\"column-content\">\n        {loading ? (\n          <div className=\"loading\">로딩 중...</div>\n        ) : error ? (\n          <div className=\"error\">에러: {error}</div>\n        ) : filteredHeaders.length > 0 ? (\n          filteredHeaders.map((item, index) => (\n            <div\n              key={index}\n              className={`column-item ${selectedHeader === item.header ? 'selected' : ''}`}\n              onClick={() => onHeaderSelect(item.header)}\n            >\n              {item.header}\n            </div>\n          ))\n        ) : (\n          <div className=\"column-empty\">헤더 정보가 없습니다.</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default HeaderList; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}