{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\";\nimport React from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData\n}) => {\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key) => {\n    const className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      className: className,\n      children: typeof value === 'string' ? value : value.value\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the data in a columnar format for substring grouping\n  const renderSubstringGrouping = row => {\n    if (!row.groups || !row.substrings) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uADF8\\uB8F9\\uD654\\uB41C \\uB370\\uC774\\uD130 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-columns\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"columns-container\",\n        children: row.substrings.map((item, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"column\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"substring-name\",\n              children: item.substring\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"substring-count\",\n              children: [\"(\", item.count, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"column-values\",\n            children: [row.groups[item.substring] && row.groups[item.substring].map((value, valueIdx) => /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"value-tag\",\n              children: value\n            }, valueIdx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this)), (!row.groups[item.substring] || row.groups[item.substring].length === 0) && /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"no-values\",\n              children: \"\\uAC12 \\uC5C6\\uC74C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)]\n        }, idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // For substring grouping, show columnar format\n    if (row.type === 'substring-grouping') {\n      return renderSubstringGrouping(row);\n    }\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-tag bracket-source\",\n          children: match.value\n        }, `proc-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    } else if (row.type === 'delimiter-separation') {\n      // For delimiter separation, we should preserve bracket positions from previous step\n      const elements = [];\n\n      // First, separate out the bracket parts (they have position info)\n      const bracketParts = row.separated.filter(part => part.source === 'bracket' && part.bracketInfo).sort((a, b) => a.bracketInfo.startIndex - b.bracketInfo.startIndex);\n\n      // Non-bracket parts go in between or around bracket parts\n      const otherParts = row.separated.filter(part => part.source !== 'bracket');\n\n      // Use a simple approach: put brackets in their exact positions, other parts elsewhere\n      let lastEnd = 0;\n      let otherIndex = 0;\n\n      // First, place any non-bracket parts that come before the first bracket\n      if (bracketParts.length > 0) {\n        const firstBracketStart = bracketParts[0].bracketInfo.startIndex;\n\n        // Add some non-bracket parts at the beginning if there's space\n        const beforeBracketText = original.substring(0, firstBracketStart).trim();\n        if (beforeBracketText.length > 0) {\n          // Look for matching non-bracket parts to put here\n          let foundMatchingPart = false;\n\n          // Try to find a matching part\n          for (let i = 0; i < otherParts.length; i++) {\n            const part = otherParts[i];\n            if (beforeBracketText.includes(part.value)) {\n              elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                children: part.value\n              }, `other-${otherIndex}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 17\n              }, this));\n              otherIndex++;\n              otherParts.splice(i, 1); // Remove this part\n              foundMatchingPart = true;\n              i--; // Adjust index for removed item\n            }\n          }\n\n          // If no matching part found, show as unprocessed\n          if (!foundMatchingPart) {\n            elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unprocessed-tag\",\n              children: beforeBracketText\n            }, `unproc-start`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      }\n\n      // Place bracket parts in their exact positions\n      bracketParts.forEach((bracketPart, idx) => {\n        const bracketInfo = bracketPart.bracketInfo;\n\n        // Add the bracket content\n        elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"value-tag bracket-source\",\n          children: bracketPart.value\n        }, `bracket-${idx}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this));\n\n        // Update the last position\n        lastEnd = bracketInfo.endIndex;\n\n        // If there's another bracket coming, check if we can fit other parts in between\n        if (idx < bracketParts.length - 1) {\n          const nextBracketStart = bracketParts[idx + 1].bracketInfo.startIndex;\n\n          // If there's space between brackets, add some non-bracket parts\n          if (nextBracketStart > lastEnd) {\n            const betweenText = original.substring(lastEnd, nextBracketStart).trim();\n            if (betweenText.length > 0) {\n              // Try to find matching parts for this space\n              let foundMatchingPart = false;\n\n              // Look for parts that might fit here\n              for (let i = 0; i < otherParts.length && i < 2; i++) {\n                // Limit to 2 parts\n                const part = otherParts[i];\n                if (betweenText.includes(part.value)) {\n                  elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: `value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                    children: part.value\n                  }, `between-${idx}-${i}`, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 210,\n                    columnNumber: 21\n                  }, this));\n                  otherParts.splice(i, 1); // Remove this part\n                  foundMatchingPart = true;\n                  i--; // Adjust index for removed item\n                }\n              }\n\n              // If no matching part found, show as unprocessed\n              if (!foundMatchingPart) {\n                elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"unprocessed-tag\",\n                  children: betweenText\n                }, `unproc-${idx}`, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 223,\n                  columnNumber: 19\n                }, this));\n              }\n            }\n          }\n        }\n      });\n\n      // Add any text after the last bracket\n      if (lastEnd < original.length) {\n        const afterText = original.substring(lastEnd).trim();\n        if (afterText.length > 0) {\n          // Try to place remaining non-bracket parts\n          if (otherParts.length > 0) {\n            // Add remaining other parts\n            otherParts.forEach((part, idx) => {\n              elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n                className: `value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n                children: part.value\n              }, `remaining-${idx}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 17\n              }, this));\n            });\n          } else {\n            // No parts left, show as unprocessed\n            elements.push(/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"unprocessed-tag\",\n              children: afterText\n            }, \"unproc-end\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 15\n            }, this));\n          }\n        }\n      }\n      return elements.length > 0 ? elements : renderSeparatedValues(row);\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row);\n  };\n  const renderSeparatedValues = row => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"value-tag\",\n        children: val\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n      className: `value-tag ${item.source === 'bracket' ? 'bracket-source' : item.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n      children: typeof item === 'string' ? item : item.value\n    }, idx, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: processedData && processedData.type === 'substring-grouping' ?\n    /*#__PURE__*/\n    // For top-level substring grouping, render directly\n    _jsxDEV(\"div\", {\n      className: \"table-view horizontal-scroll\",\n      children: renderSubstringGrouping(processedData)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // For other data types or nested data, use the flattened row approach\n    _jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            className: row.type === 'substring-grouping' ? 'enhanced-view horizontal-scroll' : 'enhanced-view',\n            children: renderEnhancedView(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","includes","cleanDuplicatedText","renderTag","value","source","key","renderSubstringGrouping","row","groups","substrings","map","item","idx","count","valueIdx","renderEnhancedView","type","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","unprocessedText","push","endIndex","elements","bracketParts","filter","part","bracketInfo","otherParts","lastEnd","otherIndex","firstBracketStart","beforeBracketText","trim","foundMatchingPart","i","splice","bracketPart","nextBracketStart","betweenText","afterText","Array","isArray","every","v","val","index","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData }) => {\n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key) => {\n    const className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    return (\n      <span key={key} className={className}>\n        {typeof value === 'string' ? value : value.value}\n      </span>\n    );\n  };\n\n  // Render the data in a columnar format for substring grouping\n  const renderSubstringGrouping = (row) => {\n    if (!row.groups || !row.substrings) {\n      return <span className=\"no-values\">그룹화된 데이터 없음</span>;\n    }\n\n    return (\n      <div className=\"substring-columns\">\n        <div className=\"columns-container\">\n          {row.substrings.map((item, idx) => (\n            <div key={idx} className=\"column\">\n              <div className=\"column-header\">\n                <span className=\"substring-name\">{item.substring}</span>\n                <span className=\"substring-count\">({item.count})</span>\n              </div>\n              <div className=\"column-values\">\n                {row.groups[item.substring] && row.groups[item.substring].map((value, valueIdx) => (\n                  <span key={valueIdx} className=\"value-tag\">\n                    {value}\n                  </span>\n                ))}\n                {(!row.groups[item.substring] || row.groups[item.substring].length === 0) && (\n                  <span className=\"no-values\">값 없음</span>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // For substring grouping, show columnar format\n    if (row.type === 'substring-grouping') {\n      return renderSubstringGrouping(row);\n    }\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          <span key={`proc-${idx}`} className=\"value-tag bracket-source\">{match.value}</span>\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    } else if (row.type === 'delimiter-separation') {\n      // For delimiter separation, we should preserve bracket positions from previous step\n      const elements = [];\n      \n      // First, separate out the bracket parts (they have position info)\n      const bracketParts = row.separated\n        .filter(part => part.source === 'bracket' && part.bracketInfo)\n        .sort((a, b) => a.bracketInfo.startIndex - b.bracketInfo.startIndex);\n      \n      // Non-bracket parts go in between or around bracket parts\n      const otherParts = row.separated.filter(part => part.source !== 'bracket');\n      \n      // Use a simple approach: put brackets in their exact positions, other parts elsewhere\n      let lastEnd = 0;\n      let otherIndex = 0;\n      \n      // First, place any non-bracket parts that come before the first bracket\n      if (bracketParts.length > 0) {\n        const firstBracketStart = bracketParts[0].bracketInfo.startIndex;\n        \n        // Add some non-bracket parts at the beginning if there's space\n        const beforeBracketText = original.substring(0, firstBracketStart).trim();\n        if (beforeBracketText.length > 0) {\n          // Look for matching non-bracket parts to put here\n          let foundMatchingPart = false;\n          \n          // Try to find a matching part\n          for (let i = 0; i < otherParts.length; i++) {\n            const part = otherParts[i];\n            if (beforeBracketText.includes(part.value)) {\n              elements.push(\n                <span key={`other-${otherIndex}`} className={`value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}>\n                  {part.value}\n                </span>\n              );\n              otherIndex++;\n              otherParts.splice(i, 1); // Remove this part\n              foundMatchingPart = true;\n              i--; // Adjust index for removed item\n            }\n          }\n          \n          // If no matching part found, show as unprocessed\n          if (!foundMatchingPart) {\n            elements.push(\n              <span key={`unproc-start`} className=\"unprocessed-tag\">{beforeBracketText}</span>\n            );\n          }\n        }\n      }\n      \n      // Place bracket parts in their exact positions\n      bracketParts.forEach((bracketPart, idx) => {\n        const bracketInfo = bracketPart.bracketInfo;\n        \n        // Add the bracket content\n        elements.push(\n          <span key={`bracket-${idx}`} className=\"value-tag bracket-source\">\n            {bracketPart.value}\n          </span>\n        );\n        \n        // Update the last position\n        lastEnd = bracketInfo.endIndex;\n        \n        // If there's another bracket coming, check if we can fit other parts in between\n        if (idx < bracketParts.length - 1) {\n          const nextBracketStart = bracketParts[idx + 1].bracketInfo.startIndex;\n          \n          // If there's space between brackets, add some non-bracket parts\n          if (nextBracketStart > lastEnd) {\n            const betweenText = original.substring(lastEnd, nextBracketStart).trim();\n            \n            if (betweenText.length > 0) {\n              // Try to find matching parts for this space\n              let foundMatchingPart = false;\n              \n              // Look for parts that might fit here\n              for (let i = 0; i < otherParts.length && i < 2; i++) {  // Limit to 2 parts\n                const part = otherParts[i];\n                if (betweenText.includes(part.value)) {\n                  elements.push(\n                    <span key={`between-${idx}-${i}`} className={`value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}>\n                      {part.value}\n                    </span>\n                  );\n                  otherParts.splice(i, 1); // Remove this part\n                  foundMatchingPart = true;\n                  i--; // Adjust index for removed item\n                }\n              }\n              \n              // If no matching part found, show as unprocessed\n              if (!foundMatchingPart) {\n                elements.push(\n                  <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{betweenText}</span>\n                );\n              }\n            }\n          }\n        }\n      });\n      \n      // Add any text after the last bracket\n      if (lastEnd < original.length) {\n        const afterText = original.substring(lastEnd).trim();\n        \n        if (afterText.length > 0) {\n          // Try to place remaining non-bracket parts\n          if (otherParts.length > 0) {\n            // Add remaining other parts\n            otherParts.forEach((part, idx) => {\n              elements.push(\n                <span key={`remaining-${idx}`} className={`value-tag ${part.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}>\n                  {part.value}\n                </span>\n              );\n            });\n          } else {\n            // No parts left, show as unprocessed\n            elements.push(\n              <span key=\"unproc-end\" className=\"unprocessed-tag\">{afterText}</span>\n            );\n          }\n        }\n      }\n      \n      return elements.length > 0 ? elements : renderSeparatedValues(row);\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row);\n  };\n\n  const renderSeparatedValues = (row) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => (\n        <span key={idx} className=\"value-tag\">{val}</span>\n      ));\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => (\n      <span \n        key={idx} \n        className={`value-tag ${item.source === 'bracket' ? 'bracket-source' : \n                              item.source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n      >\n        {typeof item === 'string' ? item : item.value}\n      </span>\n    ));\n  };\n\n  return (\n    <div className=\"data-display\">\n      {processedData && processedData.type === 'substring-grouping' ? (\n        // For top-level substring grouping, render directly\n        <div className=\"table-view horizontal-scroll\">\n          {renderSubstringGrouping(processedData)}\n        </div>\n      ) : (\n        // For other data types or nested data, use the flattened row approach\n        <table className=\"data-table\">\n          <tbody>\n            {flattenData(processedData).map((row, index) => (\n              <tr key={index}>\n                <td className={row.type === 'substring-grouping' ? 'enhanced-view horizontal-scroll' : 'enhanced-view'}>\n                  {renderEnhancedView(row)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}