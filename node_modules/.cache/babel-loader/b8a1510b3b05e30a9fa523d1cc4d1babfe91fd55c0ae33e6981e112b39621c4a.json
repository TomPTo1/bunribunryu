{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/PathNavigation.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { fetchChannels, fetchHeaders, fetchCombinations } from '../services/api';\nimport './PathNavigation.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PathNavigation = ({\n  selectedChannel,\n  selectedHeader,\n  selectedCombination,\n  onChannelSelect,\n  onHeaderSelect,\n  onCombinationSelect\n}) => {\n  _s();\n  const [channels, setChannels] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [combinations, setCombinations] = useState([]);\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  const navigationRef = useRef(null);\n\n  // Parse channel into hierarchical levels\n  const parseChannelLevels = channelList => {\n    const levelMap = {};\n    channelList.forEach(channel => {\n      const channelKey = channel.채널키;\n      if (!channelKey) return;\n      const levels = channelKey.split('_');\n\n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n\n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => item.name === level && item.parentPath === parentPath);\n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    return levelMap;\n  };\n\n  // Fetch channels on component mount\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        const response = await fetchChannels();\n        const channelList = response.list || [];\n        setChannels(channelList);\n\n        // Parse channel levels\n        const levels = parseChannelLevels(channelList);\n        setChannelLevels(levels);\n      } catch (error) {\n        console.error('Error fetching channels:', error);\n      }\n    };\n    getChannels();\n  }, []);\n\n  // Fetch headers when a channel is selected\n  useEffect(() => {\n    if (selectedChannel) {\n      const getHeaders = async () => {\n        try {\n          const response = await fetchHeaders(selectedChannel);\n          setHeaders(response.list || []);\n        } catch (error) {\n          console.error('Error fetching headers:', error);\n        }\n      };\n      getHeaders();\n\n      // Update selected levels based on selected channel\n      const levels = selectedChannel.split('_');\n      setSelectedLevels(levels);\n    } else {\n      setHeaders([]);\n      setSelectedLevels([]);\n    }\n  }, [selectedChannel]);\n\n  // Fetch combinations when a header is selected\n  useEffect(() => {\n    if (selectedChannel && selectedHeader) {\n      const getCombinations = async () => {\n        try {\n          const response = await fetchCombinations(selectedChannel, selectedHeader);\n          setCombinations(response.list || []);\n        } catch (error) {\n          console.error('Error fetching combinations:', error);\n        }\n      };\n      getCombinations();\n    } else {\n      setCombinations([]);\n    }\n  }, [selectedChannel, selectedHeader]);\n\n  // Close navigation panel when clicking outside\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (navigationRef.current && !navigationRef.current.contains(event.target)) {\n        setShowNavigationPanel(false);\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n  const toggleNavigationPanel = () => {\n    setShowNavigationPanel(!showNavigationPanel);\n  };\n  const handleLevelSelect = (level, index) => {\n    // Create a full channel path up to the selected level\n    const newPath = selectedLevels.slice(0, index).concat(level.name).join('_');\n\n    // Find the full channel that matches this path\n    const channel = channels.find(c => c.채널키 === newPath);\n    if (channel) {\n      onChannelSelect(channel.채널키);\n    } else {\n      // If it's a partial path, find the first channel that starts with this path\n      const matchingChannel = channels.find(c => c.채널키.startsWith(newPath + '_'));\n      if (matchingChannel) {\n        const levels = matchingChannel.채널키.split('_');\n        const partialPath = levels.slice(0, index + 1).join('_');\n        onChannelSelect(partialPath);\n      }\n    }\n    setShowNavigationPanel(false);\n  };\n  const getFilteredLevelItems = levelIndex => {\n    if (!channelLevels[levelIndex]) return [];\n\n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return channelLevels[0];\n    }\n\n    // For deeper levels, filter based on parent path\n    const parentPath = selectedLevels.slice(0, levelIndex).join('_');\n    return channelLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n  const renderPath = () => {\n    if (!selectedChannel) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"path-button\",\n        onClick: toggleNavigationPanel,\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uCC44\\uB110 \\uC120\\uD0DD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"dropdown-arrow\",\n          children: \"\\u25BC\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"path-navigation-breadcrumb\",\n      children: [selectedLevels.map((level, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [index > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"path-separator\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"path-level\",\n          onClick: toggleNavigationPanel,\n          children: level\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this)), selectedHeader && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"path-separator\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"path-level\",\n          children: selectedHeader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true), selectedCombination && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"path-separator\",\n          children: \">\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"path-level\",\n          children: selectedCombination\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"path-navigation\",\n    ref: navigationRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"navigation-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"navigation-path\",\n        children: [renderPath(), showNavigationPanel && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"navigation-panel\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"level-columns\",\n            children: Object.keys(channelLevels).map(levelIndex => {\n              const index = parseInt(levelIndex);\n              const items = getFilteredLevelItems(index);\n\n              // Only render the column if there are items\n              if (items.length === 0) return null;\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"level-column\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"level-column-header\",\n                  children: [\"\\uCC44\\uB110\\uB808\\uBCA8 \", index + 1]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"level-column-items\",\n                  children: items.map((item, itemIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: `level-item ${selectedLevels[index] === item.name ? 'selected' : ''}`,\n                    onClick: () => handleLevelSelect(item, index),\n                    children: item.name\n                  }, itemIndex, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 27\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 234,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n};\n_s(PathNavigation, \"QLt9nfChfxehZTWRxh9Ux/XaydQ=\");\n_c = PathNavigation;\nexport default PathNavigation;\nvar _c;\n$RefreshReg$(_c, \"PathNavigation\");","map":{"version":3,"names":["React","useState","useEffect","useRef","fetchChannels","fetchHeaders","fetchCombinations","jsxDEV","_jsxDEV","Fragment","_Fragment","PathNavigation","selectedChannel","selectedHeader","selectedCombination","onChannelSelect","onHeaderSelect","onCombinationSelect","_s","channels","setChannels","headers","setHeaders","combinations","setCombinations","showNavigationPanel","setShowNavigationPanel","channelLevels","setChannelLevels","selectedLevels","setSelectedLevels","navigationRef","parseChannelLevels","channelList","levelMap","forEach","channel","channelKey","채널키","levels","split","level","index","parentPath","slice","join","currentPath","existingItem","find","item","name","push","fullPath","getChannels","response","list","error","console","getHeaders","getCombinations","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","toggleNavigationPanel","handleLevelSelect","newPath","concat","c","matchingChannel","startsWith","partialPath","getFilteredLevelItems","levelIndex","filter","renderPath","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","map","ref","Object","keys","parseInt","items","length","itemIndex","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/PathNavigation.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { fetchChannels, fetchHeaders, fetchCombinations } from '../services/api';\nimport './PathNavigation.css';\n\nconst PathNavigation = ({ \n  selectedChannel, \n  selectedHeader, \n  selectedCombination,\n  onChannelSelect,\n  onHeaderSelect,\n  onCombinationSelect\n}) => {\n  const [channels, setChannels] = useState([]);\n  const [headers, setHeaders] = useState([]);\n  const [combinations, setCombinations] = useState([]);\n  const [showNavigationPanel, setShowNavigationPanel] = useState(false);\n  const [channelLevels, setChannelLevels] = useState([]);\n  const [selectedLevels, setSelectedLevels] = useState([]);\n  \n  const navigationRef = useRef(null);\n\n  // Parse channel into hierarchical levels\n  const parseChannelLevels = (channelList) => {\n    const levelMap = {};\n    \n    channelList.forEach(channel => {\n      const channelKey = channel.채널키;\n      if (!channelKey) return;\n      \n      const levels = channelKey.split('_');\n      \n      // Initialize levelMap for each depth\n      levels.forEach((level, index) => {\n        const parentPath = index === 0 ? '' : levels.slice(0, index).join('_');\n        const currentPath = index === 0 ? level : `${parentPath}_${level}`;\n        \n        if (!levelMap[index]) {\n          levelMap[index] = [];\n        }\n        \n        // Check if this level item already exists in the array\n        const existingItem = levelMap[index].find(item => \n          item.name === level && item.parentPath === parentPath\n        );\n        \n        if (!existingItem) {\n          levelMap[index].push({\n            name: level,\n            fullPath: currentPath,\n            parentPath\n          });\n        }\n      });\n    });\n    \n    return levelMap;\n  };\n\n  // Fetch channels on component mount\n  useEffect(() => {\n    const getChannels = async () => {\n      try {\n        const response = await fetchChannels();\n        const channelList = response.list || [];\n        setChannels(channelList);\n        \n        // Parse channel levels\n        const levels = parseChannelLevels(channelList);\n        setChannelLevels(levels);\n      } catch (error) {\n        console.error('Error fetching channels:', error);\n      }\n    };\n\n    getChannels();\n  }, []);\n\n  // Fetch headers when a channel is selected\n  useEffect(() => {\n    if (selectedChannel) {\n      const getHeaders = async () => {\n        try {\n          const response = await fetchHeaders(selectedChannel);\n          setHeaders(response.list || []);\n        } catch (error) {\n          console.error('Error fetching headers:', error);\n        }\n      };\n\n      getHeaders();\n      \n      // Update selected levels based on selected channel\n      const levels = selectedChannel.split('_');\n      setSelectedLevels(levels);\n    } else {\n      setHeaders([]);\n      setSelectedLevels([]);\n    }\n  }, [selectedChannel]);\n\n  // Fetch combinations when a header is selected\n  useEffect(() => {\n    if (selectedChannel && selectedHeader) {\n      const getCombinations = async () => {\n        try {\n          const response = await fetchCombinations(selectedChannel, selectedHeader);\n          setCombinations(response.list || []);\n        } catch (error) {\n          console.error('Error fetching combinations:', error);\n        }\n      };\n\n      getCombinations();\n    } else {\n      setCombinations([]);\n    }\n  }, [selectedChannel, selectedHeader]);\n\n  // Close navigation panel when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event) => {\n      if (navigationRef.current && !navigationRef.current.contains(event.target)) {\n        setShowNavigationPanel(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const toggleNavigationPanel = () => {\n    setShowNavigationPanel(!showNavigationPanel);\n  };\n\n  const handleLevelSelect = (level, index) => {\n    // Create a full channel path up to the selected level\n    const newPath = selectedLevels.slice(0, index).concat(level.name).join('_');\n    \n    // Find the full channel that matches this path\n    const channel = channels.find(c => c.채널키 === newPath);\n    \n    if (channel) {\n      onChannelSelect(channel.채널키);\n    } else {\n      // If it's a partial path, find the first channel that starts with this path\n      const matchingChannel = channels.find(c => c.채널키.startsWith(newPath + '_'));\n      if (matchingChannel) {\n        const levels = matchingChannel.채널키.split('_');\n        const partialPath = levels.slice(0, index + 1).join('_');\n        onChannelSelect(partialPath);\n      }\n    }\n    \n    setShowNavigationPanel(false);\n  };\n\n  const getFilteredLevelItems = (levelIndex) => {\n    if (!channelLevels[levelIndex]) return [];\n    \n    // For the first level, return all items\n    if (levelIndex === 0) {\n      return channelLevels[0];\n    }\n    \n    // For deeper levels, filter based on parent path\n    const parentPath = selectedLevels.slice(0, levelIndex).join('_');\n    return channelLevels[levelIndex].filter(item => item.parentPath === parentPath);\n  };\n\n  const renderPath = () => {\n    if (!selectedChannel) {\n      return (\n        <div className=\"path-button\" onClick={toggleNavigationPanel}>\n          <span>채널 선택</span>\n          <span className=\"dropdown-arrow\">▼</span>\n        </div>\n      );\n    }\n    \n    return (\n      <div className=\"path-navigation-breadcrumb\">\n        {selectedLevels.map((level, index) => (\n          <React.Fragment key={index}>\n            {index > 0 && <span className=\"path-separator\">&gt;</span>}\n            <div className=\"path-level\" onClick={toggleNavigationPanel}>\n              {level}\n            </div>\n          </React.Fragment>\n        ))}\n        {selectedHeader && (\n          <>\n            <span className=\"path-separator\">&gt;</span>\n            <div className=\"path-level\">\n              {selectedHeader}\n            </div>\n          </>\n        )}\n        {selectedCombination && (\n          <>\n            <span className=\"path-separator\">&gt;</span>\n            <div className=\"path-level\">\n              {selectedCombination}\n            </div>\n          </>\n        )}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"path-navigation\" ref={navigationRef}>\n      <div className=\"navigation-container\">\n        <div className=\"navigation-path\">\n          {renderPath()}\n          \n          {showNavigationPanel && (\n            <div className=\"navigation-panel\">\n              <div className=\"level-columns\">\n                {/* Render columns for each level */}\n                {Object.keys(channelLevels).map((levelIndex) => {\n                  const index = parseInt(levelIndex);\n                  const items = getFilteredLevelItems(index);\n                  \n                  // Only render the column if there are items\n                  if (items.length === 0) return null;\n                  \n                  return (\n                    <div className=\"level-column\" key={index}>\n                      <div className=\"level-column-header\">\n                        채널레벨 {index + 1}\n                      </div>\n                      <div className=\"level-column-items\">\n                        {items.map((item, itemIndex) => (\n                          <div \n                            key={itemIndex}\n                            className={`level-item ${selectedLevels[index] === item.name ? 'selected' : ''}`}\n                            onClick={() => handleLevelSelect(item, index)}\n                          >\n                            {item.name}\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PathNavigation; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}