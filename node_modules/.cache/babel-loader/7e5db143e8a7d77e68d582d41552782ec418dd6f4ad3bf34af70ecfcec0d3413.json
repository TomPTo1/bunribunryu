{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DataDisplay = ({\n  processedData,\n  flattenData,\n  segmentationData,\n  groupingData\n}) => {\n  _s();\n  const [selectedGroupId, setSelectedGroupId] = useState(null);\n  if (!processedData) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uCC98\\uB9AC\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Check if we have grouping data\n  const hasGroupingData = groupingData && groupingData.uniqueValues && Array.isArray(groupingData.uniqueValues);\n\n  // Render grouping interface if we have grouping data\n  const renderGroupingInterface = () => {\n    if (!hasGroupingData) return null;\n    const {\n      uniqueValues,\n      groups\n    } = groupingData;\n\n    // Handle segmentation value click to add to selected group\n    const handleValueClick = value => {\n      if (!selectedGroupId) {\n        alert('먼저 그룹을 선택해주세요');\n        return;\n      }\n      if (groupingData && groupingData.onAddValueToGroup) {\n        groupingData.onAddValueToGroup(selectedGroupId, value);\n      }\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grouping-interface\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"segmentation-values-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"\\uBD84\\uC808\\uAC12 \\uBAA9\\uB85D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segmentation-values-list\",\n          children: uniqueValues.map((value, index) => {\n            // Skip values that are already in any group\n            const isInAnyGroup = groups && groups.some(group => group.items && group.items.includes(value));\n            if (isInAnyGroup) {\n              return null;\n            }\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segmentation-value-item clickable\",\n              onClick: () => handleValueClick(value),\n              title: \"\\uD074\\uB9AD\\uD558\\uC5EC \\uC120\\uD0DD\\uB41C \\uADF8\\uB8F9\\uC5D0 \\uCD94\\uAC00\",\n              children: value\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = text => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = text => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = value => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Handle whole tag click\n  const handleTagClick = value => {\n    console.log('Whole tag clicked:', value);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`;\n\n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${className} tag-container`,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"whole-tag-button\",\n          onClick: () => handleTagClick(valueText),\n          title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n          children: valueText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segments-container\",\n          children: segmentation.segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`,\n            onClick: e => handleSegmentClick(segment, e),\n            children: segment.text\n          }, `seg-${segIdx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this);\n    }\n\n    // No segmentation, render normally but still clickable\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `${className} clickable-tag simple-tag-button`,\n      onClick: () => handleTagClick(valueText),\n      children: valueText\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = row => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n\n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && segmentationData.processed.previous && segmentationData.processed.previous.type === row.type;\n\n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n\n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"unprocessed-tag\",\n        children: original\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 14\n      }, this);\n    }\n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n\n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"unprocessed-tag\",\n            children: unprocessedText\n          }, `unproc-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this));\n        }\n\n        // Add the processed bracket content\n        result.push(renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep));\n        lastIndex = match.endIndex;\n      });\n\n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"unprocessed-tag\",\n          children: original.substring(lastIndex)\n        }, \"unproc-last\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this));\n      }\n      return result;\n    }\n\n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n\n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = row => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\\uC758 \\uAC12\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"substring-segmentation-view\",\n      children: row.separated.map((item, idx) => {\n        const value = typeof item === 'string' ? item : item.value;\n        const segments = item.segments || [];\n        const source = item.source || 'text';\n\n        // If there are segments, render them\n        if (segments.length > 1) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"whole-tag-button\",\n              onClick: () => handleTagClick(value),\n              title: \"\\uC804\\uCCB4 \\uD0DC\\uADF8 \\uC120\\uD0DD\",\n              children: value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"segments-container\",\n              children: segments.map((segment, segIdx) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`,\n                onClick: e => handleSegmentClick(segment, e),\n                children: segment.text\n              }, `seg-${segIdx}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 17\n            }, this)]\n          }, idx, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 15\n          }, this);\n        }\n\n        // No segments, render normally\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`,\n          onClick: () => handleTagClick(value),\n          children: value\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this);\n  };\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"no-values\",\n        children: \"\\uCD94\\uCD9C\\uB41C \\uAC12 \\uC5C6\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 14\n      }, this);\n    }\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => renderTag(val, 'text', idx, isLastStep));\n    }\n\n    // New format (with metadata)\n    return row.separated.map((item, idx) => renderTag(item, item.source || 'text', idx, isLastStep));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"data-display\",\n    children: hasGroupingData ? renderGroupingInterface() : /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"data-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: flattenData(processedData).map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"td\", {\n            className: \"enhanced-view\",\n            children: renderEnhancedView(row)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 311,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 303,\n    columnNumber: 5\n  }, this);\n};\n_s(DataDisplay, \"N6IyWUjk3ly2/V5nEVBXj/bSG28=\");\n_c = DataDisplay;\nexport default DataDisplay;\nvar _c;\n$RefreshReg$(_c, \"DataDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","DataDisplay","processedData","flattenData","segmentationData","groupingData","_s","selectedGroupId","setSelectedGroupId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","hasGroupingData","uniqueValues","Array","isArray","renderGroupingInterface","groups","handleValueClick","value","alert","onAddValueToGroup","map","index","isInAnyGroup","some","group","items","includes","onClick","title","isDuplicatedText","text","length","halfLength","Math","floor","firstHalf","substring","cleanDuplicatedText","hasSegmentationData","segmentations","seg","segments","getSegmentationData","find","handleSegmentClick","segment","e","stopPropagation","console","log","handleTagClick","renderTag","source","key","isLastStep","valueText","segmentation","segIdx","isSubstring","renderEnhancedView","row","type","renderSubstringSegmentationView","processed","previous","original","renderSeparatedValues","separated","result","lastIndex","matchDetails","sortedMatches","sort","a","b","startIndex","forEach","match","idx","unprocessedText","push","endIndex","item","every","v","val","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/DataDisplay.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst DataDisplay = ({ processedData, flattenData, segmentationData, groupingData }) => {\n  const [selectedGroupId, setSelectedGroupId] = useState(null);\n  \n  if (!processedData) {\n    return <div className=\"no-data\">처리할 데이터가 없습니다</div>;\n  }\n\n  // Check if we have grouping data\n  const hasGroupingData = groupingData && groupingData.uniqueValues && Array.isArray(groupingData.uniqueValues);\n  \n  // Render grouping interface if we have grouping data\n  const renderGroupingInterface = () => {\n    if (!hasGroupingData) return null;\n    \n    const { uniqueValues, groups } = groupingData;\n    \n    // Handle segmentation value click to add to selected group\n    const handleValueClick = (value) => {\n      if (!selectedGroupId) {\n        alert('먼저 그룹을 선택해주세요');\n        return;\n      }\n      \n      if (groupingData && groupingData.onAddValueToGroup) {\n        groupingData.onAddValueToGroup(selectedGroupId, value);\n      }\n    };\n    \n    return (\n      <div className=\"grouping-interface\">\n        <div className=\"segmentation-values-container\">\n          <h4>분절값 목록</h4>\n          <div className=\"segmentation-values-list\">\n            {uniqueValues.map((value, index) => {\n              // Skip values that are already in any group\n              const isInAnyGroup = groups && groups.some(group => \n                group.items && group.items.includes(value)\n              );\n              \n              if (isInAnyGroup) {\n                return null;\n              }\n              \n              return (\n                <div \n                  key={index} \n                  className=\"segmentation-value-item clickable\"\n                  onClick={() => handleValueClick(value)}\n                  title=\"클릭하여 선택된 그룹에 추가\"\n                >\n                  {value}\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Check if the text is a duplicated string (contains itself twice)\n  const isDuplicatedText = (text) => {\n    if (typeof text !== 'string' || text.length === 0) return false;\n    const halfLength = Math.floor(text.length / 2);\n    const firstHalf = text.substring(0, halfLength);\n    return text.includes(firstHalf + firstHalf);\n  };\n\n  // Remove duplicated text if needed\n  const cleanDuplicatedText = (text) => {\n    if (!isDuplicatedText(text)) return text;\n    const halfLength = Math.floor(text.length / 2);\n    return text.substring(0, halfLength);\n  };\n\n  // Check if a value has segmentation data\n  const hasSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return false;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.some(seg => seg.value === value && seg.segments.length > 1);\n  };\n\n  // Get segmentation data for a value\n  const getSegmentationData = (value) => {\n    if (!segmentationData || !segmentationData.segmentations) return null;\n    \n    const segmentations = segmentationData.segmentations;\n    return segmentations.find(seg => seg.value === value);\n  };\n\n  // Handle segment click\n  const handleSegmentClick = (segment, e) => {\n    // 전파 중지 - 부모의 클릭 이벤트가 발생하지 않도록\n    e.stopPropagation();\n    console.log('Segment clicked:', segment);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Handle whole tag click\n  const handleTagClick = (value) => {\n    console.log('Whole tag clicked:', value);\n    // 필요에 따라 여기에 추가 동작 구현 (예: 검색, 필터링 등)\n  };\n\n  // Helper function to render a tag with appropriate styling\n  const renderTag = (value, source, key, isLastStep) => {\n    let className = `value-tag ${\n      source === 'bracket' ? 'bracket-source' : \n      source === 'clean-text' ? 'text-source' : 'delimiter-source'\n    }`;\n    \n    // Check if we have segmentation data for this value\n    const valueText = typeof value === 'string' ? value : value.value;\n    const segmentation = getSegmentationData(valueText);\n    \n    if (segmentation && segmentation.segments.length > 1) {\n      // Render with inner segments\n      return (\n        <div key={key} className={`${className} tag-container`}>\n          <button \n            className=\"whole-tag-button\" \n            onClick={() => handleTagClick(valueText)}\n            title=\"전체 태그 선택\"\n          >\n            {valueText}\n          </button>\n          <div className=\"segments-container\">\n            {segmentation.segments.map((segment, segIdx) => (\n              <button \n                key={`seg-${segIdx}`} \n                className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`}\n                onClick={(e) => handleSegmentClick(segment, e)}\n              >\n                {segment.text}\n              </button>\n            ))}\n          </div>\n        </div>\n      );\n    }\n    \n    // No segmentation, render normally but still clickable\n    return (\n      <button \n        key={key} \n        className={`${className} clickable-tag simple-tag-button`}\n        onClick={() => handleTagClick(valueText)}\n      >\n        {valueText}\n      </button>\n    );\n  };\n\n  // Render the enhanced view that shows processed and unprocessed parts in sequence\n  const renderEnhancedView = (row) => {\n    // Handle substring segmentation data\n    if (row.type === 'substring-segmentation') {\n      return renderSubstringSegmentationView(row);\n    }\n    \n    // Check if this is the last pipeline step (right before substring segmentation)\n    const isLastStep = segmentationData && segmentationData.processed && \n                       (segmentationData.processed.previous &&\n                        segmentationData.processed.previous.type === row.type);\n    \n    // Clean up potentially duplicated original text\n    let original = row.original;\n    if (isDuplicatedText(original)) {\n      original = cleanDuplicatedText(original);\n    }\n    \n    if (!original || typeof original !== 'string') {\n      return renderSeparatedValues(row, isLastStep);\n    }\n    \n    // If no separation has happened yet\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"unprocessed-tag\">{original}</span>;\n    }\n    \n    if (row.type === 'bracket-separation') {\n      // For bracket separation, highlight brackets and content\n      let result = [];\n      let lastIndex = 0;\n      \n      // Sort match details by start index if available\n      const matchDetails = row.matchDetails || [];\n      const sortedMatches = [...matchDetails].sort((a, b) => a.startIndex - b.startIndex);\n      \n      sortedMatches.forEach((match, idx) => {\n        // Add unprocessed text before this match\n        if (match.startIndex > lastIndex) {\n          const unprocessedText = original.substring(lastIndex, match.startIndex);\n          result.push(\n            <span key={`unproc-${idx}`} className=\"unprocessed-tag\">{unprocessedText}</span>\n          );\n        }\n        \n        // Add the processed bracket content\n        result.push(\n          renderTag(match.value, 'bracket', `proc-${idx}`, isLastStep)\n        );\n        \n        lastIndex = match.endIndex;\n      });\n      \n      // Add any remaining text\n      if (lastIndex < original.length) {\n        result.push(\n          <span key=\"unproc-last\" className=\"unprocessed-tag\">\n            {original.substring(lastIndex)}\n          </span>\n        );\n      }\n      \n      return result;\n    }\n    \n    // Fallback to original display method\n    return renderSeparatedValues(row, isLastStep);\n  };\n  \n  // Render substring segmentation view with segmented parts\n  const renderSubstringSegmentationView = (row) => {\n    if (!row.previous || !row.previous.separated || row.previous.separated.length === 0) {\n      return <span className=\"no-values\">이전 단계의 값이 없습니다</span>;\n    }\n    \n    return (\n      <div className=\"substring-segmentation-view\">\n        {row.separated.map((item, idx) => {\n          const value = typeof item === 'string' ? item : item.value;\n          const segments = item.segments || [];\n          const source = item.source || 'text';\n          \n          // If there are segments, render them\n          if (segments.length > 1) {\n            return (\n              <div \n                key={idx} \n                className={`value-tag tag-container ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n              >\n                <button \n                  className=\"whole-tag-button\" \n                  onClick={() => handleTagClick(value)}\n                  title=\"전체 태그 선택\"\n                >\n                  {value}\n                </button>\n                <div className=\"segments-container\">\n                  {segments.map((segment, segIdx) => (\n                    <button \n                      key={`seg-${segIdx}`} \n                      className={`segment-button ${segment.isSubstring ? 'segment-matched' : 'segment-unmatched'}`}\n                      onClick={(e) => handleSegmentClick(segment, e)}\n                    >\n                      {segment.text}\n                    </button>\n                  ))}\n                </div>\n              </div>\n            );\n          }\n          \n          // No segments, render normally\n          return (\n            <button \n              key={idx} \n              className={`value-tag simple-tag-button ${source === 'bracket' ? 'bracket-source' : source === 'clean-text' ? 'text-source' : 'delimiter-source'}`}\n              onClick={() => handleTagClick(value)}\n            >\n              {value}\n            </button>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderSeparatedValues = (row, isLastStep) => {\n    if (!row.separated || row.separated.length === 0) {\n      return <span className=\"no-values\">추출된 값 없음</span>;\n    }\n\n    if (Array.isArray(row.separated) && row.separated.every(v => typeof v === 'string')) {\n      // Old format (just strings)\n      return row.separated.map((val, idx) => \n        renderTag(val, 'text', idx, isLastStep)\n      );\n    } \n    \n    // New format (with metadata)\n    return row.separated.map((item, idx) => \n      renderTag(item, item.source || 'text', idx, isLastStep)\n    );\n  };\n\n  return (\n    <div className=\"data-display\">\n      {hasGroupingData ? (\n        renderGroupingInterface()\n      ) : (\n        <table className=\"data-table\">\n          <tbody>\n            {flattenData(processedData).map((row, index) => (\n              <tr key={index}>\n                <td className=\"enhanced-view\">\n                  {renderEnhancedView(row)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </div>\n  );\n};\n\nexport default DataDisplay; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}