{"ast":null,"code":"/**\n * File system service for the browse mode\n * \n * This service provides functions to interact with the file system via API\n */\n\n// API 기본 URL\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// 디렉토리 구조 가져오기 함수\nexport const getDirectoryStructure = async (path = 'src/browse_mode_sample_data') => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files?path=${encodeURIComponent(path)}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch directory structure: ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching directory structure:\", error);\n    throw error;\n  }\n};\n\n// 파일 내용 가져오기 함수\nexport const getFileContent = async path => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/file-content?path=${encodeURIComponent(path)}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch file content: ${response.statusText}`);\n    }\n\n    // 파일 타입에 따라 다른 처리\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    } else {\n      return await response.text();\n    }\n  } catch (error) {\n    console.error(\"Error fetching file content:\", error);\n    throw error;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","getDirectoryStructure","path","response","fetch","encodeURIComponent","ok","Error","statusText","json","error","console","getFileContent","contentType","headers","get","includes","text"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/services/fileSystemService.js"],"sourcesContent":["/**\n * File system service for the browse mode\n * \n * This service provides functions to interact with the file system via API\n */\n\n// API 기본 URL\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// 디렉토리 구조 가져오기 함수\nexport const getDirectoryStructure = async (path = 'src/browse_mode_sample_data') => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/files?path=${encodeURIComponent(path)}`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch directory structure: ${response.statusText}`);\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(\"Error fetching directory structure:\", error);\n    throw error;\n  }\n};\n\n// 파일 내용 가져오기 함수\nexport const getFileContent = async (path) => {\n  try {\n    const response = await fetch(`${API_BASE_URL}/file-content?path=${encodeURIComponent(path)}`);\n    \n    if (!response.ok) {\n      throw new Error(`Failed to fetch file content: ${response.statusText}`);\n    }\n    \n    // 파일 타입에 따라 다른 처리\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('application/json')) {\n      return await response.json();\n    } else {\n      return await response.text();\n    }\n  } catch (error) {\n    console.error(\"Error fetching file content:\", error);\n    throw error;\n  }\n}; "],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,YAAY,GAAG,2BAA2B;;AAEhD;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CAAOC,IAAI,GAAG,6BAA6B,KAAK;EACnF,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,eAAeK,kBAAkB,CAACH,IAAI,CAAC,EAAE,CAAC;IAEtF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,wCAAwCJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IAChF;IAEA,OAAO,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC3D,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAG,MAAOV,IAAI,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,sBAAsBK,kBAAkB,CAACH,IAAI,CAAC,EAAE,CAAC;IAE7F,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiCJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACzE;;IAEA;IACA,MAAMK,WAAW,GAAGV,QAAQ,CAACW,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IACxD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC3D,OAAO,MAAMb,QAAQ,CAACM,IAAI,CAAC,CAAC;IAC9B,CAAC,MAAM;MACL,OAAO,MAAMN,QAAQ,CAACc,IAAI,CAAC,CAAC;IAC9B;EACF,CAAC,CAAC,OAAOP,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}