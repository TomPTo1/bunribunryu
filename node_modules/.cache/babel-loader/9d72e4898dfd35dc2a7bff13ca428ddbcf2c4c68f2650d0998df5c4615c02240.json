{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './SeparationClassifier.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupPanel = ({\n  groupData\n}) => {\n  _s();\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"no-data\",\n      children: \"\\uADF8\\uB8F9\\uD654\\uB41C \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 12\n    }, this);\n  }\n\n  // 노드 접기/펼치기 상태 관리\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set());\n  const toggleNode = substring => {\n    const newCollapsed = new Set(collapsedNodes);\n    if (newCollapsed.has(substring)) {\n      newCollapsed.delete(substring);\n    } else {\n      newCollapsed.add(substring);\n    }\n    setCollapsedNodes(newCollapsed);\n  };\n\n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n\n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null\n      });\n    });\n\n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        const nodeB = substringMap.get(itemB.substring);\n\n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && itemA.substring.length < itemB.substring.length) {\n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n\n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && substringC !== itemB.substring && substringC.includes(itemA.substring) && itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n\n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n\n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n\n    // Sort children nodes by frequency (descending) and then by length (descending)\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring length\n          return b.item.substring.length - a.item.substring.length;\n        });\n      }\n    }\n\n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values()).filter(node => node.parent === null)\n    // Sort root nodes by frequency and length\n    .sort((a, b) => {\n      // First sort by frequency (count)\n      if (b.item.count !== a.item.count) {\n        return b.item.count - a.item.count;\n      }\n      // Then by substring length\n      return b.item.substring.length - a.item.substring.length;\n    });\n    return {\n      rootNodes,\n      substringMap\n    };\n  };\n  const {\n    rootNodes\n  } = buildHierarchy();\n\n  // 관계 시각화를 위한 함수 - 문자열 A가 문자열 B에 어떻게 포함되어 있는지 표시\n  const visualizeContainment = (parent, child) => {\n    const parentStr = parent.item.substring;\n    const childStr = child.item.substring;\n    if (!parentStr.includes(childStr)) return null;\n    const startIndex = parentStr.indexOf(childStr);\n    const endIndex = startIndex + childStr.length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containment-viz\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"containment-text\",\n        children: \"\\uD3EC\\uD568 \\uAD00\\uACC4:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containment-string\",\n        children: [startIndex > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"pre-text\",\n          children: parentStr.substring(0, startIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"highlight-text\",\n          children: childStr\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this), endIndex < parentStr.length && /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"post-text\",\n          children: parentStr.substring(endIndex)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render a tree node\n  const renderTreeNode = (node, level = 0) => {\n    const {\n      item,\n      children\n    } = node;\n    const isCollapsed = collapsedNodes.has(item.substring);\n    const hasChildren = children.length > 0;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dendrogram-node\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-title\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"node-name\",\n              children: item.substring\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"node-count\",\n              children: [\"(\", item.count, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 13\n          }, this), hasChildren && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"collapse-btn\",\n            onClick: () => toggleNode(item.substring),\n            title: isCollapsed ? \"확장\" : \"접기\",\n            children: isCollapsed ? \"+\" : \"-\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-items\",\n          children: [groupData.groups[item.substring] && groupData.groups[item.substring].slice(0, 3).map((value, valueIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-item\",\n            children: value.includes(item.substring) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [value.indexOf(item.substring) > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-prefix\",\n                children: value.substring(0, value.indexOf(item.substring))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-highlight\",\n                children: item.substring\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 21\n              }, this), value.indexOf(item.substring) + item.substring.length < value.length && /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"value-suffix\",\n                children: value.substring(value.indexOf(item.substring) + item.substring.length)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : value\n          }, valueIdx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this)), groupData.groups[item.substring] && groupData.groups[item.substring].length > 3 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"node-more\",\n            children: [\"\\uC678 \", groupData.groups[item.substring].length - 3, \"\\uAC1C...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), hasChildren && !isCollapsed && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"node-children\",\n        children: children.map(child => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"node-branch\",\n          children: [visualizeContainment(node, child), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"branch-line\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this), renderTreeNode(child, level + 1)]\n        }, child.item.substring, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this)]\n    }, item.substring, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 부분문자열로 그룹화된 항목들을 덴드로그램 형태로 표시\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uBD80\\uBD84\\uBB38\\uC790\\uC5F4 \\uACC4\\uCE35 \\uAD6C\\uC870\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dendrogram-view\",\n      children: [groupData.ungrouped && groupData.ungrouped.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ungrouped-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ungrouped-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ungrouped-title\",\n            children: \"\\uADF8\\uB8F9\\uD654\\uB418\\uC9C0 \\uC54A\\uC74C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"ungrouped-count\",\n            children: [\"(\", groupData.ungrouped.length, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"ungrouped-items\",\n          children: [groupData.ungrouped.slice(0, 10).map((value, idx) => /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"value-tag\",\n            children: value\n          }, idx, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 17\n          }, this)), groupData.ungrouped.length > 10 && /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"more-tag\",\n            children: [\"\\uC678 \", groupData.ungrouped.length - 10, \"\\uAC1C...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dendrogram-container\",\n        children: rootNodes.map(rootNode => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"dendrogram-tree\",\n          children: renderTreeNode(rootNode)\n        }, rootNode.item.substring, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 217,\n    columnNumber: 5\n  }, this);\n};\n_s(GroupPanel, \"QPrmShD1CM3RtfZAs5G+53SfvIE=\");\n_c = GroupPanel;\nexport default GroupPanel;\nvar _c;\n$RefreshReg$(_c, \"GroupPanel\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupPanel","groupData","_s","substrings","groups","className","children","fileName","_jsxFileName","lineNumber","columnNumber","collapsedNodes","setCollapsedNodes","Set","toggleNode","substring","newCollapsed","has","delete","add","buildHierarchy","substringMap","Map","forEach","item","set","parent","itemA","nodeA","get","itemB","nodeB","includes","length","moreSpecificParentExists","substringC","nodeC","entries","prevParentChildren","index","indexOf","splice","push","node","values","sort","a","b","count","rootNodes","Array","from","filter","visualizeContainment","child","parentStr","childStr","startIndex","endIndex","renderTreeNode","level","isCollapsed","hasChildren","onClick","title","slice","map","value","valueIdx","ungrouped","idx","rootNode","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/GroupPanel.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './SeparationClassifier.css';\n\nconst GroupPanel = ({ groupData }) => {\n  if (!groupData || !groupData.substrings || !groupData.groups) {\n    return <div className=\"no-data\">그룹화된 데이터가 없습니다</div>;\n  }\n  \n  // 노드 접기/펼치기 상태 관리\n  const [collapsedNodes, setCollapsedNodes] = useState(new Set());\n  \n  const toggleNode = (substring) => {\n    const newCollapsed = new Set(collapsedNodes);\n    if (newCollapsed.has(substring)) {\n      newCollapsed.delete(substring);\n    } else {\n      newCollapsed.add(substring);\n    }\n    setCollapsedNodes(newCollapsed);\n  };\n  \n  // Build a hierarchical structure for substrings\n  const buildHierarchy = () => {\n    // Create a map of all substrings\n    const substringMap = new Map();\n    \n    // Initialize the map with all substrings\n    groupData.substrings.forEach(item => {\n      substringMap.set(item.substring, {\n        item,\n        children: [],\n        parent: null\n      });\n    });\n    \n    // For each substring, find if it's contained within another\n    groupData.substrings.forEach(itemA => {\n      const nodeA = substringMap.get(itemA.substring);\n      \n      groupData.substrings.forEach(itemB => {\n        // Skip if same substring\n        if (itemA.substring === itemB.substring) return;\n        \n        const nodeB = substringMap.get(itemB.substring);\n        \n        // If A is contained in B and is shorter (part-of relationship)\n        if (itemB.substring.includes(itemA.substring) && \n            itemA.substring.length < itemB.substring.length) {\n          \n          // Check if there's a more specific parent already\n          let moreSpecificParentExists = false;\n          \n          // Check if there's already another substring C where:\n          // A is contained in C, and C is contained in B\n          for (const [substringC, nodeC] of substringMap.entries()) {\n            if (substringC !== itemA.substring && \n                substringC !== itemB.substring && \n                substringC.includes(itemA.substring) && \n                itemB.substring.includes(substringC)) {\n              moreSpecificParentExists = true;\n              break;\n            }\n          }\n          \n          // If no more specific parent found, make B the parent of A\n          if (!moreSpecificParentExists) {\n            // Remove from previous parent if exists\n            if (nodeA.parent) {\n              const prevParentChildren = nodeA.parent.children;\n              const index = prevParentChildren.indexOf(nodeA);\n              if (index > -1) {\n                prevParentChildren.splice(index, 1);\n              }\n            }\n            \n            // Set B as the parent of A\n            nodeA.parent = nodeB;\n            if (!nodeB.children.includes(nodeA)) {\n              nodeB.children.push(nodeA);\n            }\n          }\n        }\n      });\n    });\n    \n    // Sort children nodes by frequency (descending) and then by length (descending)\n    for (const node of substringMap.values()) {\n      if (node.children.length > 0) {\n        node.children.sort((a, b) => {\n          // First sort by frequency (count)\n          if (b.item.count !== a.item.count) {\n            return b.item.count - a.item.count;\n          }\n          // Then by substring length\n          return b.item.substring.length - a.item.substring.length;\n        });\n      }\n    }\n    \n    // Get all root nodes (those without parents)\n    const rootNodes = Array.from(substringMap.values())\n      .filter(node => node.parent === null)\n      // Sort root nodes by frequency and length\n      .sort((a, b) => {\n        // First sort by frequency (count)\n        if (b.item.count !== a.item.count) {\n          return b.item.count - a.item.count;\n        }\n        // Then by substring length\n        return b.item.substring.length - a.item.substring.length;\n      });\n    \n    return { rootNodes, substringMap };\n  };\n  \n  const { rootNodes } = buildHierarchy();\n  \n  // 관계 시각화를 위한 함수 - 문자열 A가 문자열 B에 어떻게 포함되어 있는지 표시\n  const visualizeContainment = (parent, child) => {\n    const parentStr = parent.item.substring;\n    const childStr = child.item.substring;\n    \n    if (!parentStr.includes(childStr)) return null;\n    \n    const startIndex = parentStr.indexOf(childStr);\n    const endIndex = startIndex + childStr.length;\n    \n    return (\n      <div className=\"containment-viz\">\n        <span className=\"containment-text\">포함 관계:</span>\n        <div className=\"containment-string\">\n          {startIndex > 0 && (\n            <span className=\"pre-text\">{parentStr.substring(0, startIndex)}</span>\n          )}\n          <span className=\"highlight-text\">{childStr}</span>\n          {endIndex < parentStr.length && (\n            <span className=\"post-text\">{parentStr.substring(endIndex)}</span>\n          )}\n        </div>\n      </div>\n    );\n  };\n  \n  // Render a tree node\n  const renderTreeNode = (node, level = 0) => {\n    const { item, children } = node;\n    const isCollapsed = collapsedNodes.has(item.substring);\n    const hasChildren = children.length > 0;\n    \n    return (\n      <div key={item.substring} className=\"dendrogram-node\">\n        <div className=\"node-content\">\n          <div className=\"node-header\">\n            <div className=\"node-title\">\n              <span className=\"node-name\">{item.substring}</span>\n              <span className=\"node-count\">({item.count})</span>\n            </div>\n            {hasChildren && (\n              <button \n                className=\"collapse-btn\" \n                onClick={() => toggleNode(item.substring)}\n                title={isCollapsed ? \"확장\" : \"접기\"}\n              >\n                {isCollapsed ? \"+\" : \"-\"}\n              </button>\n            )}\n          </div>\n          <div className=\"node-items\">\n            {groupData.groups[item.substring] && \n             groupData.groups[item.substring].slice(0, 3).map((value, valueIdx) => (\n              <div key={valueIdx} className=\"node-item\">\n                {value.includes(item.substring) ? (\n                  <>\n                    {value.indexOf(item.substring) > 0 && (\n                      <span className=\"value-prefix\">\n                        {value.substring(0, value.indexOf(item.substring))}\n                      </span>\n                    )}\n                    <span className=\"value-highlight\">\n                      {item.substring}\n                    </span>\n                    {value.indexOf(item.substring) + item.substring.length < value.length && (\n                      <span className=\"value-suffix\">\n                        {value.substring(value.indexOf(item.substring) + item.substring.length)}\n                      </span>\n                    )}\n                  </>\n                ) : value}\n              </div>\n            ))}\n            {groupData.groups[item.substring] && \n             groupData.groups[item.substring].length > 3 && (\n              <div className=\"node-more\">\n                외 {groupData.groups[item.substring].length - 3}개...\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {hasChildren && !isCollapsed && (\n          <div className=\"node-children\">\n            {children.map(child => (\n              <div key={child.item.substring} className=\"node-branch\">\n                {visualizeContainment(node, child)}\n                <div className=\"branch-line\"></div>\n                {renderTreeNode(child, level + 1)}\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    );\n  };\n  \n  // 부분문자열로 그룹화된 항목들을 덴드로그램 형태로 표시\n  return (\n    <div className=\"group-panel\">\n      <h3>부분문자열 계층 구조</h3>\n      \n      <div className=\"dendrogram-view\">\n        {/* 그룹화되지 않은 항목 */}\n        {groupData.ungrouped && groupData.ungrouped.length > 0 && (\n          <div className=\"ungrouped-section\">\n            <div className=\"ungrouped-header\">\n              <span className=\"ungrouped-title\">그룹화되지 않음</span>\n              <span className=\"ungrouped-count\">({groupData.ungrouped.length})</span>\n            </div>\n            <div className=\"ungrouped-items\">\n              {groupData.ungrouped.slice(0, 10).map((value, idx) => (\n                <span key={idx} className=\"value-tag\">{value}</span>\n              ))}\n              {groupData.ungrouped.length > 10 && (\n                <span className=\"more-tag\">외 {groupData.ungrouped.length - 10}개...</span>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {/* 부분문자열로 계층적으로 그룹화된 항목들 - 덴드로그램 형태 */}\n        <div className=\"dendrogram-container\">\n          {rootNodes.map(rootNode => (\n            <div key={rootNode.item.substring} className=\"dendrogram-tree\">\n              {renderTreeNode(rootNode)}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GroupPanel; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}