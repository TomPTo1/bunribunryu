{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js\";\nimport React from 'react';\nimport './SeparationClassifier.css';\n\n// Utility functions for text processing\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst textUtils = {\n  // String reversal utility\n  reverseString: str => str.split('').reverse().join(''),\n  // Extract tokens from data rows\n  extractTokens: dataRows => {\n    const bracketSet = new Set();\n    const valueSet = new Set();\n    dataRows.forEach(row => {\n      const cellValue = row[0];\n\n      // Skip empty/null values\n      if (cellValue === null || cellValue === undefined || String(cellValue).trim() === '') {\n        return;\n      }\n      const cellValueStr = String(cellValue);\n\n      // 1. Handle bracket content with regex\n      const bracketContentRegex = /\\(([^)]*)\\)|\\[([^\\]]*)\\]|\\{([^}]*)\\}/g;\n      let textWithoutBrackets = cellValueStr.replace(bracketContentRegex, (match, p1, p2, p3) => {\n        const content = p1 || p2 || p3;\n        if (content && content.trim()) {\n          bracketSet.add(content.trim());\n        }\n        return ' ';\n      });\n\n      // 2. Split by spaces and commas\n      const separatedValues = textWithoutBrackets.split(/[\\s,]+/).map(value => value.trim()).filter(value => value.length > 0);\n      separatedValues.forEach(value => {\n        if (value && value.trim()) {\n          valueSet.add(value.trim());\n        }\n      });\n    });\n    return {\n      bracketValues: Array.from(bracketSet).map(val => `[괄호] ${val}`),\n      normalValues: Array.from(valueSet)\n    };\n  },\n  // Find common substring patterns\n  findCommonSubstrings: (tokens, minLength = 1, minCount = 2, direction = 'any') => {\n    // Track substring frequencies\n    const substringFreq = {};\n\n    // Analyze all tokens\n    tokens.forEach(token => {\n      const cleanToken = token.replace('[괄호] ', '');\n\n      // Handle prefixes\n      if (direction === 'prefix' || direction === 'any') {\n        for (let len = minLength; len <= cleanToken.length; len++) {\n          const substr = cleanToken.substring(0, len);\n          if (substr.length >= minLength) {\n            if (!substringFreq[substr]) {\n              substringFreq[substr] = {\n                count: 1,\n                tokens: [token],\n                direction: 'prefix'\n              };\n            } else if (!substringFreq[substr].tokens.includes(token)) {\n              substringFreq[substr].count++;\n              substringFreq[substr].tokens.push(token);\n              if (substringFreq[substr].direction !== 'prefix') {\n                substringFreq[substr].direction = 'both';\n              }\n            }\n          }\n        }\n      }\n\n      // Handle suffixes\n      if (direction === 'suffix' || direction === 'any') {\n        for (let len = minLength; len <= cleanToken.length; len++) {\n          const substr = cleanToken.substring(cleanToken.length - len);\n          if (substr.length >= minLength) {\n            if (!substringFreq[substr]) {\n              substringFreq[substr] = {\n                count: 1,\n                tokens: [token],\n                direction: 'suffix'\n              };\n            } else if (!substringFreq[substr].tokens.includes(token)) {\n              substringFreq[substr].count++;\n              substringFreq[substr].tokens.push(token);\n              if (substringFreq[substr].direction !== 'suffix') {\n                substringFreq[substr].direction = 'both';\n              }\n            }\n          }\n        }\n      }\n\n      // Remove middle substring handling as requested - only prefix and suffix are allowed\n    });\n\n    // Filter and sort results - improved to better capture meaningful patterns\n    return Object.entries(substringFreq).filter(([substr, data]) => {\n      // Base filter: meet minimum count\n      const baseFilter = data.count >= minCount;\n\n      // Give priority to Korean character patterns and units\n      const isKorean = /[\\uAC00-\\uD7A3]/.test(substr);\n      const isUnit = /^[a-zA-Z]+$/.test(substr) && substr.length <= 3;\n\n      // Special handling for single characters\n      if (substr.length === 1) {\n        // For Korean single characters, they are more likely meaningful\n        if (isKorean) {\n          return baseFilter && data.count >= 2;\n        }\n        // For non-Korean, require higher frequency\n        const coverage = data.tokens.length / tokens.length * 100;\n        return baseFilter && (coverage >= 25 || data.count >= 3);\n      }\n\n      // Give more weight to units (like kg, g, etc.)\n      if (isUnit && data.count >= 2 && data.direction === 'suffix') {\n        return true;\n      }\n\n      // Give more weight to substrings with Korean characters\n      if (isKorean && substr.length >= 2) {\n        return baseFilter && data.count >= 2;\n      }\n      return baseFilter;\n    }).sort((a, b) => {\n      // First prioritize units like kg, g\n      const aIsUnit = /^[a-zA-Z]+$/.test(a[0]) && a[0].length <= 3 && a[1].direction === 'suffix';\n      const bIsUnit = /^[a-zA-Z]+$/.test(b[0]) && b[0].length <= 3 && b[1].direction === 'suffix';\n      if (aIsUnit && !bIsUnit) return -1;\n      if (!aIsUnit && bIsUnit) return 1;\n\n      // Then prioritize Korean patterns\n      const aIsKorean = /[\\uAC00-\\uD7A3]/.test(a[0]);\n      const bIsKorean = /[\\uAC00-\\uD7A3]/.test(b[0]);\n      if (aIsKorean && !bIsKorean) return -1;\n      if (!aIsKorean && bIsKorean) return 1;\n\n      // Then by token count (descending)\n      const countDiff = b[1].count - a[1].count;\n      if (countDiff !== 0) return countDiff;\n\n      // Then by length (descending)\n      const lengthDiff = b[0].length - a[0].length;\n      if (lengthDiff !== 0) return lengthDiff;\n\n      // Finally by alphabetical order\n      return a[0].localeCompare(b[0]);\n    }).map(([substr, data]) => ({\n      substring: substr,\n      count: data.count,\n      tokens: data.tokens,\n      direction: data.direction,\n      percentCoverage: data.tokens.length / tokens.length * 100,\n      isKorean: /[\\uAC00-\\uD7A3]/.test(substr),\n      isUnit: /^[a-zA-Z]+$/.test(substr) && substr.length <= 3 && data.direction === 'suffix'\n    }));\n  },\n  // Analyze compound word relationships\n  analyzeCompoundRelationships: tokens => {\n    const relationships = [];\n\n    // Compare all token pairs\n    for (let i = 0; i < tokens.length; i++) {\n      const token1 = tokens[i].replace('[괄호] ', '');\n      for (let j = 0; j < tokens.length; j++) {\n        if (i === j) continue;\n        const token2 = tokens[j].replace('[괄호] ', '');\n\n        // Check if token1 is part of token2\n        if (token2.includes(token1)) {\n          const position = token2.indexOf(token1);\n          const beforeChar = position > 0 ? token2[position - 1] : '';\n          const afterChar = position + token1.length < token2.length ? token2[position + token1.length] : '';\n\n          // Check if it's at a word boundary or Korean characters (more flexible for Korean)\n          const isKorean = /[\\uAC00-\\uD7A3]/.test(token1);\n          const isWordBoundary = (position === 0 || beforeChar === ' ' || beforeChar === '-') && (position + token1.length === token2.length || afterChar === ' ' || afterChar === '-');\n\n          // For Korean patterns, be more lenient\n          if (isWordBoundary || isKorean && token1.length >= 1 || !isKorean && token1.length >= 2) {\n            relationships.push({\n              parent: tokens[j],\n              // Compound\n              child: tokens[i],\n              // Component\n              position: position // Position\n            });\n          }\n        }\n      }\n    }\n    return relationships;\n  },\n  // Find common words in tokens\n  findCommonWords: tokens => {\n    // This function specifically finds common Korean words and units\n    const wordFreq = {};\n    const wordRelations = [];\n\n    // Find measurement units (g, kg, etc.)\n    const unitRegex = /(\\d+(?:\\.\\d+)?)\\s*([a-zA-Z]+)$/;\n\n    // First pass: extract all units and words - ONLY at prefix or suffix positions\n    tokens.forEach(token => {\n      const cleanToken = token.replace('[괄호] ', '');\n\n      // Check for measurement units\n      const unitMatch = cleanToken.match(unitRegex);\n      if (unitMatch) {\n        const [_, value, unit] = unitMatch;\n        if (!wordFreq[unit]) {\n          wordFreq[unit] = {\n            count: 1,\n            tokens: [token],\n            isUnit: true\n          };\n        } else if (!wordFreq[unit].tokens.includes(token)) {\n          wordFreq[unit].count++;\n          wordFreq[unit].tokens.push(token);\n\n          // Record relationship\n          wordRelations.push({\n            word: unit,\n            token: token,\n            position: cleanToken.indexOf(unit),\n            isUnit: true\n          });\n        }\n      }\n\n      // Look for Korean character sequences - ONLY at start and end positions\n      for (let len = 1; len <= 3; len++) {\n        if (len <= cleanToken.length) {\n          // Prefix (start position)\n          const prefixWord = cleanToken.substring(0, len);\n          if (/^[\\uAC00-\\uD7A3]+$/.test(prefixWord)) {\n            if (!wordFreq[prefixWord]) {\n              wordFreq[prefixWord] = {\n                count: 1,\n                tokens: [token],\n                isUnit: false,\n                direction: 'prefix'\n              };\n            } else if (!wordFreq[prefixWord].tokens.includes(token)) {\n              wordFreq[prefixWord].count++;\n              wordFreq[prefixWord].tokens.push(token);\n\n              // Record relationship\n              wordRelations.push({\n                word: prefixWord,\n                token: token,\n                position: 0,\n                // Always at start\n                isUnit: false,\n                direction: 'prefix'\n              });\n            }\n          }\n\n          // Suffix (end position)\n          const suffixWord = cleanToken.substring(cleanToken.length - len);\n          if (/^[\\uAC00-\\uD7A3]+$/.test(suffixWord)) {\n            if (!wordFreq[suffixWord]) {\n              wordFreq[suffixWord] = {\n                count: 1,\n                tokens: [token],\n                isUnit: false,\n                direction: 'suffix'\n              };\n            } else if (!wordFreq[suffixWord].tokens.includes(token)) {\n              wordFreq[suffixWord].count++;\n              wordFreq[suffixWord].tokens.push(token);\n\n              // Record relationship\n              wordRelations.push({\n                word: suffixWord,\n                token: token,\n                position: cleanToken.length - len,\n                // Position at end\n                isUnit: false,\n                direction: 'suffix'\n              });\n            }\n          }\n        }\n      }\n    });\n\n    // Filter to only keep words that appear in multiple tokens\n    const commonWords = Object.entries(wordFreq).filter(([word, data]) => data.count >= 2).sort((a, b) => {\n      // Prioritize units\n      if (a[1].isUnit && !b[1].isUnit) return -1;\n      if (!a[1].isUnit && b[1].isUnit) return 1;\n\n      // Sort by frequency first\n      const countDiff = b[1].count - a[1].count;\n      if (countDiff !== 0) return countDiff;\n\n      // Then by length (prefer longer words)\n      return b[0].length - a[0].length;\n    }).map(([word, data]) => ({\n      word,\n      count: data.count,\n      tokens: data.tokens,\n      isUnit: data.isUnit,\n      direction: data.direction\n    }));\n\n    // Group the relationships by common word\n    const wordGroups = [];\n    commonWords.forEach(commonWord => {\n      const relatedTokens = wordRelations.filter(rel => rel.word === commonWord.word).map(rel => ({\n        token: rel.token,\n        position: rel.position,\n        isUnit: rel.isUnit,\n        direction: rel.direction\n      }));\n      wordGroups.push({\n        word: commonWord.word,\n        count: commonWord.count,\n        tokens: commonWord.tokens,\n        relations: relatedTokens,\n        isUnit: commonWord.isUnit,\n        direction: commonWord.direction\n      });\n    });\n    return wordGroups;\n  },\n  // Select optimal substrings for grouping\n  selectOptimalSubstrings: (substrings, tokens, compoundRel, maxGroups = 15) => {\n    // First, identify important Korean substrings\n    const koreanSubstrings = substrings.filter(substr => substr.isKorean && substr.count >= 2);\n\n    // Sort by coverage and importance\n    const sortedSubstrings = [...substrings].sort((a, b) => {\n      // Prioritize Korean patterns\n      if (a.isKorean && !b.isKorean) return -1;\n      if (!a.isKorean && b.isKorean) return 1;\n\n      // Prioritize substrings that have compound relationships\n      const hasCompoundA = compoundRel.some(rel => rel.parent.includes(a.substring) || rel.child.includes(a.substring));\n      const hasCompoundB = compoundRel.some(rel => rel.parent.includes(b.substring) || rel.child.includes(b.substring));\n      if (hasCompoundA && !hasCompoundB) return -1;\n      if (!hasCompoundA && hasCompoundB) return 1;\n\n      // Score based on count and length\n      // Modified to give more weight to meaningful substrings (e.g., \"등급\", \"자연\")\n      const scoreA = a.count * (a.isKorean ? Math.pow(a.substring.length, 1.5) : a.substring.length);\n      const scoreB = b.count * (b.isKorean ? Math.pow(b.substring.length, 1.5) : b.substring.length);\n      return scoreB - scoreA;\n    });\n    const selectedSubstrings = [];\n    const coveredTokens = new Set();\n\n    // First, include important Korean substrings\n    for (const substr of koreanSubstrings) {\n      if (substr.substring.length >= 1 && substr.count >= 2) {\n        // Check if this is a meaningful Korean term\n        if (/[가-힣]{1,}/.test(substr.substring)) {\n          selectedSubstrings.push(substr);\n\n          // Update covered tokens\n          substr.tokens.forEach(token => coveredTokens.add(token));\n\n          // Limit Korean groups\n          if (selectedSubstrings.length >= Math.ceil(maxGroups * 0.6)) break;\n        }\n      }\n    }\n\n    // Then add other important substrings\n    for (const substr of sortedSubstrings) {\n      // Skip if already selected\n      if (selectedSubstrings.some(s => s.substring === substr.substring)) {\n        continue;\n      }\n\n      // Check if this covers new tokens\n      const newCoverage = substr.tokens.some(token => !coveredTokens.has(token));\n\n      // Selection criteria - relaxed for Korean patterns\n      const isImportantSubstr = substr.isKorean && substr.count >= 2 || substr.substring.length >= 2 && substr.count >= 3;\n      const isHighSupportSingleChar = substr.substring.length === 1 && substr.count >= Math.max(3, tokens.length * 0.15);\n      if (newCoverage || isImportantSubstr || isHighSupportSingleChar) {\n        selectedSubstrings.push(substr);\n\n        // Update covered tokens\n        substr.tokens.forEach(token => coveredTokens.add(token));\n      }\n\n      // Limit groups\n      if (selectedSubstrings.length >= maxGroups) break;\n    }\n    return selectedSubstrings;\n  },\n  // Form compound word relationship groups\n  formCompoundGroups: relationships => {\n    // Group by parent token\n    const compoundGroups = {};\n    relationships.forEach(rel => {\n      const parentToken = rel.parent;\n      if (!compoundGroups[parentToken]) {\n        compoundGroups[parentToken] = {\n          parent: parentToken,\n          children: [rel.child],\n          positions: [rel.position]\n        };\n      } else if (!compoundGroups[parentToken].children.includes(rel.child)) {\n        compoundGroups[parentToken].children.push(rel.child);\n        compoundGroups[parentToken].positions.push(rel.position);\n      }\n    });\n\n    // Sort by number of children (descending)\n    return Object.values(compoundGroups).sort((a, b) => b.children.length - a.children.length).filter(group => group.children.length >= 2) // At least 2 children\n    .slice(0, 5); // Top 5 only\n  }\n};\n\n// Main component for classification results\nconst SeparationClassifier = ({\n  data,\n  onReset\n}) => {\n  // Empty data handling\n  if (!data || !data.rows || data.rows.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"separation-empty\",\n      children: \"No data to classify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Process and classify the data\n  const processData = () => {\n    const {\n      bracketValues,\n      normalValues\n    } = textUtils.extractTokens(data.rows);\n\n    // No results case\n    if (bracketValues.length === 0 && normalValues.length === 0) {\n      return {\n        headers: [\"Group\", \"Token\"],\n        rows: [[\"\", \"분리된 값이 없습니다\"]]\n      };\n    }\n\n    // All tokens\n    const allMinTokens = [...bracketValues, ...normalValues];\n\n    // Find common Korean words in tokens\n    const commonWordGroups = textUtils.findCommonWords(allMinTokens);\n\n    // Analyze compound relationships\n    const compoundRelationships = textUtils.analyzeCompoundRelationships(allMinTokens);\n\n    // Get directional substrings\n    const prefixSubstrings = textUtils.findCommonSubstrings(allMinTokens, 1, 2, 'prefix');\n    const suffixSubstrings = textUtils.findCommonSubstrings(allMinTokens, 1, 2, 'suffix');\n\n    // Select optimal substrings\n    const optimalPrefixSubstrings = textUtils.selectOptimalSubstrings(prefixSubstrings, allMinTokens, compoundRelationships, 8);\n    const optimalSuffixSubstrings = textUtils.selectOptimalSubstrings(suffixSubstrings, allMinTokens, compoundRelationships, 8);\n\n    // Build compound groups\n    const compoundGroups = textUtils.formCompoundGroups(compoundRelationships);\n\n    // Build results data structure\n    const finalRows = [];\n\n    // 1. Prefix groups\n    finalRows.push([\"🌲 접두사 기준 그룹 (앞글자순)\", \"\"]);\n    optimalPrefixSubstrings.forEach(group => {\n      finalRows.push([`📌 앞부분: ${group.substring} (${group.count})`, \"\"]);\n      const groupTokens = group.tokens.sort((a, b) => {\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        return a.localeCompare(b);\n      });\n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      finalRows.push([\"\", \"\"]);\n    });\n\n    // 2. Suffix groups\n    finalRows.push([\"🌲 접미사 기준 그룹 (뒷글자순)\", \"\"]);\n    optimalSuffixSubstrings.forEach(group => {\n      finalRows.push([`📌 뒷부분: ${group.substring} (${group.count})`, \"\"]);\n      const groupTokens = group.tokens.sort((a, b) => {\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        return textUtils.reverseString(a.replace('[괄호] ', '')).localeCompare(textUtils.reverseString(b.replace('[괄호] ', '')));\n      });\n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      finalRows.push([\"\", \"\"]);\n    });\n\n    // 3. Common Korean word groups\n    if (commonWordGroups.length > 0) {\n      finalRows.push([\"🌲 단어 기준 그룹\", \"\"]);\n      commonWordGroups.forEach(group => {\n        // Skip if too few tokens or already covered well by other groups\n        if (group.count < 2 || group.word.length < 1) return;\n        finalRows.push([`📌 단어: ${group.word} (${group.count})`, \"\"]);\n\n        // Sort tokens\n        const sortedTokens = [...group.tokens].sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          return a.localeCompare(b);\n        });\n        sortedTokens.forEach(token => {\n          // Find position\n          const relation = group.relations.find(r => r.token === token);\n          const position = relation ? relation.position : -1;\n          const cleanToken = token.replace('[괄호] ', '');\n          let positionMarker = '';\n          if (position === 0) {\n            positionMarker = '⬅️ 처음';\n          } else if (position + group.word.length === cleanToken.length) {\n            positionMarker = '➡️ 끝';\n          } else if (position > 0) {\n            positionMarker = '⬇️ 중간';\n          }\n          finalRows.push([`└─ ${positionMarker.length > 0 ? `[${positionMarker}]` : ''}`, token]);\n        });\n        finalRows.push([\"\", \"\"]);\n      });\n    }\n\n    // 4. Compound relationships\n    if (compoundGroups.length > 0) {\n      finalRows.push([\"🌲 복합어 관계 그룹\", \"\"]);\n      compoundGroups.forEach(group => {\n        finalRows.push([`📌 복합어: ${group.parent.replace('[괄호] ', '')} (${group.children.length})`, group.parent]);\n        group.children.forEach((child, idx) => {\n          const position = group.positions[idx];\n          const parentClean = group.parent.replace('[괄호] ', '');\n          const childClean = child.replace('[괄호] ', '');\n          let positionMarker = '';\n          if (position === 0) {\n            positionMarker = '⬅️ 시작 부분';\n          } else if (position + childClean.length === parentClean.length) {\n            positionMarker = '➡️ 끝 부분';\n          } else {\n            positionMarker = '⬇️ 중간 부분';\n          }\n          finalRows.push([`└─ [${positionMarker}]`, child]);\n        });\n        finalRows.push([\"\", \"\"]);\n      });\n    }\n\n    // 5. Ungrouped tokens\n    const allGroupedTokens = new Set();\n    optimalPrefixSubstrings.forEach(group => group.tokens.forEach(token => allGroupedTokens.add(token)));\n    optimalSuffixSubstrings.forEach(group => group.tokens.forEach(token => allGroupedTokens.add(token)));\n    commonWordGroups.forEach(group => group.tokens.forEach(token => allGroupedTokens.add(token)));\n    compoundGroups.forEach(group => {\n      allGroupedTokens.add(group.parent);\n      group.children.forEach(child => allGroupedTokens.add(child));\n    });\n    const ungroupedTokens = allMinTokens.filter(token => !allGroupedTokens.has(token)).sort();\n    if (ungroupedTokens.length > 0) {\n      finalRows.push([\"🌲 미분류 토큰\", \"\"]);\n      ungroupedTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n    }\n    return {\n      prefixGroups: optimalPrefixSubstrings.map(group => ({\n        substring: group.substring,\n        count: group.count,\n        tokens: group.tokens.sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          return a.localeCompare(b);\n        })\n      })),\n      suffixGroups: optimalSuffixSubstrings.map(group => ({\n        substring: group.substring,\n        count: group.count,\n        tokens: group.tokens.sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          return textUtils.reverseString(a.replace('[괄호] ', '')).localeCompare(textUtils.reverseString(b.replace('[괄호] ', '')));\n        })\n      })),\n      wordGroups: commonWordGroups.filter(group => group.count >= 2 && group.word.length >= 1).map(group => ({\n        word: group.word,\n        count: group.count,\n        tokens: group.tokens.sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          return a.localeCompare(b);\n        }),\n        relations: group.relations\n      })),\n      compoundGroups,\n      ungroupedTokens\n    };\n  };\n\n  // Processed classification data\n  const classificationData = processData();\n\n  // Render tree node with children\n  const renderTreeNode = (label, children, nodeType, nodeSubtype = '') => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `tree-node ${nodeType} ${nodeSubtype}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node-label\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 710,\n      columnNumber: 7\n    }, this), children && children.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-node-children\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 712,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 709,\n    columnNumber: 5\n  }, this);\n\n  // Render token node (leaf)\n  const renderTokenNode = token => {\n    const isBracketContent = String(token).startsWith('[괄호]');\n    let displayContent = token;\n    if (isBracketContent) {\n      displayContent = /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"bracket-indicator\",\n          children: \"\\u2282\\u2283\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 727,\n          columnNumber: 11\n        }, this), String(token).replace('[괄호] ', '')]\n      }, void 0, true);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `token-node ${isBracketContent ? 'bracket-content' : ''}`,\n      children: displayContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 734,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render position indicator for tokens\n  const renderPositionIndicator = (position, direction) => {\n    if (direction === 'prefix' || position === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"position-indicator position-start\",\n        children: \"\\u2B05\\uFE0F \\uCC98\\uC74C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 14\n      }, this);\n    } else if (direction === 'suffix') {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"position-indicator position-end\",\n        children: \"\\u27A1\\uFE0F \\uB05D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 745,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n\n  // Render the classification results with dendrogram-style visualization\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"separation-classifier\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"classifier-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\uBD84\\uB9AC\\uBD84\\uB958 \\uACB0\\uACFC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: onReset,\n        title: \"\\uC6D0\\uBCF8 \\uB370\\uC774\\uD130\\uB85C \\uBCF5\\uC6D0\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"\\uD83D\\uDD04 \\uC6D0\\uBCF8\\uC73C\\uB85C \\uBCF5\\uC6D0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dendrogram-container\",\n      children: [classificationData.wordGroups && classificationData.wordGroups.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-category\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-category-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83C\\uDF32 \\uB2E8\\uC5B4 \\uAE30\\uC900 \\uADF8\\uB8F9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 765,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 764,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-content\",\n          children: classificationData.wordGroups.map((group, idx) => {\n            // Skip groups where the word is not at start or end of all tokens\n            if (!group.isUnit && !group.direction) {\n              return null;\n            }\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group-tree\",\n              children: renderTreeNode(/*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"group-marker\",\n                  children: \"\\uD83D\\uDCCC\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 777,\n                  columnNumber: 25\n                }, this), \" \", group.isUnit ? `단위: ${group.word}` : group.direction === 'prefix' ? `앞부분 단어: ${group.word}` : group.direction === 'suffix' ? `뒷부분 단어: ${group.word}` : `단어: ${group.word}`, /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"count-badge\",\n                  children: [\"(\", group.count, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 780,\n                  columnNumber: 26\n                }, this)]\n              }, void 0, true), group.tokens.map((token, tokenIdx) => {\n                // Find position info\n                const relation = group.relations.find(r => r.token === token);\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tree-branch with-position\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"branch-line\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 787,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"branch-content\",\n                    children: [!group.isUnit && relation && renderPositionIndicator(relation.position, relation.direction), renderTokenNode(token)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 788,\n                    columnNumber: 29\n                  }, this)]\n                }, `word-${idx}-token-${tokenIdx}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 786,\n                  columnNumber: 27\n                }, this);\n              }), 'group-node', group.isUnit ? 'unit-group' : group.direction === 'prefix' ? 'prefix-word-group' : group.direction === 'suffix' ? 'suffix-word-group' : 'word-group')\n            }, `word-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 775,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-category\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-category-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83C\\uDF32 \\uC811\\uB450\\uC0AC \\uAE30\\uC900 \\uADF8\\uB8F9 (\\uC55E\\uAE00\\uC790\\uC21C)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 809,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-content\",\n          children: classificationData.prefixGroups.map((group, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-tree\",\n            children: renderTreeNode(/*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"group-marker\",\n                children: \"\\uD83D\\uDCCC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 21\n              }, this), \" \\uC55E\\uBD80\\uBD84: \", group.substring, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"count-badge\",\n                children: [\"(\", group.count, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 816,\n                columnNumber: 85\n              }, this)]\n            }, void 0, true), group.tokens.map((token, tokenIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-branch\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"branch-line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 819,\n                columnNumber: 23\n              }, this), renderTokenNode(token)]\n            }, `prefix-${idx}-token-${tokenIdx}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 818,\n              columnNumber: 21\n            }, this)), 'group-node', 'prefix-group')\n          }, `prefix-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 814,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 812,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 808,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-category\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-category-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83C\\uDF32 \\uC811\\uBBF8\\uC0AC \\uAE30\\uC900 \\uADF8\\uB8F9 (\\uB4B7\\uAE00\\uC790\\uC21C)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 834,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 833,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-content\",\n          children: classificationData.suffixGroups.map((group, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"group-tree\",\n            children: renderTreeNode(/*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"group-marker\",\n                children: \"\\uD83D\\uDCCC\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 21\n              }, this), \" \\uB4B7\\uBD80\\uBD84: \", group.substring, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"count-badge\",\n                children: [\"(\", group.count, \")\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 840,\n                columnNumber: 85\n              }, this)]\n            }, void 0, true), group.tokens.map((token, tokenIdx) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tree-branch\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"branch-line\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 843,\n                columnNumber: 23\n              }, this), renderTokenNode(token)]\n            }, `suffix-${idx}-token-${tokenIdx}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 842,\n              columnNumber: 21\n            }, this)), 'group-node', 'suffix-group')\n          }, `suffix-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 838,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 836,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 9\n      }, this), classificationData.compoundGroups && classificationData.compoundGroups.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-category\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-category-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83C\\uDF32 \\uBCF5\\uD569\\uC5B4 \\uAD00\\uACC4 \\uADF8\\uB8F9\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 859,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 858,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-content\",\n          children: classificationData.compoundGroups.map((group, idx) => {\n            const parentClean = group.parent.replace('[괄호] ', '');\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"group-tree\",\n              children: renderTreeNode(/*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"group-marker\",\n                  children: \"\\uD83D\\uDCCC\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 868,\n                  columnNumber: 25\n                }, this), \" \\uBCF5\\uD569\\uC5B4: \", parentClean, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"count-badge\",\n                  children: [\"(\", group.children.length, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 868,\n                  columnNumber: 85\n                }, this)]\n              }, void 0, true), group.children.map((child, childIdx) => {\n                const position = group.positions[childIdx];\n                const childClean = child.replace('[괄호] ', '');\n                return /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"tree-branch with-position\",\n                  children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"branch-line\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 875,\n                    columnNumber: 29\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"branch-content\",\n                    children: [position === 0 ? /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"position-indicator position-start\",\n                      children: \"\\u2B05\\uFE0F \\uCC98\\uC74C\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 878,\n                      columnNumber: 33\n                    }, this) : position + childClean.length === parentClean.length ? /*#__PURE__*/_jsxDEV(\"span\", {\n                      className: \"position-indicator position-end\",\n                      children: \"\\u27A1\\uFE0F \\uB05D\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 880,\n                      columnNumber: 33\n                    }, this) : null, renderTokenNode(child)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 876,\n                    columnNumber: 29\n                  }, this)]\n                }, `compound-${idx}-child-${childIdx}`, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 874,\n                  columnNumber: 27\n                }, this);\n              }), 'group-node', 'compound-group')\n            }, `compound-${idx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 866,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 857,\n        columnNumber: 11\n      }, this), classificationData.ungroupedTokens && classificationData.ungroupedTokens.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tree-category\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-category-header\",\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\uD83C\\uDF32 \\uBBF8\\uBD84\\uB958 \\uD1A0\\uD070\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 901,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 900,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tree-content ungrouped-content\",\n          children: classificationData.ungroupedTokens.map((token, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"ungrouped-token\",\n            children: renderTokenNode(token)\n          }, `ungrouped-${idx}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 905,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 899,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 760,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 752,\n    columnNumber: 5\n  }, this);\n};\n_c = SeparationClassifier;\nexport default SeparationClassifier;\nvar _c;\n$RefreshReg$(_c, \"SeparationClassifier\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Fragment","_Fragment","textUtils","reverseString","str","split","reverse","join","extractTokens","dataRows","bracketSet","Set","valueSet","forEach","row","cellValue","undefined","String","trim","cellValueStr","bracketContentRegex","textWithoutBrackets","replace","match","p1","p2","p3","content","add","separatedValues","map","value","filter","length","bracketValues","Array","from","val","normalValues","findCommonSubstrings","tokens","minLength","minCount","direction","substringFreq","token","cleanToken","len","substr","substring","count","includes","push","Object","entries","data","baseFilter","isKorean","test","isUnit","coverage","sort","a","b","aIsUnit","bIsUnit","aIsKorean","bIsKorean","countDiff","lengthDiff","localeCompare","percentCoverage","analyzeCompoundRelationships","relationships","i","token1","j","token2","position","indexOf","beforeChar","afterChar","isWordBoundary","parent","child","findCommonWords","wordFreq","wordRelations","unitRegex","unitMatch","_","unit","word","prefixWord","suffixWord","commonWords","wordGroups","commonWord","relatedTokens","rel","relations","selectOptimalSubstrings","substrings","compoundRel","maxGroups","koreanSubstrings","sortedSubstrings","hasCompoundA","some","hasCompoundB","scoreA","Math","pow","scoreB","selectedSubstrings","coveredTokens","ceil","s","newCoverage","has","isImportantSubstr","isHighSupportSingleChar","max","formCompoundGroups","compoundGroups","parentToken","children","positions","values","group","slice","SeparationClassifier","onReset","rows","className","fileName","_jsxFileName","lineNumber","columnNumber","processData","headers","allMinTokens","commonWordGroups","compoundRelationships","prefixSubstrings","suffixSubstrings","optimalPrefixSubstrings","optimalSuffixSubstrings","finalRows","groupTokens","aIsBracket","startsWith","bIsBracket","sortedTokens","relation","find","r","positionMarker","idx","parentClean","childClean","allGroupedTokens","ungroupedTokens","prefixGroups","suffixGroups","classificationData","renderTreeNode","label","nodeType","nodeSubtype","renderTokenNode","isBracketContent","displayContent","renderPositionIndicator","onClick","title","tokenIdx","childIdx","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/SeparationClassifier.js"],"sourcesContent":["import React from 'react';\nimport './SeparationClassifier.css';\n\n// Utility functions for text processing\nconst textUtils = {\n  // String reversal utility\n  reverseString: (str) => str.split('').reverse().join(''),\n  \n  // Extract tokens from data rows\n  extractTokens: (dataRows) => {\n    const bracketSet = new Set();\n    const valueSet = new Set();\n    \n    dataRows.forEach(row => {\n      const cellValue = row[0];\n      \n      // Skip empty/null values\n      if (cellValue === null || cellValue === undefined || String(cellValue).trim() === '') {\n        return;\n      }\n      \n      const cellValueStr = String(cellValue);\n      \n      // 1. Handle bracket content with regex\n      const bracketContentRegex = /\\(([^)]*)\\)|\\[([^\\]]*)\\]|\\{([^}]*)\\}/g;\n      let textWithoutBrackets = cellValueStr.replace(bracketContentRegex, (match, p1, p2, p3) => {\n        const content = p1 || p2 || p3; \n        if (content && content.trim()) {\n          bracketSet.add(content.trim());\n        }\n        return ' '; \n      });\n      \n      // 2. Split by spaces and commas\n      const separatedValues = textWithoutBrackets\n        .split(/[\\s,]+/)\n        .map(value => value.trim())\n        .filter(value => value.length > 0);\n      \n      separatedValues.forEach(value => {\n        if (value && value.trim()) {\n          valueSet.add(value.trim());\n        }\n      });\n    });\n    \n    return {\n      bracketValues: Array.from(bracketSet).map(val => `[괄호] ${val}`),\n      normalValues: Array.from(valueSet),\n    };\n  },\n  \n  // Find common substring patterns\n  findCommonSubstrings: (tokens, minLength = 1, minCount = 2, direction = 'any') => {\n    // Track substring frequencies\n    const substringFreq = {};\n    \n    // Analyze all tokens\n    tokens.forEach(token => {\n      const cleanToken = token.replace('[괄호] ', '');\n      \n      // Handle prefixes\n      if (direction === 'prefix' || direction === 'any') {\n        for (let len = minLength; len <= cleanToken.length; len++) {\n          const substr = cleanToken.substring(0, len);\n          if (substr.length >= minLength) {\n            if (!substringFreq[substr]) {\n              substringFreq[substr] = { \n                count: 1, \n                tokens: [token],\n                direction: 'prefix'\n              };\n            } else if (!substringFreq[substr].tokens.includes(token)) {\n              substringFreq[substr].count++;\n              substringFreq[substr].tokens.push(token);\n              if (substringFreq[substr].direction !== 'prefix') {\n                substringFreq[substr].direction = 'both';\n              }\n            }\n          }\n        }\n      }\n      \n      // Handle suffixes\n      if (direction === 'suffix' || direction === 'any') {\n        for (let len = minLength; len <= cleanToken.length; len++) {\n          const substr = cleanToken.substring(cleanToken.length - len);\n          if (substr.length >= minLength) {\n            if (!substringFreq[substr]) {\n              substringFreq[substr] = { \n                count: 1, \n                tokens: [token],\n                direction: 'suffix'\n              };\n            } else if (!substringFreq[substr].tokens.includes(token)) {\n              substringFreq[substr].count++;\n              substringFreq[substr].tokens.push(token);\n              if (substringFreq[substr].direction !== 'suffix') {\n                substringFreq[substr].direction = 'both';\n              }\n            }\n          }\n        }\n      }\n      \n      // Remove middle substring handling as requested - only prefix and suffix are allowed\n    });\n    \n    // Filter and sort results - improved to better capture meaningful patterns\n    return Object.entries(substringFreq)\n      .filter(([substr, data]) => {\n        // Base filter: meet minimum count\n        const baseFilter = data.count >= minCount;\n        \n        // Give priority to Korean character patterns and units\n        const isKorean = /[\\uAC00-\\uD7A3]/.test(substr);\n        const isUnit = /^[a-zA-Z]+$/.test(substr) && substr.length <= 3;\n        \n        // Special handling for single characters\n        if (substr.length === 1) {\n          // For Korean single characters, they are more likely meaningful\n          if (isKorean) {\n            return baseFilter && (data.count >= 2);\n          }\n          // For non-Korean, require higher frequency\n          const coverage = (data.tokens.length / tokens.length) * 100;\n          return baseFilter && (coverage >= 25 || data.count >= 3);\n        }\n        \n        // Give more weight to units (like kg, g, etc.)\n        if (isUnit && data.count >= 2 && data.direction === 'suffix') {\n          return true;\n        }\n        \n        // Give more weight to substrings with Korean characters\n        if (isKorean && substr.length >= 2) {\n          return baseFilter && data.count >= 2;\n        }\n        \n        return baseFilter;\n      })\n      .sort((a, b) => {\n        // First prioritize units like kg, g\n        const aIsUnit = /^[a-zA-Z]+$/.test(a[0]) && a[0].length <= 3 && a[1].direction === 'suffix';\n        const bIsUnit = /^[a-zA-Z]+$/.test(b[0]) && b[0].length <= 3 && b[1].direction === 'suffix';\n        \n        if (aIsUnit && !bIsUnit) return -1;\n        if (!aIsUnit && bIsUnit) return 1;\n        \n        // Then prioritize Korean patterns\n        const aIsKorean = /[\\uAC00-\\uD7A3]/.test(a[0]);\n        const bIsKorean = /[\\uAC00-\\uD7A3]/.test(b[0]);\n        \n        if (aIsKorean && !bIsKorean) return -1;\n        if (!aIsKorean && bIsKorean) return 1;\n        \n        // Then by token count (descending)\n        const countDiff = b[1].count - a[1].count;\n        if (countDiff !== 0) return countDiff;\n        \n        // Then by length (descending)\n        const lengthDiff = b[0].length - a[0].length;\n        if (lengthDiff !== 0) return lengthDiff;\n        \n        // Finally by alphabetical order\n        return a[0].localeCompare(b[0]);\n      })\n      .map(([substr, data]) => ({\n        substring: substr,\n        count: data.count,\n        tokens: data.tokens,\n        direction: data.direction,\n        percentCoverage: (data.tokens.length / tokens.length) * 100,\n        isKorean: /[\\uAC00-\\uD7A3]/.test(substr),\n        isUnit: /^[a-zA-Z]+$/.test(substr) && substr.length <= 3 && data.direction === 'suffix'\n      }));\n  },\n  \n  // Analyze compound word relationships\n  analyzeCompoundRelationships: (tokens) => {\n    const relationships = [];\n    \n    // Compare all token pairs\n    for (let i = 0; i < tokens.length; i++) {\n      const token1 = tokens[i].replace('[괄호] ', '');\n      \n      for (let j = 0; j < tokens.length; j++) {\n        if (i === j) continue;\n        \n        const token2 = tokens[j].replace('[괄호] ', '');\n        \n        // Check if token1 is part of token2\n        if (token2.includes(token1)) {\n          const position = token2.indexOf(token1);\n          const beforeChar = position > 0 ? token2[position - 1] : '';\n          const afterChar = position + token1.length < token2.length ? token2[position + token1.length] : '';\n          \n          // Check if it's at a word boundary or Korean characters (more flexible for Korean)\n          const isKorean = /[\\uAC00-\\uD7A3]/.test(token1);\n          const isWordBoundary = (position === 0 || beforeChar === ' ' || beforeChar === '-') &&\n                                (position + token1.length === token2.length || afterChar === ' ' || afterChar === '-');\n          \n          // For Korean patterns, be more lenient\n          if (isWordBoundary || (isKorean && token1.length >= 1) || (!isKorean && token1.length >= 2)) {\n            relationships.push({\n              parent: tokens[j],   // Compound\n              child: tokens[i],    // Component\n              position: position   // Position\n            });\n          }\n        }\n      }\n    }\n    \n    return relationships;\n  },\n  \n  // Find common words in tokens\n  findCommonWords: (tokens) => {\n    // This function specifically finds common Korean words and units\n    const wordFreq = {};\n    const wordRelations = [];\n    \n    // Find measurement units (g, kg, etc.)\n    const unitRegex = /(\\d+(?:\\.\\d+)?)\\s*([a-zA-Z]+)$/;\n    \n    // First pass: extract all units and words - ONLY at prefix or suffix positions\n    tokens.forEach(token => {\n      const cleanToken = token.replace('[괄호] ', '');\n      \n      // Check for measurement units\n      const unitMatch = cleanToken.match(unitRegex);\n      if (unitMatch) {\n        const [_, value, unit] = unitMatch;\n        \n        if (!wordFreq[unit]) {\n          wordFreq[unit] = { count: 1, tokens: [token], isUnit: true };\n        } else if (!wordFreq[unit].tokens.includes(token)) {\n          wordFreq[unit].count++;\n          wordFreq[unit].tokens.push(token);\n          \n          // Record relationship\n          wordRelations.push({\n            word: unit,\n            token: token,\n            position: cleanToken.indexOf(unit),\n            isUnit: true\n          });\n        }\n      }\n      \n      // Look for Korean character sequences - ONLY at start and end positions\n      for (let len = 1; len <= 3; len++) {\n        if (len <= cleanToken.length) {\n          // Prefix (start position)\n          const prefixWord = cleanToken.substring(0, len);\n          if (/^[\\uAC00-\\uD7A3]+$/.test(prefixWord)) {\n            if (!wordFreq[prefixWord]) {\n              wordFreq[prefixWord] = { count: 1, tokens: [token], isUnit: false, direction: 'prefix' };\n            } else if (!wordFreq[prefixWord].tokens.includes(token)) {\n              wordFreq[prefixWord].count++;\n              wordFreq[prefixWord].tokens.push(token);\n              \n              // Record relationship\n              wordRelations.push({\n                word: prefixWord,\n                token: token,\n                position: 0, // Always at start\n                isUnit: false,\n                direction: 'prefix'\n              });\n            }\n          }\n          \n          // Suffix (end position)\n          const suffixWord = cleanToken.substring(cleanToken.length - len);\n          if (/^[\\uAC00-\\uD7A3]+$/.test(suffixWord)) {\n            if (!wordFreq[suffixWord]) {\n              wordFreq[suffixWord] = { count: 1, tokens: [token], isUnit: false, direction: 'suffix' };\n            } else if (!wordFreq[suffixWord].tokens.includes(token)) {\n              wordFreq[suffixWord].count++;\n              wordFreq[suffixWord].tokens.push(token);\n              \n              // Record relationship\n              wordRelations.push({\n                word: suffixWord,\n                token: token,\n                position: cleanToken.length - len, // Position at end\n                isUnit: false,\n                direction: 'suffix'\n              });\n            }\n          }\n        }\n      }\n    });\n    \n    // Filter to only keep words that appear in multiple tokens\n    const commonWords = Object.entries(wordFreq)\n      .filter(([word, data]) => data.count >= 2)\n      .sort((a, b) => {\n        // Prioritize units\n        if (a[1].isUnit && !b[1].isUnit) return -1;\n        if (!a[1].isUnit && b[1].isUnit) return 1;\n        \n        // Sort by frequency first\n        const countDiff = b[1].count - a[1].count;\n        if (countDiff !== 0) return countDiff;\n        \n        // Then by length (prefer longer words)\n        return b[0].length - a[0].length;\n      })\n      .map(([word, data]) => ({\n        word,\n        count: data.count,\n        tokens: data.tokens,\n        isUnit: data.isUnit,\n        direction: data.direction\n      }));\n    \n    // Group the relationships by common word\n    const wordGroups = [];\n    \n    commonWords.forEach(commonWord => {\n      const relatedTokens = wordRelations\n        .filter(rel => rel.word === commonWord.word)\n        .map(rel => ({\n          token: rel.token,\n          position: rel.position,\n          isUnit: rel.isUnit,\n          direction: rel.direction\n        }));\n      \n      wordGroups.push({\n        word: commonWord.word,\n        count: commonWord.count,\n        tokens: commonWord.tokens,\n        relations: relatedTokens,\n        isUnit: commonWord.isUnit,\n        direction: commonWord.direction\n      });\n    });\n    \n    return wordGroups;\n  },\n  \n  // Select optimal substrings for grouping\n  selectOptimalSubstrings: (substrings, tokens, compoundRel, maxGroups = 15) => {\n    // First, identify important Korean substrings\n    const koreanSubstrings = substrings.filter(substr => \n      substr.isKorean && substr.count >= 2);\n    \n    // Sort by coverage and importance\n    const sortedSubstrings = [...substrings]\n      .sort((a, b) => {\n        // Prioritize Korean patterns\n        if (a.isKorean && !b.isKorean) return -1;\n        if (!a.isKorean && b.isKorean) return 1;\n        \n        // Prioritize substrings that have compound relationships\n        const hasCompoundA = compoundRel.some(rel => \n          rel.parent.includes(a.substring) || rel.child.includes(a.substring));\n        const hasCompoundB = compoundRel.some(rel => \n          rel.parent.includes(b.substring) || rel.child.includes(b.substring));\n        \n        if (hasCompoundA && !hasCompoundB) return -1;\n        if (!hasCompoundA && hasCompoundB) return 1;\n        \n        // Score based on count and length\n        // Modified to give more weight to meaningful substrings (e.g., \"등급\", \"자연\")\n        const scoreA = a.count * (a.isKorean ? Math.pow(a.substring.length, 1.5) : a.substring.length);\n        const scoreB = b.count * (b.isKorean ? Math.pow(b.substring.length, 1.5) : b.substring.length);\n        return scoreB - scoreA;\n      });\n    \n    const selectedSubstrings = [];\n    const coveredTokens = new Set();\n    \n    // First, include important Korean substrings\n    for (const substr of koreanSubstrings) {\n      if (substr.substring.length >= 1 && substr.count >= 2) {\n        // Check if this is a meaningful Korean term\n        if (/[가-힣]{1,}/.test(substr.substring)) {\n          selectedSubstrings.push(substr);\n          \n          // Update covered tokens\n          substr.tokens.forEach(token => coveredTokens.add(token));\n          \n          // Limit Korean groups\n          if (selectedSubstrings.length >= Math.ceil(maxGroups * 0.6)) break;\n        }\n      }\n    }\n    \n    // Then add other important substrings\n    for (const substr of sortedSubstrings) {\n      // Skip if already selected\n      if (selectedSubstrings.some(s => s.substring === substr.substring)) {\n        continue;\n      }\n      \n      // Check if this covers new tokens\n      const newCoverage = substr.tokens.some(token => !coveredTokens.has(token));\n      \n      // Selection criteria - relaxed for Korean patterns\n      const isImportantSubstr = \n        (substr.isKorean && substr.count >= 2) || \n        (substr.substring.length >= 2 && substr.count >= 3);\n      \n      const isHighSupportSingleChar = \n        substr.substring.length === 1 && \n        substr.count >= Math.max(3, tokens.length * 0.15);\n      \n      if (newCoverage || isImportantSubstr || isHighSupportSingleChar) {\n        selectedSubstrings.push(substr);\n        \n        // Update covered tokens\n        substr.tokens.forEach(token => coveredTokens.add(token));\n      }\n      \n      // Limit groups\n      if (selectedSubstrings.length >= maxGroups) break;\n    }\n    \n    return selectedSubstrings;\n  },\n  \n  // Form compound word relationship groups\n  formCompoundGroups: (relationships) => {\n    // Group by parent token\n    const compoundGroups = {};\n    \n    relationships.forEach(rel => {\n      const parentToken = rel.parent;\n      if (!compoundGroups[parentToken]) {\n        compoundGroups[parentToken] = {\n          parent: parentToken,\n          children: [rel.child],\n          positions: [rel.position]\n        };\n      } else if (!compoundGroups[parentToken].children.includes(rel.child)) {\n        compoundGroups[parentToken].children.push(rel.child);\n        compoundGroups[parentToken].positions.push(rel.position);\n      }\n    });\n    \n    // Sort by number of children (descending)\n    return Object.values(compoundGroups)\n      .sort((a, b) => b.children.length - a.children.length)\n      .filter(group => group.children.length >= 2) // At least 2 children\n      .slice(0, 5); // Top 5 only\n  }\n};\n\n// Main component for classification results\nconst SeparationClassifier = ({ data, onReset }) => {\n  // Empty data handling\n  if (!data || !data.rows || data.rows.length === 0) {\n    return <div className=\"separation-empty\">No data to classify</div>;\n  }\n  \n  // Process and classify the data\n  const processData = () => {\n    const { bracketValues, normalValues } = textUtils.extractTokens(data.rows);\n    \n    // No results case\n    if (bracketValues.length === 0 && normalValues.length === 0) {\n      return {\n        headers: [\"Group\", \"Token\"],\n        rows: [[\"\", \"분리된 값이 없습니다\"]]\n      };\n    }\n    \n    // All tokens\n    const allMinTokens = [...bracketValues, ...normalValues];\n    \n    // Find common Korean words in tokens\n    const commonWordGroups = textUtils.findCommonWords(allMinTokens);\n    \n    // Analyze compound relationships\n    const compoundRelationships = textUtils.analyzeCompoundRelationships(allMinTokens);\n    \n    // Get directional substrings\n    const prefixSubstrings = textUtils.findCommonSubstrings(allMinTokens, 1, 2, 'prefix');\n    const suffixSubstrings = textUtils.findCommonSubstrings(allMinTokens, 1, 2, 'suffix');\n    \n    // Select optimal substrings\n    const optimalPrefixSubstrings = textUtils.selectOptimalSubstrings(\n      prefixSubstrings, allMinTokens, compoundRelationships, 8\n    );\n    const optimalSuffixSubstrings = textUtils.selectOptimalSubstrings(\n      suffixSubstrings, allMinTokens, compoundRelationships, 8\n    );\n    \n    // Build compound groups\n    const compoundGroups = textUtils.formCompoundGroups(compoundRelationships);\n    \n    // Build results data structure\n    const finalRows = [];\n    \n    // 1. Prefix groups\n    finalRows.push([\"🌲 접두사 기준 그룹 (앞글자순)\", \"\"]);\n    \n    optimalPrefixSubstrings.forEach(group => {\n      finalRows.push([`📌 앞부분: ${group.substring} (${group.count})`, \"\"]);\n      \n      const groupTokens = group.tokens.sort((a, b) => {\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        \n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        \n        return a.localeCompare(b);\n      });\n      \n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      \n      finalRows.push([\"\", \"\"]);\n    });\n    \n    // 2. Suffix groups\n    finalRows.push([\"🌲 접미사 기준 그룹 (뒷글자순)\", \"\"]);\n    \n    optimalSuffixSubstrings.forEach(group => {\n      finalRows.push([`📌 뒷부분: ${group.substring} (${group.count})`, \"\"]);\n      \n      const groupTokens = group.tokens.sort((a, b) => {\n        const aIsBracket = a.startsWith('[괄호]');\n        const bIsBracket = b.startsWith('[괄호]');\n        \n        if (aIsBracket && !bIsBracket) return -1;\n        if (!aIsBracket && bIsBracket) return 1;\n        \n        return textUtils.reverseString(a.replace('[괄호] ', '')).localeCompare(\n          textUtils.reverseString(b.replace('[괄호] ', ''))\n        );\n      });\n      \n      groupTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n      \n      finalRows.push([\"\", \"\"]);\n    });\n    \n    // 3. Common Korean word groups\n    if (commonWordGroups.length > 0) {\n      finalRows.push([\"🌲 단어 기준 그룹\", \"\"]);\n      \n      commonWordGroups.forEach(group => {\n        // Skip if too few tokens or already covered well by other groups\n        if (group.count < 2 || group.word.length < 1) return;\n        \n        finalRows.push([\n          `📌 단어: ${group.word} (${group.count})`, \n          \"\"\n        ]);\n        \n        // Sort tokens\n        const sortedTokens = [...group.tokens].sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          \n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          \n          return a.localeCompare(b);\n        });\n        \n        sortedTokens.forEach(token => {\n          // Find position\n          const relation = group.relations.find(r => r.token === token);\n          const position = relation ? relation.position : -1;\n          const cleanToken = token.replace('[괄호] ', '');\n          \n          let positionMarker = '';\n          if (position === 0) {\n            positionMarker = '⬅️ 처음';\n          } else if (position + group.word.length === cleanToken.length) {\n            positionMarker = '➡️ 끝';\n          } else if (position > 0) {\n            positionMarker = '⬇️ 중간';\n          }\n          \n          finalRows.push([`└─ ${positionMarker.length > 0 ? `[${positionMarker}]` : ''}`, token]);\n        });\n        \n        finalRows.push([\"\", \"\"]);\n      });\n    }\n    \n    // 4. Compound relationships\n    if (compoundGroups.length > 0) {\n      finalRows.push([\"🌲 복합어 관계 그룹\", \"\"]);\n      \n      compoundGroups.forEach(group => {\n        finalRows.push([\n          `📌 복합어: ${group.parent.replace('[괄호] ', '')} (${group.children.length})`, \n          group.parent\n        ]);\n        \n        group.children.forEach((child, idx) => {\n          const position = group.positions[idx];\n          const parentClean = group.parent.replace('[괄호] ', '');\n          const childClean = child.replace('[괄호] ', '');\n          \n          let positionMarker = '';\n          if (position === 0) {\n            positionMarker = '⬅️ 시작 부분';\n          } else if (position + childClean.length === parentClean.length) {\n            positionMarker = '➡️ 끝 부분';\n          } else {\n            positionMarker = '⬇️ 중간 부분';\n          }\n          \n          finalRows.push([`└─ [${positionMarker}]`, child]);\n        });\n        \n        finalRows.push([\"\", \"\"]);\n      });\n    }\n    \n    // 5. Ungrouped tokens\n    const allGroupedTokens = new Set();\n    \n    optimalPrefixSubstrings.forEach(group => \n      group.tokens.forEach(token => allGroupedTokens.add(token)));\n    \n    optimalSuffixSubstrings.forEach(group => \n      group.tokens.forEach(token => allGroupedTokens.add(token)));\n\n    commonWordGroups.forEach(group => \n      group.tokens.forEach(token => allGroupedTokens.add(token)));\n    \n    compoundGroups.forEach(group => {\n      allGroupedTokens.add(group.parent);\n      group.children.forEach(child => allGroupedTokens.add(child));\n    });\n    \n    const ungroupedTokens = allMinTokens\n      .filter(token => !allGroupedTokens.has(token))\n      .sort();\n    \n    if (ungroupedTokens.length > 0) {\n      finalRows.push([\"🌲 미분류 토큰\", \"\"]);\n      ungroupedTokens.forEach(token => {\n        finalRows.push([\"└─\", token]);\n      });\n    }\n    \n    return {\n      prefixGroups: optimalPrefixSubstrings.map(group => ({\n        substring: group.substring,\n        count: group.count,\n        tokens: group.tokens.sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          \n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          \n          return a.localeCompare(b);\n        })\n      })),\n      suffixGroups: optimalSuffixSubstrings.map(group => ({\n        substring: group.substring,\n        count: group.count,\n        tokens: group.tokens.sort((a, b) => {\n          const aIsBracket = a.startsWith('[괄호]');\n          const bIsBracket = b.startsWith('[괄호]');\n          \n          if (aIsBracket && !bIsBracket) return -1;\n          if (!aIsBracket && bIsBracket) return 1;\n          \n          return textUtils.reverseString(a.replace('[괄호] ', '')).localeCompare(\n            textUtils.reverseString(b.replace('[괄호] ', ''))\n          );\n        })\n      })),\n      wordGroups: commonWordGroups\n        .filter(group => group.count >= 2 && group.word.length >= 1)\n        .map(group => ({\n          word: group.word,\n          count: group.count,\n          tokens: group.tokens.sort((a, b) => {\n            const aIsBracket = a.startsWith('[괄호]');\n            const bIsBracket = b.startsWith('[괄호]');\n            \n            if (aIsBracket && !bIsBracket) return -1;\n            if (!aIsBracket && bIsBracket) return 1;\n            \n            return a.localeCompare(b);\n          }),\n          relations: group.relations\n        })),\n      compoundGroups,\n      ungroupedTokens\n    };\n  };\n  \n  // Processed classification data\n  const classificationData = processData();\n  \n  // Render tree node with children\n  const renderTreeNode = (label, children, nodeType, nodeSubtype = '') => (\n    <div className={`tree-node ${nodeType} ${nodeSubtype}`}>\n      <div className=\"tree-node-label\">{label}</div>\n      {children && children.length > 0 && (\n        <div className=\"tree-node-children\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n\n  // Render token node (leaf)\n  const renderTokenNode = (token) => {\n    const isBracketContent = String(token).startsWith('[괄호]');\n    let displayContent = token;\n    \n    if (isBracketContent) {\n      displayContent = (\n        <>\n          <span className=\"bracket-indicator\">⊂⊃</span>\n          {String(token).replace('[괄호] ', '')}\n        </>\n      );\n    }\n    \n    return (\n      <div className={`token-node ${isBracketContent ? 'bracket-content' : ''}`}>\n        {displayContent}\n      </div>\n    );\n  };\n\n  // Render position indicator for tokens\n  const renderPositionIndicator = (position, direction) => {\n    if (direction === 'prefix' || position === 0) {\n      return <span className=\"position-indicator position-start\">⬅️ 처음</span>;\n    } else if (direction === 'suffix') {\n      return <span className=\"position-indicator position-end\">➡️ 끝</span>;\n    }\n    return null;\n  };\n  \n  // Render the classification results with dendrogram-style visualization\n  return (\n    <div className=\"separation-classifier\">\n      <div className=\"classifier-header\">\n        <h3>분리분류 결과</h3>\n        <button className=\"reset-button\" onClick={onReset} title=\"원본 데이터로 복원\">\n          <span>🔄 원본으로 복원</span>\n        </button>\n      </div>\n      \n      <div className=\"dendrogram-container\">\n        {/* Word Groups - NEW SECTION - Moved to top for importance */}\n        {classificationData.wordGroups && classificationData.wordGroups.length > 0 && (\n          <div className=\"tree-category\">\n            <div className=\"tree-category-header\">\n              <h4>🌲 단어 기준 그룹</h4>\n            </div>\n            <div className=\"tree-content\">\n              {classificationData.wordGroups.map((group, idx) => {\n                // Skip groups where the word is not at start or end of all tokens\n                if (!group.isUnit && !group.direction) {\n                  return null;\n                }\n\n                return (\n                  <div key={`word-${idx}`} className=\"group-tree\">\n                    {renderTreeNode(\n                      <><span className=\"group-marker\">📌</span> {group.isUnit ? `단위: ${group.word}` : \n                        (group.direction === 'prefix' ? `앞부분 단어: ${group.word}` : \n                         group.direction === 'suffix' ? `뒷부분 단어: ${group.word}` : `단어: ${group.word}`)} \n                         <span className=\"count-badge\">({group.count})</span></>,\n                      group.tokens.map((token, tokenIdx) => {\n                        // Find position info\n                        const relation = group.relations.find(r => r.token === token);\n                        \n                        return (\n                          <div key={`word-${idx}-token-${tokenIdx}`} className=\"tree-branch with-position\">\n                            <div className=\"branch-line\"></div>\n                            <div className=\"branch-content\">\n                              {!group.isUnit && relation && renderPositionIndicator(relation.position, relation.direction)}\n                              {renderTokenNode(token)}\n                            </div>\n                          </div>\n                        );\n                      }),\n                      'group-node',\n                      group.isUnit ? 'unit-group' : \n                        (group.direction === 'prefix' ? 'prefix-word-group' : \n                         group.direction === 'suffix' ? 'suffix-word-group' : 'word-group')\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n        \n        {/* Prefix Groups */}\n        <div className=\"tree-category\">\n          <div className=\"tree-category-header\">\n            <h4>🌲 접두사 기준 그룹 (앞글자순)</h4>\n          </div>\n          <div className=\"tree-content\">\n            {classificationData.prefixGroups.map((group, idx) => (\n              <div key={`prefix-${idx}`} className=\"group-tree\">\n                {renderTreeNode(\n                  <><span className=\"group-marker\">📌</span> 앞부분: {group.substring} <span className=\"count-badge\">({group.count})</span></>,\n                  group.tokens.map((token, tokenIdx) => (\n                    <div key={`prefix-${idx}-token-${tokenIdx}`} className=\"tree-branch\">\n                      <div className=\"branch-line\"></div>\n                      {renderTokenNode(token)}\n                    </div>\n                  )),\n                  'group-node',\n                  'prefix-group'\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Suffix Groups */}\n        <div className=\"tree-category\">\n          <div className=\"tree-category-header\">\n            <h4>🌲 접미사 기준 그룹 (뒷글자순)</h4>\n          </div>\n          <div className=\"tree-content\">\n            {classificationData.suffixGroups.map((group, idx) => (\n              <div key={`suffix-${idx}`} className=\"group-tree\">\n                {renderTreeNode(\n                  <><span className=\"group-marker\">📌</span> 뒷부분: {group.substring} <span className=\"count-badge\">({group.count})</span></>,\n                  group.tokens.map((token, tokenIdx) => (\n                    <div key={`suffix-${idx}-token-${tokenIdx}`} className=\"tree-branch\">\n                      <div className=\"branch-line\"></div>\n                      {renderTokenNode(token)}\n                    </div>\n                  )),\n                  'group-node',\n                  'suffix-group'\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Compound Groups */}\n        {classificationData.compoundGroups && classificationData.compoundGroups.length > 0 && (\n          <div className=\"tree-category\">\n            <div className=\"tree-category-header\">\n              <h4>🌲 복합어 관계 그룹</h4>\n            </div>\n            <div className=\"tree-content\">\n              {classificationData.compoundGroups.map((group, idx) => {\n                const parentClean = group.parent.replace('[괄호] ', '');\n                \n                return (\n                  <div key={`compound-${idx}`} className=\"group-tree\">\n                    {renderTreeNode(\n                      <><span className=\"group-marker\">📌</span> 복합어: {parentClean} <span className=\"count-badge\">({group.children.length})</span></>,\n                      group.children.map((child, childIdx) => {\n                        const position = group.positions[childIdx];\n                        const childClean = child.replace('[괄호] ', '');\n                        \n                        return (\n                          <div key={`compound-${idx}-child-${childIdx}`} className=\"tree-branch with-position\">\n                            <div className=\"branch-line\"></div>\n                            <div className=\"branch-content\">\n                              {position === 0 ? (\n                                <span className=\"position-indicator position-start\">⬅️ 처음</span>\n                              ) : position + childClean.length === parentClean.length ? (\n                                <span className=\"position-indicator position-end\">➡️ 끝</span>\n                              ) : null}\n                              {renderTokenNode(child)}\n                            </div>\n                          </div>\n                        );\n                      }),\n                      'group-node',\n                      'compound-group'\n                    )}\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n        \n        {/* Ungrouped Tokens */}\n        {classificationData.ungroupedTokens && classificationData.ungroupedTokens.length > 0 && (\n          <div className=\"tree-category\">\n            <div className=\"tree-category-header\">\n              <h4>🌲 미분류 토큰</h4>\n            </div>\n            <div className=\"tree-content ungrouped-content\">\n              {classificationData.ungroupedTokens.map((token, idx) => (\n                <div key={`ungrouped-${idx}`} className=\"ungrouped-token\">\n                  {renderTokenNode(token)}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SeparationClassifier; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}