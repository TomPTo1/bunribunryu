{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/Documents/github/bunribunryu/src/components/browse/BrowseMode.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport FileExplorerColumn from './FileExplorerColumn';\nimport WorkspaceColumn from './WorkspaceColumn';\nimport ControlColumn from './ControlColumn';\nimport './BrowseMode.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BrowseMode = () => {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileContent, setFileContent] = useState(null);\n  const [processedData, setProcessedData] = useState(null);\n  const handleFileSelect = file => {\n    setSelectedFile(file);\n    // In a real app, this would load the file content from the backend\n    // For now, we'll just set dummy content\n    if (file) {\n      const dummyContent = {\n        path: file.path,\n        name: file.name,\n        type: file.type,\n        content: `Sample content for ${file.name}`\n      };\n      setFileContent(dummyContent);\n      // Reset processed data when a new file is selected\n      setProcessedData(null);\n    } else {\n      setFileContent(null);\n      setProcessedData(null);\n    }\n  };\n\n  // Handle data processing from ControlColumn\n  const handleProcessedDataChange = data => {\n    setProcessedData(data);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"browse-mode-container\",\n    children: [/*#__PURE__*/_jsxDEV(FileExplorerColumn, {\n      onFileSelect: handleFileSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(WorkspaceColumn, {\n      selectedFile: selectedFile,\n      fileContent: fileContent,\n      processedData: processedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ControlColumn, {\n      data: fileContent,\n      onProcessedDataChange: handleProcessedDataChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(BrowseMode, \"Mkzqg0v3kf6FrOMqtCNKHY/9JtY=\");\n_c = BrowseMode;\nexport default BrowseMode;\nvar _c;\n$RefreshReg$(_c, \"BrowseMode\");","map":{"version":3,"names":["React","useState","FileExplorerColumn","WorkspaceColumn","ControlColumn","jsxDEV","_jsxDEV","BrowseMode","_s","selectedFile","setSelectedFile","fileContent","setFileContent","processedData","setProcessedData","handleFileSelect","file","dummyContent","path","name","type","content","handleProcessedDataChange","data","className","children","onFileSelect","fileName","_jsxFileName","lineNumber","columnNumber","onProcessedDataChange","_c","$RefreshReg$"],"sources":["/Users/francesson/Documents/github/bunribunryu/src/components/browse/BrowseMode.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FileExplorerColumn from './FileExplorerColumn';\nimport WorkspaceColumn from './WorkspaceColumn';\nimport ControlColumn from './ControlColumn';\nimport './BrowseMode.css';\n\nconst BrowseMode = () => {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [fileContent, setFileContent] = useState(null);\n  const [processedData, setProcessedData] = useState(null);\n\n  const handleFileSelect = (file) => {\n    setSelectedFile(file);\n    // In a real app, this would load the file content from the backend\n    // For now, we'll just set dummy content\n    if (file) {\n      const dummyContent = {\n        path: file.path,\n        name: file.name,\n        type: file.type,\n        content: `Sample content for ${file.name}`\n      };\n      \n      setFileContent(dummyContent);\n      // Reset processed data when a new file is selected\n      setProcessedData(null);\n    } else {\n      setFileContent(null);\n      setProcessedData(null);\n    }\n  };\n\n  // Handle data processing from ControlColumn\n  const handleProcessedDataChange = (data) => {\n    setProcessedData(data);\n  };\n\n  return (\n    <div className=\"browse-mode-container\">\n      <FileExplorerColumn onFileSelect={handleFileSelect} />\n      <WorkspaceColumn \n        selectedFile={selectedFile} \n        fileContent={fileContent} \n        processedData={processedData}\n      />\n      <ControlColumn \n        data={fileContent} \n        onProcessedDataChange={handleProcessedDataChange}\n      />\n    </div>\n  );\n};\n\nexport default BrowseMode; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACU,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAExD,MAAMc,gBAAgB,GAAIC,IAAI,IAAK;IACjCN,eAAe,CAACM,IAAI,CAAC;IACrB;IACA;IACA,IAAIA,IAAI,EAAE;MACR,MAAMC,YAAY,GAAG;QACnBC,IAAI,EAAEF,IAAI,CAACE,IAAI;QACfC,IAAI,EAAEH,IAAI,CAACG,IAAI;QACfC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,OAAO,EAAE,sBAAsBL,IAAI,CAACG,IAAI;MAC1C,CAAC;MAEDP,cAAc,CAACK,YAAY,CAAC;MAC5B;MACAH,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLF,cAAc,CAAC,IAAI,CAAC;MACpBE,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAMQ,yBAAyB,GAAIC,IAAI,IAAK;IAC1CT,gBAAgB,CAACS,IAAI,CAAC;EACxB,CAAC;EAED,oBACEjB,OAAA;IAAKkB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCnB,OAAA,CAACJ,kBAAkB;MAACwB,YAAY,EAAEX;IAAiB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACtDxB,OAAA,CAACH,eAAe;MACdM,YAAY,EAAEA,YAAa;MAC3BE,WAAW,EAAEA,WAAY;MACzBE,aAAa,EAAEA;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eACFxB,OAAA,CAACF,aAAa;MACZmB,IAAI,EAAEZ,WAAY;MAClBoB,qBAAqB,EAAET;IAA0B;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA7CID,UAAU;AAAAyB,EAAA,GAAVzB,UAAU;AA+ChB,eAAeA,UAAU;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}