{"ast":null,"code":"var _jsxFileName = \"/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MiningView = ({\n  combinationHeaders,\n  loading,\n  error,\n  testMode\n}) => {\n  _s();\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('eclat'); // 'eclat' or 'fpgrowth'\n  const [minSupport, setMinSupport] = useState(0.1); // 10% default\n  const [minConfidence, setMinConfidence] = useState(0.5); // 50% default\n  const [maxDepth, setMaxDepth] = useState(15); // Increased default depth for deeper patterns\n  const svgRef = useRef(null);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (miningData && svgRef.current) {\n      renderMiningTree();\n    }\n  }, [miningData, expandedNodes, highlightedPattern]);\n\n  // Function to render a unified hierarchical tree visualization\n  const renderMiningTree = () => {\n    if (!svgRef.current || !miningData) return;\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n    const CONTAINER_WIDTH = svg.clientWidth || 300;\n    const NODE_HEIGHT = 34; // Slightly larger height for better readability\n    const NODE_SPACING = 12; // Further increased spacing between nodes\n    const LEVEL_INDENT = 30; // Increased indent for better hierarchy visualization\n\n    // Calculate tree structure based on expanded nodes\n    const treeNodes = [];\n    let yOffset = 20; // Initial top padding\n\n    // Skip the root node and start directly with top-level items\n\n    // Recursive function to add nodes\n    const addNodesRecursively = (nodes, parentId, level, isVisible) => {\n      if (!nodes || nodes.length === 0) return;\n\n      // Sort nodes by support for better visualization\n      const sortedNodes = [...nodes].sort((a, b) => b.support - a.support);\n      sortedNodes.forEach(node => {\n        // Skip if parent is collapsed\n        if (!isVisible) return;\n        const isExpanded = expandedNodes[node.id] || false;\n\n        // Add current node\n        treeNodes.push({\n          ...node,\n          level,\n          x: 10 + level * LEVEL_INDENT,\n          y: yOffset,\n          isExpanded,\n          parent: parentId\n        });\n\n        // Increment y-position for next node\n        yOffset += NODE_HEIGHT + NODE_SPACING;\n\n        // Process children if any\n        if (node.children && node.children.length > 0) {\n          addNodesRecursively(node.children, node.id, level + 1, isVisible && isExpanded);\n        }\n      });\n    };\n\n    // Add all nodes from mining data starting without a root\n    // Sort top-level items by support\n    const sortedTopNodes = [...miningData].sort((a, b) => b.support - a.support);\n    addNodesRecursively(sortedTopNodes, null, 0, true);\n\n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`); // Add bottom padding\n\n    // Create a container for the SVG elements\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(container);\n\n    // Draw connections between nodes\n    treeNodes.forEach(node => {\n      if (node.parent) {\n        const parent = treeNodes.find(n => n.id === node.parent);\n        if (parent) {\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          const startX = parent.x + 8; // Start from parent indentation + offset\n          const startY = parent.y + NODE_HEIGHT / 2;\n          const endX = node.x;\n          const endY = node.y + NODE_HEIGHT / 2;\n\n          // Create an elbow connector (straight lines with 90-degree turn)\n          const d = `M ${startX} ${startY} L ${startX + 5} ${startY} L ${startX + 5} ${endY} L ${endX} ${endY}`;\n          path.setAttribute('d', d);\n          path.setAttribute('fill', 'none');\n\n          // Highlight path if node is part of highlighted pattern\n          const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id) && highlightedPattern.includes(parent.id);\n          path.setAttribute('stroke', isHighlighted ? '#999' : '#eee');\n          path.setAttribute('stroke-width', isHighlighted ? '1.5' : '1');\n          container.appendChild(path);\n        }\n      }\n    });\n\n    // Draw nodes\n    treeNodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n\n      // Node background (rectangle)\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n\n      // Calculate width based on content and level\n      const baseWidth = CONTAINER_WIDTH - node.x - 30;\n      const width = Math.min(baseWidth, 240); // Increased max width for better readability\n\n      rect.setAttribute('width', width);\n      rect.setAttribute('height', NODE_HEIGHT);\n      rect.setAttribute('rx', 4); // Rounded corners\n\n      // Determine fill color based on level and highlight state\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n\n      // Use a more monotone color scheme, with slight variation for top-level vs child nodes\n      let fillColor = node.level === 0 ? '#f5f5f5' : '#fafafa';\n      if (isHighlighted) {\n        fillColor = '#f0f0f0'; // Slightly different shade for highlighted nodes\n      }\n      rect.setAttribute('fill', fillColor);\n      rect.setAttribute('stroke', isHighlighted ? '#999' : '#ddd');\n      rect.setAttribute('stroke-width', isHighlighted ? '1.5' : '1');\n\n      // Make nodes interactive\n      if (node.children && node.children.length > 0) {\n        nodeGroup.style.cursor = 'pointer';\n\n        // Toggle expansion on click\n        nodeGroup.addEventListener('click', () => {\n          toggleNode(node.id);\n        });\n      }\n\n      // Hover effect for highlighting patterns\n      nodeGroup.addEventListener('mouseenter', () => {\n        // Find all ancestors and highlight the path\n        const pattern = [node.id];\n        let currentNode = node;\n        while (currentNode.parent) {\n          pattern.push(currentNode.parent);\n          currentNode = treeNodes.find(n => n.id === currentNode.parent);\n          if (!currentNode) break;\n        }\n        setHighlightedPattern(pattern);\n      });\n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n      });\n\n      // Add expansion indicator if node has children\n      if (node.children && node.children.length > 0) {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', width - 15);\n        indicator.setAttribute('y', NODE_HEIGHT / 2 + 4);\n        indicator.setAttribute('font-size', '12px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#888');\n        nodeGroup.appendChild(indicator);\n      }\n\n      // Node label - truncate if needed\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 8);\n      text.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      text.setAttribute('font-size', node.level === 0 ? '12px' : '11px');\n      text.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      text.setAttribute('fill', '#333');\n\n      // Make sure text fits\n      const maxTextWidth = width - 60; // Leave room for support and indicator\n      let displayText = node.name;\n\n      // Add pattern indicators for nested levels\n      if (node.level > 0) {\n        displayText = `→ ${displayText}`;\n      }\n      if (displayText.length > 25) {\n        // Allow longer text to display\n        displayText = displayText.substring(0, 23) + '...';\n      }\n      text.textContent = displayText;\n\n      // Support count\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', width - 30);\n      supportText.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      supportText.setAttribute('font-size', '11px');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.setAttribute('fill', '#555');\n      supportText.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      supportText.textContent = node.support;\n      nodeGroup.appendChild(rect);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      container.appendChild(nodeGroup);\n    });\n  };\n\n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData.filter(item => item.header_group).map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n\n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts).filter(item => itemCounts[item] >= minSupportCount).sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n\n    // Build a single hierarchical tree structure instead of multiple independent trees\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n\n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n\n      // Create a single root node representing the most frequent item\n      const rootItem = frequentItems[0];\n      const rootSupport = tidLists[rootItem].size;\n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: rootSupport,\n        confidence: rootSupport / totalTransactions,\n        children: []\n      };\n\n      // Build a tree structure following the frequency order of items\n      const buildOrderedTree = (currentNode, currentPrefix, currentTids, level) => {\n        if (level >= maxDepth) return;\n\n        // Find index of the current node's item in the frequentItems list\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n\n        // Check for next items in the frequency order\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          const nextItemTids = tidLists[nextItem];\n\n          // Calculate intersection\n          const intersection = new Set([...currentTids].filter(tid => nextItemTids.has(tid)));\n          const support = intersection.size;\n\n          // Add to tree if support is sufficient\n          if (support >= Math.max(2, minSupportCount)) {\n            const newPrefix = [...currentPrefix, nextItem];\n            const confidence = support / currentTids.size;\n\n            // Add only if confidence is sufficient (reduced for deeper patterns)\n            if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              currentNode.children.push(childNode);\n\n              // Recursively build tree with this child as new parent\n              buildOrderedTree(childNode, newPrefix, intersection, level + 1);\n            }\n          }\n        }\n      };\n\n      // Start building the tree from the root\n      buildOrderedTree(singleTreeRoot, [rootItem], tidLists[rootItem], 1);\n\n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n\n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n\n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n\n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    } else {\n      // FP-GROWTH for a single hierarchical tree\n\n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction.filter(item => frequentItems.includes(item)).sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n\n      // Create a single root node for the most frequent item\n      const rootItem = frequentItems[0];\n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: itemCounts[rootItem],\n        confidence: itemCounts[rootItem] / totalTransactions,\n        children: []\n      };\n\n      // Create a mapping of patterns to their support count\n      const patternSupports = {};\n\n      // First pass - gather all pattern supports\n      orderedTransactions.forEach(transaction => {\n        if (transaction.length < 2) return;\n        for (let i = 0; i < transaction.length; i++) {\n          for (let j = i + 1; j < transaction.length; j++) {\n            const pattern = [transaction[i], transaction[j]];\n            const key = pattern.join('-');\n            patternSupports[key] = (patternSupports[key] || 0) + 1;\n          }\n        }\n      });\n\n      // Then build tree with those precomputed pattern supports\n      const buildOrderedFPTree = (currentNode, level) => {\n        if (level >= maxDepth) return;\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n\n          // Check if the pair meets minimum support\n          const patternKey = [currentNode.name, nextItem].join('-');\n          const support = patternSupports[patternKey] || 0;\n          if (support >= Math.max(2, minSupportCount)) {\n            const confidence = support / itemCounts[currentNode.name];\n            if (confidence >= (level > 2 ? minConfidence / 2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              currentNode.children.push(childNode);\n              buildOrderedFPTree(childNode, level + 1);\n            }\n          }\n        }\n      };\n\n      // Start building the tree from the root\n      buildOrderedFPTree(singleTreeRoot, 1);\n\n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n\n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n\n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n\n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = algo => {\n    setAlgorithm(algo);\n  };\n\n  // Change minimum support threshold\n  const handleSupportChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n\n  // Change minimum confidence threshold\n  const handleConfidenceChange = e => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n\n  // Change maximum depth\n  const handleDepthChange = e => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = nodeId => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"\\uB85C\\uB529 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error\",\n      children: [\"\\uC5D0\\uB7EC: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 9\n    }, this) : combinationHeaders && combinationHeaders.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mining-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"algorithm-selector\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: `algorithm-btn ${algorithm === 'eclat' ? 'active' : ''}`,\n            onClick: () => switchAlgorithm('eclat'),\n            children: \"Eclat \\uC54C\\uACE0\\uB9AC\\uC998\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: `algorithm-btn ${algorithm === 'fpgrowth' ? 'active' : ''}`,\n            onClick: () => switchAlgorithm('fpgrowth'),\n            children: \"FP-Growth \\uC54C\\uACE0\\uB9AC\\uC998\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"thresholds-control\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uC18C \\uC9C0\\uC9C0\\uB3C4 (Minimum Support): \", (minSupport * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 522,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.01\",\n              max: \"0.5\",\n              step: \"0.05\",\n              value: minSupport,\n              onChange: handleSupportChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 523,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 521,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uC18C \\uC2E0\\uB8B0\\uB3C4 (Minimum Confidence): \", (minConfidence * 100).toFixed(0), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0.01\",\n              max: \"0.9\",\n              step: \"0.1\",\n              value: minConfidence,\n              onChange: handleConfidenceChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 534,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"threshold-item\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"\\uCD5C\\uB300 \\uD328\\uD134 \\uAE4A\\uC774 (Maximum Pattern Depth): \", maxDepth]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 544,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"3\",\n              max: \"20\",\n              step: \"1\",\n              value: maxDepth,\n              onChange: handleDepthChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 545,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 520,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-tree-container\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          className: \"mining-tree-svg\",\n          ref: svgRef,\n          width: \"100%\",\n          height: \"400\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mining-explanation\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [algorithm === 'eclat' ? 'Eclat' : 'FP-Growth', \" \\uC54C\\uACE0\\uB9AC\\uC998 \\uD328\\uD134 \\uC2DC\\uAC01\\uD654:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uAC00\\uC7A5 \\uBE48\\uB3C4\\uAC00 \\uB192\\uC740 \\uD5E4\\uB354\\uC5D0\\uC11C \\uC2DC\\uC791\\uD558\\uC5EC \\uBE48\\uB3C4\\uC21C\\uC73C\\uB85C \\uC5F0\\uAD00\\uC131 \\uD45C\\uC2DC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uD328\\uD134 \\uD074\\uB9AD: \\uD558\\uC704 \\uD328\\uD134 \\uD655\\uC7A5/\\uCD95\\uC18C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uB9C8\\uC6B0\\uC2A4 \\uC624\\uBC84: \\uD328\\uD134 \\uACBD\\uB85C \\uD558\\uC774\\uB77C\\uC774\\uD2B8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"\\uC22B\\uC790: \\uD328\\uD134 \\uBC1C\\uC0DD \\uBE48\\uB3C4 (\\uCD5C\\uC18C 2\\uD68C \\uC774\\uC0C1)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"column-empty\",\n      children: testMode ? \"마이닝 데이터를 로딩 중입니다...\" : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      jsx: true,\n      children: `\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          margin-bottom: 12px;\n          background-color: #fafafa;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .algorithm-selector {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .algorithm-btn {\n          background: #f7f7f7;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 12px;\n          cursor: pointer;\n        }\n        \n        .algorithm-btn.active {\n          background: #666;\n          color: white;\n          border-color: #666;\n        }\n        \n        .thresholds-control {\n          display: flex;\n          flex-direction: column;\n          gap: 6px;\n        }\n        \n        .threshold-item {\n          display: flex;\n          flex-direction: column;\n          font-size: 11px;\n        }\n        \n        .threshold-item label {\n          margin-bottom: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .mining-tree-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #ffffff;\n          flex-grow: 1;\n          min-height: 350px;  // Increased minimum height\n          padding: 10px;\n          box-shadow: inset 0 0 3px rgba(0,0,0,0.05);\n        }\n        \n        .mining-explanation {\n          margin-top: 10px;\n          font-size: 11px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 6px 10px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 16px;\n          margin: 4px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n        \n        .mining-explanation li {\n          margin-bottom: 2px;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 584,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 5\n  }, this);\n};\n_s(MiningView, \"ofkUh6S3WiU8oHxI2JxZeDsQV10=\");\n_c = MiningView;\nexport default MiningView;\nvar _c;\n$RefreshReg$(_c, \"MiningView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","MiningView","combinationHeaders","loading","error","testMode","_s","miningData","setMiningData","expandedNodes","setExpandedNodes","highlightedPattern","setHighlightedPattern","algorithm","setAlgorithm","minSupport","setMinSupport","minConfidence","setMinConfidence","maxDepth","setMaxDepth","svgRef","length","generateMiningData","current","renderMiningTree","svg","firstChild","removeChild","CONTAINER_WIDTH","clientWidth","NODE_HEIGHT","NODE_SPACING","LEVEL_INDENT","treeNodes","yOffset","addNodesRecursively","nodes","parentId","level","isVisible","sortedNodes","sort","a","b","support","forEach","node","isExpanded","id","push","x","y","parent","children","sortedTopNodes","setAttribute","container","document","createElementNS","appendChild","find","n","path","startX","startY","endX","endY","d","isHighlighted","includes","nodeGroup","rect","baseWidth","width","Math","min","fillColor","style","cursor","addEventListener","toggleNode","pattern","currentNode","indicator","textContent","text","maxTextWidth","displayText","name","substring","supportText","combinationData","algo","transactions","filter","item","header_group","map","split","itemCounts","totalTransactions","transaction","minSupportCount","max","floor","frequentItems","Object","keys","tidLists","Set","tid","add","rootItem","rootSupport","size","singleTreeRoot","confidence","buildOrderedTree","currentPrefix","currentTids","currentItemIndex","indexOf","i","nextItem","nextItemTids","intersection","has","newPrefix","childNode","initialExpanded","slice","child","orderedTransactions","patternSupports","j","key","join","buildOrderedFPTree","patternKey","switchAlgorithm","handleSupportChange","e","value","parseFloat","target","isNaN","handleConfidenceChange","handleDepthChange","parseInt","nodeId","prev","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","toFixed","type","step","onChange","ref","height","jsx","_c","$RefreshReg$"],"sources":["/Users/francesson/reorganize/channel-list-app/src/components/MiningView.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst MiningView = ({ combinationHeaders, loading, error, testMode }) => {\n  const [miningData, setMiningData] = useState(null);\n  const [expandedNodes, setExpandedNodes] = useState({});\n  const [highlightedPattern, setHighlightedPattern] = useState(null);\n  const [algorithm, setAlgorithm] = useState('eclat'); // 'eclat' or 'fpgrowth'\n  const [minSupport, setMinSupport] = useState(0.1); // 10% default\n  const [minConfidence, setMinConfidence] = useState(0.5); // 50% default\n  const [maxDepth, setMaxDepth] = useState(15); // Increased default depth for deeper patterns\n  const svgRef = useRef(null);\n\n  // 데이터가 변경될 때마다 마이닝 실행\n  useEffect(() => {\n    if (combinationHeaders && combinationHeaders.length > 0) {\n      generateMiningData(combinationHeaders, algorithm);\n    } else {\n      setMiningData(null);\n    }\n  }, [combinationHeaders, algorithm, minSupport, minConfidence, maxDepth]);\n\n  // Effect to update SVG visualization when mining data changes\n  useEffect(() => {\n    if (miningData && svgRef.current) {\n      renderMiningTree();\n    }\n  }, [miningData, expandedNodes, highlightedPattern]);\n\n  // Function to render a unified hierarchical tree visualization\n  const renderMiningTree = () => {\n    if (!svgRef.current || !miningData) return;\n\n    const svg = svgRef.current;\n    // Clear previous content\n    while (svg.firstChild) {\n      svg.removeChild(svg.firstChild);\n    }\n\n    const CONTAINER_WIDTH = svg.clientWidth || 300;\n    const NODE_HEIGHT = 34; // Slightly larger height for better readability\n    const NODE_SPACING = 12; // Further increased spacing between nodes\n    const LEVEL_INDENT = 30; // Increased indent for better hierarchy visualization\n    \n    // Calculate tree structure based on expanded nodes\n    const treeNodes = [];\n    let yOffset = 20;  // Initial top padding\n    \n    // Skip the root node and start directly with top-level items\n    \n    // Recursive function to add nodes\n    const addNodesRecursively = (nodes, parentId, level, isVisible) => {\n      if (!nodes || nodes.length === 0) return;\n      \n      // Sort nodes by support for better visualization\n      const sortedNodes = [...nodes].sort((a, b) => b.support - a.support);\n      \n      sortedNodes.forEach(node => {\n        // Skip if parent is collapsed\n        if (!isVisible) return;\n        \n        const isExpanded = expandedNodes[node.id] || false;\n        \n        // Add current node\n        treeNodes.push({\n          ...node,\n          level,\n          x: 10 + (level * LEVEL_INDENT),\n          y: yOffset,\n          isExpanded,\n          parent: parentId\n        });\n        \n        // Increment y-position for next node\n        yOffset += NODE_HEIGHT + NODE_SPACING;\n        \n        // Process children if any\n        if (node.children && node.children.length > 0) {\n          addNodesRecursively(node.children, node.id, level + 1, isVisible && isExpanded);\n        }\n      });\n    };\n    \n    // Add all nodes from mining data starting without a root\n    // Sort top-level items by support\n    const sortedTopNodes = [...miningData].sort((a, b) => b.support - a.support);\n    addNodesRecursively(sortedTopNodes, null, 0, true);\n    \n    // Set SVG height based on content\n    svg.setAttribute('height', `${yOffset + 20}px`);  // Add bottom padding\n    \n    // Create a container for the SVG elements\n    const container = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n    svg.appendChild(container);\n    \n    // Draw connections between nodes\n    treeNodes.forEach(node => {\n      if (node.parent) {\n        const parent = treeNodes.find(n => n.id === node.parent);\n        if (parent) {\n          const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\n          \n          const startX = parent.x + 8;  // Start from parent indentation + offset\n          const startY = parent.y + (NODE_HEIGHT / 2);\n          const endX = node.x;\n          const endY = node.y + (NODE_HEIGHT / 2);\n          \n          // Create an elbow connector (straight lines with 90-degree turn)\n          const d = `M ${startX} ${startY} L ${startX + 5} ${startY} L ${startX + 5} ${endY} L ${endX} ${endY}`;\n          \n          path.setAttribute('d', d);\n          path.setAttribute('fill', 'none');\n          \n          // Highlight path if node is part of highlighted pattern\n          const isHighlighted = highlightedPattern && (\n            highlightedPattern.includes(node.id) && highlightedPattern.includes(parent.id)\n          );\n          \n          path.setAttribute('stroke', isHighlighted ? '#999' : '#eee');\n          path.setAttribute('stroke-width', isHighlighted ? '1.5' : '1');\n          \n          container.appendChild(path);\n        }\n      }\n    });\n    \n    // Draw nodes\n    treeNodes.forEach(node => {\n      const nodeGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\n      nodeGroup.setAttribute('transform', `translate(${node.x}, ${node.y})`);\n      \n      // Node background (rectangle)\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n      \n      // Calculate width based on content and level\n      const baseWidth = CONTAINER_WIDTH - node.x - 30;\n      const width = Math.min(baseWidth, 240);  // Increased max width for better readability\n      \n      rect.setAttribute('width', width);\n      rect.setAttribute('height', NODE_HEIGHT);\n      rect.setAttribute('rx', 4);  // Rounded corners\n      \n      // Determine fill color based on level and highlight state\n      const isHighlighted = highlightedPattern && highlightedPattern.includes(node.id);\n      \n      // Use a more monotone color scheme, with slight variation for top-level vs child nodes\n      let fillColor = node.level === 0 ? '#f5f5f5' : '#fafafa'; \n      \n      if (isHighlighted) {\n        fillColor = '#f0f0f0'; // Slightly different shade for highlighted nodes\n      }\n      \n      rect.setAttribute('fill', fillColor);\n      rect.setAttribute('stroke', isHighlighted ? '#999' : '#ddd');\n      rect.setAttribute('stroke-width', isHighlighted ? '1.5' : '1');\n      \n      // Make nodes interactive\n      if (node.children && node.children.length > 0) {\n        nodeGroup.style.cursor = 'pointer';\n        \n        // Toggle expansion on click\n        nodeGroup.addEventListener('click', () => {\n          toggleNode(node.id);\n        });\n      }\n      \n      // Hover effect for highlighting patterns\n      nodeGroup.addEventListener('mouseenter', () => {\n        // Find all ancestors and highlight the path\n        const pattern = [node.id];\n        let currentNode = node;\n        \n        while (currentNode.parent) {\n          pattern.push(currentNode.parent);\n          currentNode = treeNodes.find(n => n.id === currentNode.parent);\n          if (!currentNode) break;\n        }\n        \n        setHighlightedPattern(pattern);\n      });\n      \n      nodeGroup.addEventListener('mouseleave', () => {\n        setHighlightedPattern(null);\n      });\n      \n      // Add expansion indicator if node has children\n      if (node.children && node.children.length > 0) {\n        const indicator = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n        indicator.textContent = node.isExpanded ? '−' : '+';\n        indicator.setAttribute('x', width - 15);\n        indicator.setAttribute('y', NODE_HEIGHT / 2 + 4);\n        indicator.setAttribute('font-size', '12px');\n        indicator.setAttribute('font-weight', 'bold');\n        indicator.setAttribute('fill', '#888');\n        nodeGroup.appendChild(indicator);\n      }\n      \n      // Node label - truncate if needed\n      const text = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      text.setAttribute('x', 8);\n      text.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      text.setAttribute('font-size', node.level === 0 ? '12px' : '11px');\n      text.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      text.setAttribute('fill', '#333');\n      \n      // Make sure text fits\n      const maxTextWidth = width - 60;  // Leave room for support and indicator\n      let displayText = node.name;\n      \n      // Add pattern indicators for nested levels\n      if (node.level > 0) {\n        displayText = `→ ${displayText}`;\n      }\n      \n      if (displayText.length > 25) {  // Allow longer text to display\n        displayText = displayText.substring(0, 23) + '...';\n      }\n      \n      text.textContent = displayText;\n      \n      // Support count\n      const supportText = document.createElementNS('http://www.w3.org/2000/svg', 'text');\n      supportText.setAttribute('x', width - 30);\n      supportText.setAttribute('y', NODE_HEIGHT / 2 + 4);\n      supportText.setAttribute('font-size', '11px');\n      supportText.setAttribute('text-anchor', 'end');\n      supportText.setAttribute('fill', '#555');\n      supportText.setAttribute('font-weight', node.level === 0 ? 'bold' : 'normal');\n      supportText.textContent = node.support;\n      \n      nodeGroup.appendChild(rect);\n      nodeGroup.appendChild(text);\n      nodeGroup.appendChild(supportText);\n      container.appendChild(nodeGroup);\n    });\n  };\n  \n  // Function to generate mining data using Eclat or FP Growth algorithm\n  const generateMiningData = (combinationData, algo = 'eclat') => {\n    if (!combinationData || combinationData.length === 0) {\n      setMiningData(null);\n      return;\n    }\n\n    // Step 1: Create transactions from header combinations\n    const transactions = combinationData\n      .filter(item => item.header_group)\n      .map(item => item.header_group.split('|'));\n\n    // Step 2: Count item frequencies for both algorithms\n    const itemCounts = {};\n    const totalTransactions = transactions.length;\n    \n    transactions.forEach(transaction => {\n      transaction.forEach(item => {\n        itemCounts[item] = (itemCounts[item] || 0) + 1;\n      });\n    });\n\n    // Calculate minimum support threshold - use absolute minimum of 2\n    const minSupportCount = Math.max(2, Math.floor(totalTransactions * minSupport));\n    \n    // Get frequent items sorted by frequency\n    const frequentItems = Object.keys(itemCounts)\n      .filter(item => itemCounts[item] >= minSupportCount)\n      .sort((a, b) => itemCounts[b] - itemCounts[a]);\n\n    // Create single tree structure with most frequent item as root\n    if (frequentItems.length === 0) {\n      setMiningData([]);\n      return;\n    }\n    \n    // Build a single hierarchical tree structure instead of multiple independent trees\n    if (algo === 'eclat') {\n      // ECLAT ALGORITHM IMPLEMENTATION\n      \n      // Step 1: Build vertical tid-lists (transaction ID lists) for each item\n      const tidLists = {};\n      frequentItems.forEach(item => {\n        tidLists[item] = new Set();\n      });\n      \n      transactions.forEach((transaction, tid) => {\n        transaction.forEach(item => {\n          if (frequentItems.includes(item)) {\n            tidLists[item].add(tid);\n          }\n        });\n      });\n      \n      // Create a single root node representing the most frequent item\n      const rootItem = frequentItems[0];\n      const rootSupport = tidLists[rootItem].size;\n      \n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: rootSupport,\n        confidence: rootSupport / totalTransactions,\n        children: []\n      };\n      \n      // Build a tree structure following the frequency order of items\n      const buildOrderedTree = (currentNode, currentPrefix, currentTids, level) => {\n        if (level >= maxDepth) return;\n        \n        // Find index of the current node's item in the frequentItems list\n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        \n        // Check for next items in the frequency order\n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          const nextItemTids = tidLists[nextItem];\n          \n          // Calculate intersection\n          const intersection = new Set([...currentTids].filter(tid => nextItemTids.has(tid)));\n          const support = intersection.size;\n          \n          // Add to tree if support is sufficient\n          if (support >= Math.max(2, minSupportCount)) {\n            const newPrefix = [...currentPrefix, nextItem];\n            const confidence = support / currentTids.size;\n            \n            // Add only if confidence is sufficient (reduced for deeper patterns)\n            if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              \n              currentNode.children.push(childNode);\n              \n              // Recursively build tree with this child as new parent\n              buildOrderedTree(childNode, newPrefix, intersection, level + 1);\n            }\n          }\n        }\n      };\n      \n      // Start building the tree from the root\n      buildOrderedTree(singleTreeRoot, [rootItem], tidLists[rootItem], 1);\n      \n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n      \n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n          \n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n      \n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n      \n    } else {\n      // FP-GROWTH for a single hierarchical tree\n      \n      // Step 3: Reorder transactions based on frequency\n      const orderedTransactions = transactions.map(transaction => {\n        return transaction\n          .filter(item => frequentItems.includes(item))\n          .sort((a, b) => itemCounts[b] - itemCounts[a]);\n      }).filter(transaction => transaction.length > 0);\n      \n      // Create a single root node for the most frequent item\n      const rootItem = frequentItems[0];\n      \n      const singleTreeRoot = {\n        id: rootItem,\n        name: rootItem,\n        support: itemCounts[rootItem],\n        confidence: itemCounts[rootItem] / totalTransactions,\n        children: []\n      };\n      \n      // Create a mapping of patterns to their support count\n      const patternSupports = {};\n      \n      // First pass - gather all pattern supports\n      orderedTransactions.forEach(transaction => {\n        if (transaction.length < 2) return;\n        \n        for (let i = 0; i < transaction.length; i++) {\n          for (let j = i + 1; j < transaction.length; j++) {\n            const pattern = [transaction[i], transaction[j]];\n            const key = pattern.join('-');\n            patternSupports[key] = (patternSupports[key] || 0) + 1;\n          }\n        }\n      });\n      \n      // Then build tree with those precomputed pattern supports\n      const buildOrderedFPTree = (currentNode, level) => {\n        if (level >= maxDepth) return;\n        \n        const currentItemIndex = frequentItems.indexOf(currentNode.name);\n        \n        for (let i = currentItemIndex + 1; i < frequentItems.length; i++) {\n          const nextItem = frequentItems[i];\n          \n          // Check if the pair meets minimum support\n          const patternKey = [currentNode.name, nextItem].join('-');\n          const support = patternSupports[patternKey] || 0;\n          \n          if (support >= Math.max(2, minSupportCount)) {\n            const confidence = support / itemCounts[currentNode.name];\n            \n            if (confidence >= (level > 2 ? minConfidence/2 : minConfidence)) {\n              const childNode = {\n                id: `${currentNode.id}-${nextItem}`,\n                name: nextItem,\n                support: support,\n                confidence: confidence,\n                children: []\n              };\n              \n              currentNode.children.push(childNode);\n              buildOrderedFPTree(childNode, level + 1);\n            }\n          }\n        }\n      };\n      \n      // Start building the tree from the root\n      buildOrderedFPTree(singleTreeRoot, 1);\n      \n      // Initialize expanded nodes for visualization\n      const initialExpanded = {};\n      initialExpanded[rootItem] = true; // Expand root node\n      \n      // Expand first level children\n      if (singleTreeRoot.children && singleTreeRoot.children.length > 0) {\n        singleTreeRoot.children.slice(0, 5).forEach(child => {\n          initialExpanded[child.id] = true;\n          \n          // Also expand first grandchild if available\n          if (child.children && child.children.length > 0) {\n            initialExpanded[child.children[0].id] = true;\n          }\n        });\n      }\n      \n      // Set the result as a single-item array containing the root\n      setMiningData([singleTreeRoot]);\n      setExpandedNodes(initialExpanded);\n    }\n  };\n\n  // Switch between algorithms\n  const switchAlgorithm = (algo) => {\n    setAlgorithm(algo);\n  };\n  \n  // Change minimum support threshold\n  const handleSupportChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinSupport(value);\n    }\n  };\n  \n  // Change minimum confidence threshold\n  const handleConfidenceChange = (e) => {\n    const value = parseFloat(e.target.value);\n    if (!isNaN(value) && value > 0 && value <= 1) {\n      setMinConfidence(value);\n    }\n  };\n  \n  // Change maximum depth\n  const handleDepthChange = (e) => {\n    const value = parseInt(e.target.value);\n    if (!isNaN(value) && value > 0) {\n      setMaxDepth(value);\n    }\n  };\n\n  // Function to toggle node expansion\n  const toggleNode = (nodeId) => {\n    setExpandedNodes(prev => ({\n      ...prev,\n      [nodeId]: !prev[nodeId]\n    }));\n  };\n\n  return (\n    <div className=\"tab-content\">\n      {loading ? (\n        <div className=\"loading\">로딩 중...</div>\n      ) : error ? (\n        <div className=\"error\">에러: {error}</div>\n      ) : combinationHeaders && combinationHeaders.length > 0 ? (\n        <div className=\"mining-view\">\n          <div className=\"mining-controls\">\n            <div className=\"algorithm-selector\">\n              <button \n                className={`algorithm-btn ${algorithm === 'eclat' ? 'active' : ''}`} \n                onClick={() => switchAlgorithm('eclat')}\n              >\n                Eclat 알고리즘\n              </button>\n              <button \n                className={`algorithm-btn ${algorithm === 'fpgrowth' ? 'active' : ''}`} \n                onClick={() => switchAlgorithm('fpgrowth')}\n              >\n                FP-Growth 알고리즘\n              </button>\n            </div>\n            <div className=\"thresholds-control\">\n              <div className=\"threshold-item\">\n                <label>최소 지지도 (Minimum Support): {(minSupport * 100).toFixed(0)}%</label>\n                <input \n                  type=\"range\" \n                  min=\"0.01\" \n                  max=\"0.5\" \n                  step=\"0.05\" \n                  value={minSupport}\n                  onChange={handleSupportChange}\n                />\n              </div>\n              <div className=\"threshold-item\">\n                <label>최소 신뢰도 (Minimum Confidence): {(minConfidence * 100).toFixed(0)}%</label>\n                <input \n                  type=\"range\" \n                  min=\"0.01\" \n                  max=\"0.9\" \n                  step=\"0.1\" \n                  value={minConfidence}\n                  onChange={handleConfidenceChange}\n                />\n              </div>\n              <div className=\"threshold-item\">\n                <label>최대 패턴 깊이 (Maximum Pattern Depth): {maxDepth}</label>\n                <input \n                  type=\"range\" \n                  min=\"3\" \n                  max=\"20\" \n                  step=\"1\" \n                  value={maxDepth}\n                  onChange={handleDepthChange}\n                />\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"mining-tree-container\">\n            <svg \n              className=\"mining-tree-svg\" \n              ref={svgRef} \n              width=\"100%\" \n              height=\"400\"\n            ></svg>\n          </div>\n          \n          <div className=\"mining-explanation\">\n            <p>{algorithm === 'eclat' ? 'Eclat' : 'FP-Growth'} 알고리즘 패턴 시각화:</p>\n            <ul>\n              <li>가장 빈도가 높은 헤더에서 시작하여 빈도순으로 연관성 표시</li>\n              <li>패턴 클릭: 하위 패턴 확장/축소</li>\n              <li>마우스 오버: 패턴 경로 하이라이트</li>\n              <li>숫자: 패턴 발생 빈도 (최소 2회 이상)</li>\n            </ul>\n          </div>\n        </div>\n      ) : (\n        <div className=\"column-empty\">\n          {testMode \n            ? \"마이닝 데이터를 로딩 중입니다...\" \n            : \"채널과 헤더를 선택하면 마이닝 결과가 표시됩니다.\"}\n        </div>\n      )}\n\n      <style jsx>{`\n        .mining-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .mining-controls {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n          margin-bottom: 12px;\n          background-color: #fafafa;\n          border-radius: 4px;\n          padding: 8px;\n        }\n        \n        .algorithm-selector {\n          display: flex;\n          gap: 8px;\n        }\n        \n        .algorithm-btn {\n          background: #f7f7f7;\n          border: 1px solid #ddd;\n          border-radius: 4px;\n          padding: 4px 8px;\n          font-size: 12px;\n          cursor: pointer;\n        }\n        \n        .algorithm-btn.active {\n          background: #666;\n          color: white;\n          border-color: #666;\n        }\n        \n        .thresholds-control {\n          display: flex;\n          flex-direction: column;\n          gap: 6px;\n        }\n        \n        .threshold-item {\n          display: flex;\n          flex-direction: column;\n          font-size: 11px;\n        }\n        \n        .threshold-item label {\n          margin-bottom: 2px;\n        }\n        \n        .threshold-item input {\n          width: 100%;\n        }\n        \n        .mining-tree-container {\n          border: 1px solid #e0e0e0;\n          border-radius: 4px;\n          overflow: auto;\n          background-color: #ffffff;\n          flex-grow: 1;\n          min-height: 350px;  // Increased minimum height\n          padding: 10px;\n          box-shadow: inset 0 0 3px rgba(0,0,0,0.05);\n        }\n        \n        .mining-explanation {\n          margin-top: 10px;\n          font-size: 11px;\n          color: #666;\n          background-color: #f9f9f9;\n          border-radius: 4px;\n          padding: 6px 10px;\n        }\n        \n        .mining-explanation ul {\n          padding-left: 16px;\n          margin: 4px 0;\n        }\n        \n        .mining-explanation p {\n          margin: 4px 0;\n          font-weight: bold;\n        }\n        \n        .mining-explanation li {\n          margin-bottom: 2px;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default MiningView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}